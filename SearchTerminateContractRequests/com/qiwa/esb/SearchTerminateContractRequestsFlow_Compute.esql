BROKER SCHEMA com.qiwa.esb
path Qiwa.Framework.Lib;

CREATE COMPUTE MODULE SearchTerminateContractRequestsFlow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		IF EXISTS(Environment.Properties.SearchTerminateContractRequests.INT_SearchTerminateContractRequests[]) THEN
			set Environment.Properties.SearchTerminateContractRequests.SearchTerminateContractRequests =
			Environment.Properties.SearchTerminateContractRequests.INT_SearchTerminateContractRequests;
			DELETE FIELD Environment.Properties.SearchTerminateContractRequests.INT_SearchTerminateContractRequests;
		END IF;
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.SearchTerminateContractRequests.SearchTerminateContractRequests.Variables;

		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.SearchTerminateContractRequestsRq.Header;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.SearchTerminateContractRequestsRq.Body;
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SearchTerminateContractRequestsRs NAME 'Header';
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SearchTerminateContractRequestsRs.Header;

		DECLARE TotalRecordsCount INT ;
		-- Conditional checks
		IF rInBodyRef.SequenceNumber IS NOT NULL AND rInBodyRef.LaborOfficeId IS NOT NULL
			OR (rInBodyRef.SequenceNumber IS NULL AND rInBodyRef.LaborOfficeId IS NULL)
			THEN
			CALL TerminateContract_Search (COALESCE(CAST(rInBodyRef.LaborOfficeId AS INT),NULL),
			COALESCE(CAST(rInBodyRef.SequenceNumber AS INT),NULL),
			COALESCE(CAST(rInBodyRef.TCRequestId AS INT),NULL),
			COALESCE(CAST(rInBodyRef.RequesterIdNo AS Char),NULL),
			COALESCE(CAST(rInBodyRef.LaborerDetails.LaborerIdNo AS Char),NULL),
			COALESCE(CAST(rInBodyRef.LaborerDetails.LaborerName AS Char),NULL),
			CAST(rInBodyRef.RequesterTypeId AS INT),
			COALESCE(CAST(rInBodyRef.StatusIds AS Char),NULL),
			COALESCE(CAST(rInBodyRef.RDUpdateRequestId AS Integer),NULL),
			COALESCE(CAST(rInBodyRef.CancelationRequestId AS INT),NULL),
			COALESCE(CAST(rInBodyRef.TCReasonId AS INT),NULL),
			COALESCE(CAST(rInBodyRef.CreationDate AS timestamp),NULL),
			COALESCE(CAST(rInBodyRef.ReleaseDate AS timestamp),NULL),
			COALESCE(CAST(rInBodyRef.RemainingDays AS INT),NULL),
			COALESCE(CAST(rInBodyRef.OperatorIdNo AS Char),NULL),
			CAST(rInBodyRef.PageSize AS INT),
			CAST(rInBodyRef.PageIndex AS INT),
			Environment.Variables.DB.ResultSet[]);
			DECLARE resultSetCount INT CARDINALITY(Environment.Variables.DB.ResultSet[]);
			DECLARE CountError1 INT;
			-- checking if there is any records for the sent User information
			IF resultSetCount <> 0 THEN
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);
				CREATE LASTCHILD OF OutputRoot.XMLNSC.SearchTerminateContractRequestsRs NAME 'Body';
				DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC.SearchTerminateContractRequestsRs.Body;
				-- DECLARE Datee TIMESTAMP '2020-01-01 00:00:00';
				-- SET OutRef.TestDate =CAST((CURRENT_TIMESTAMP - Datee) YEAR AS INTEGER);
				DECLARE x INT 1;
				DECLARE CountError INT CARDINALITY(Environment.Variables.DB.ResultSet[]);
				WHILE x <= CountError DO
					SET OutRef.TCRequests.TCRequest[x].EstablishmentDetails.LaborOfficeId=Environment.Variables.DB.ResultSet[x].LaborOfficeId;
					SET OutRef.TCRequests.TCRequest[x].EstablishmentDetails.SequenceNumber=Environment.Variables.DB.ResultSet[x].SequenceNumber;
					SET OutRef.TCRequests.TCRequest[x].EstablishmentDetails.EstablishmentName=Environment.Variables.DB.ResultSet[x].EstablishmentName;
					SET OutRef.TCRequests.TCRequest[x].RequesterDetails.RequesterIdNo=Environment.Variables.DB.ResultSet[x].RequesterIdNo;
					SET OutRef.TCRequests.TCRequest[x].RequesterDetails.RequesterType.Code=Environment.Variables.DB.ResultSet[x].RequesterTypeId;
					SET OutRef.TCRequests.TCRequest[x].RequesterDetails.RequesterType.NameAr=Environment.Variables.DB.ResultSet[x].RequesterTypeAr;
					SET OutRef.TCRequests.TCRequest[x].RequesterDetails.RequesterType.NameEn=Environment.Variables.DB.ResultSet[x].RequesterTypeEn;
					SET OutRef.TCRequests.TCRequest[x].RequesterDetails.OperatorIdNo=Environment.Variables.DB.ResultSet[x].OperatorIdNo;
					SET OutRef.TCRequests.TCRequest[x].LaborerDetails.LaborerIdNo=Environment.Variables.DB.ResultSet[x].LaborerIdNo;
					SET OutRef.TCRequests.TCRequest[x].LaborerDetails.LaborerName=Environment.Variables.DB.ResultSet[x].LaborerName;
					SET OutRef.TCRequests.TCRequest[x].LaborerDetails.LaborerJob.Code=Environment.Variables.DB.ResultSet[x].JobCode;
					SET OutRef.TCRequests.TCRequest[x].LaborerDetails.LaborerJob.NameAr=Environment.Variables.DB.ResultSet[x].JobAr;
					SET OutRef.TCRequests.TCRequest[x].LaborerDetails.LaborerJob.NameEn=Environment.Variables.DB.ResultSet[x].JobEn;
					SET OutRef.TCRequests.TCRequest[x].TCRequestId=Environment.Variables.DB.ResultSet[x].TCRequestId;
					SET OutRef.TCRequests.TCRequest[x].TCRequestStatus.StatusId=Environment.Variables.DB.ResultSet[x].TCRequestStatusId;
					SET OutRef.TCRequests.TCRequest[x].TCRequestStatus.StatusEn=Environment.Variables.DB.ResultSet[x].TCRequestStatusEn;
					SET OutRef.TCRequests.TCRequest[x].TCRequestStatus.StatusAr=Environment.Variables.DB.ResultSet[x].TCRequestStatusAr;
					SET OutRef.TCRequests.TCRequest[x].CancelationRequestId=Environment.Variables.DB.ResultSet[x].CancelationRequestId;
					SET OutRef.TCRequests.TCRequest[x].CancelationRequestStatus.StatusId=Environment.Variables.DB.ResultSet[x].CancelationRequestStatusId;
					SET OutRef.TCRequests.TCRequest[x].CancelationRequestStatus.StatusEn=Environment.Variables.DB.ResultSet[x].CancelationRequestStatusEn;
					SET OutRef.TCRequests.TCRequest[x].CancelationRequestStatus.StatusAr=Environment.Variables.DB.ResultSet[x].CancelationRequestStatusAr;
					SET OutRef.TCRequests.TCRequest[x].RDUpdateRequestId=Environment.Variables.DB.ResultSet[x].RDUpdateRequestId;
					SET OutRef.TCRequests.TCRequest[x].UpdateRDRequestStatus.StatusId=Environment.Variables.DB.ResultSet[x].UpdateRDRequestStatusId;
					SET OutRef.TCRequests.TCRequest[x].UpdateRDRequestStatus.StatusEn=Environment.Variables.DB.ResultSet[x].UpdateRDRequestStatusEn;
					SET OutRef.TCRequests.TCRequest[x].UpdateRDRequestStatus.StatusAr=Environment.Variables.DB.ResultSet[x].UpdateRDRequestStatusAr;
					SET OutRef.TCRequests.TCRequest[x].RemainingDays=Environment.Variables.DB.ResultSet[x].RemainingDays;
					SET OutRef.TCRequests.TCRequest[x].TCReason.Code=Environment.Variables.DB.ResultSet[x].TCReasonId;
					SET OutRef.TCRequests.TCRequest[x].TCReason.NameAr=Environment.Variables.DB.ResultSet[x].TCReasonAr;
					SET OutRef.TCRequests.TCRequest[x].TCReason.NameEn=Environment.Variables.DB.ResultSet[x].TCReasonEn;
					SET OutRef.TCRequests.TCRequest[x].ReleaseDate=Environment.Variables.DB.ResultSet[x].ReleaseDate;
					SET OutRef.TCRequests.TCRequest[x].ReleaseDateType.Code=Environment.Variables.DB.ResultSet[x].ReleaseDateTypeId;
					SET OutRef.TCRequests.TCRequest[x].ReleaseDateType.NameAr=Environment.Variables.DB.ResultSet[x].ReleaseDateTypeAr;
					SET OutRef.TCRequests.TCRequest[x].ReleaseDateType.NameEn=Environment.Variables.DB.ResultSet[x].ReleaseDateTypeEn;
					SET OutRef.TCRequests.TCRequest[x].ReleaseDateReqByLaborer=Environment.Variables.DB.ResultSet[x].ReleaseDateReqByLaborer;
					SET OutRef.TCRequests.TCRequest[x].RDRequestTypeId.Code=Environment.Variables.DB.ResultSet[x].RDRequestTypeIdId;
					SET OutRef.TCRequests.TCRequest[x].RDRequestTypeId.NameAr=Environment.Variables.DB.ResultSet[x].RDRequestTypeIdAr;
					SET OutRef.TCRequests.TCRequest[x].RDRequestTypeId.NameEn=Environment.Variables.DB.ResultSet[x].RDRequestTypeIdEn;
					SET OutRef.TCRequests.TCRequest[x].RDUpdateDate=Environment.Variables.DB.ResultSet[x].RDUpdateDate;
					SET OutRef.TCRequests.TCRequest[x].RDCurrentEmployerIdNo=rInHeaderRef.UserId.IDNumber;
					SET OutRef.TCRequests.TCRequest[x].ContractDetails.ContractId=Environment.Variables.DB.ResultSet[x].ContractId;
					SET OutRef.TCRequests.TCRequest[x].ContractDetails.ContractStartDate=Environment.Variables.DB.ResultSet[x].ContractStartDate;
					SET OutRef.TCRequests.TCRequest[x].ContractDetails.ContractExpiryDate= Environment.Variables.DB.ResultSet[x].ContractExpiryDate;
					SET OutRef.TCRequests.TCRequest[x].ContractDetails.GOSITerminated= Environment.Variables.DB.ResultSet[x].GOSITerminated;
					SET OutRef.TCRequests.TCRequest[x].CreationDate= Environment.Variables.DB.ResultSet[x].CreationDate;
					SET x=x+1;
				END WHILE;
				SET OutRef.TotalRecordsCount = Environment.Variables.DB.ResultSet[1].TotalRecordsCount;
			ELSE
				-- if there is no data give a no data error in the response
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.NoDataFound,rInHeaderRef,rOutHeaderRef);
			END IF;
		ELSE
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.MissingParameters,rInHeaderRef,rOutHeaderRef);
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INT 1;
		DECLARE J INT;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

	CREATE PROCEDURE TerminateContract_Search (
	IN p_LaborOfficeId INT,
	IN p_SequenceNumber INT,
	IN p_TCRequestId INT,
	IN p_RequesterIdNo CHAR,
	IN p_LaborerIdNo CHAR,
	IN p_LaborerName CHAR,
	IN p_RequesterTypeId INT,
	IN p_StatusIds CHAR,
	IN p_RDUpdateRequestId INT,
	IN p_CancelationRequestId INT,
	IN p_TCReasonId INT,
	IN p_CreationDate TIMESTAMP,
	IN p_ReleaseDate TIMESTAMP,
	IN p_RemainingDays INT,
	IN p_OperatorIdNo CHAR,
	IN p_PageSize INT,
	IN p_PageIndex INT)
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.TerminateContract_Search";
END MODULE;