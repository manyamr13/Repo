BROKER SCHEMA com.esb.token


CREATE COMPUTE MODULE Get_GOSIToken_SaveToken
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF  EXISTS (InputRoot.BLOB.BLOB[]) THEN 
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(InputRoot.BLOB.BLOB);

		SET Environment.Variables.Data = OutputRoot.JSON.Data;
		--|SET OutputRoot.JSON.Data.TokenFaluire = 0; 
	
		DELETE FIELD InputRoot.BLOB.BLOB;  
		END IF ; 
			DECLARE Result INT; 
		IF EXISTS( Environment.Variables.Data.token []) or Environment.Variables.GotToken = 1 THEN -- FROM API 
			--DECLARE expInterval  CHARACTER '25';  
			DECLARE T1 TIMESTAMP CURRENT_TIMESTAMP  ; --Input
			DECLARE myInterval CHARACTER '14';
			
	--	DECLARE ExpiryDate TIMESTAMP CURRENT_TIMESTAMP + CAST( expInterval AS INTERVAL MINUTE ) ;  
			DECLARE DIFF TIMESTAMP T1 + CAST( myInterval as INTERVAL MINUTE) ; --Calculate the expiryDateTime
			
			SET Environment.Variables.Token.ExpiryDate = DIFF ;
			SET Environment.Variables.Token.Token = Environment.Variables.Data.token;
			SET XExpiryDate = Environment.Variables.Token.ExpiryDate;
			SET XToken = Environment.Variables.Token.Token;

			
			SET Environment.Variables.TokenFaluire = 0 ; 
			SET OutputRoot.JSON.Data.ExpiryDate =Environment.Variables.Token.ExpiryDate ; 
			
			SET OutputRoot.JSON.Data.TokenFaluire = 0; 
		--	SET OutputRoot.JSON.Data.token =  Environment.Variables.Token.Token; 
		ELSE 
			SET Environment.Variables.TokenFaluire =1 ; 
			SET OutputRoot.JSON.Data.TokenFaluire = 1; 
			
		END IF; 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
