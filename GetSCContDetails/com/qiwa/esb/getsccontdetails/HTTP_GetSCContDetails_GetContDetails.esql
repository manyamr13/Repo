 
BROKER SCHEMA com.qiwa.esb.getsccontdetails
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE HTTP_GetSCContDetails_GetContDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF EXISTS(Environment.Properties.GetSCContDetails.HTTP_INT_GetSCContDetails[]) THEN
			SET Environment.Properties.GetSCContDetails.HTTP_GetSCContDetails = Environment.Properties.GetSCContDetails.HTTP_INT_GetSCContDetails;
			DELETE FIELD Environment.Properties.GetSCContDetails.HTTP_INT_GetSCContDetails;
		END IF;
		
		-- setting the the input header & input body to environment
		DECLARE rInputHeader REFERENCE TO InputRoot.XMLNSC.GetSCContractDetailsRq.Header;
		DECLARE rInputBody REFERENCE TO InputRoot.XMLNSC.GetSCContractDetailsRq.Body;
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.GetSCContDetails.HTTP_GetSCContDetails.Variables;
		SET Environment.Variables.Header = rInputHeader;
		SET Environment.Variables.Body = rInputBody;

		DECLARE EV REFERENCE TO Environment.Variables;
		SET EV.Properties = InputRoot.Properties;
		SET EV.MQMD = InputRoot.MQMD;
		SET EV.MQRFH2 = InputRoot.MQRFH2;
		-- checking the IDNumber
		IF NOT EXISTS(rInputHeader.UserInfo.IDNumber[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.NoIdNumber;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		-- calling the SP from DB and pass the ContractId to it
		CALL Get_ContractDetails(CAST(rInputBody.ContractId AS INT),
		Environment.Variables.DB.ResultSet[]);
		-- checking if the data don't exist
		IF NOT EXISTS(Environment.Variables.DB.ResultSet[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Nodata;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		-- check if the IDNumber from header is equal LaborerIdNo from DB & checking the ChannelId
		IF (CAST(rInputHeader.UserInfo.IDNumber AS INT) = CAST(Environment.Variables.DB.ResultSet[1].LaborerIdNo AS INT) OR rInputHeader.ChannelId = loadedPropertiesRef.ChannelId) THEN
			RETURN TRUE;
		ELSE
			SET OutputRoot.Properties = EV.Properties;
			SET OutputRoot.MQMD = EV.MQMD;
			SET OutputRoot.MQRFH2 = EV.MQRFH2;
			-- prepare the request to CheckUserEligibility
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
			CREATE FIRSTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Header';
			DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Header;
			CREATE LASTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Body';
			DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Body;

			SET rOutHeaderRef=rInputHeader;

			SET rOutHeaderRef.ServiceCode = loadedPropertiesRef.CheckUserCode;
			SET rOutHeaderRef.ChannelId = loadedPropertiesRef.ChannelId;

			IF rInputHeader.UserInfo.UserId IS NOT NULL THEN
				SET rOutBodyRef.UserId = rInputHeader.UserInfo.UserId;
			END IF;
			SET rOutBodyRef.IdNo = rInputHeader.UserInfo.IDNumber;
			SET rOutBodyRef.LaborOfficeId = Environment.Variables.DB.ResultSet[1].LaborOfficeId;
			SET rOutBodyRef.EstablishmentSequence = Environment.Variables.DB.ResultSet[1].SequenceNumber;
			SET rOutBodyRef.ServiceId = loadedPropertiesRef.ServiceId;

			SET Environment.InternalServiceCaller.callCorrIDOffset = '10';

			PROPAGATE TO TERMINAL 'out2';
			RETURN TRUE;
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

	CREATE PROCEDURE Get_ContractDetails (IN RequestId INTEGER)
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Get_ContractDetails";
END MODULE;