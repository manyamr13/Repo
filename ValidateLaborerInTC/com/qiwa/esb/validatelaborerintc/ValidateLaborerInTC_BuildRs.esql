BROKER SCHEMA com.qiwa.esb.validatelaborerintc
PATH Qiwa.Framework.Lib;


CREATE COMPUTE MODULE ValidateLaborerInTC_BuildRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF FIELDNAME(Environment.Variables) IS NULL THEN
			CREATE FIELD Environment.Variables;
		END IF;
		DECLARE EV REFERENCE TO Environment.Variables;
		DECLARE inBodyRef REFERENCE TO InputRoot.XMLNSC.ValidateLaborerInTCRs.Body.*:*[<].*:*[<].*[<];
		DECLARE inHeaderRef REFERENCE TO InputRoot.XMLNSC.ValidateLaborerInTCRs.Header;
		DECLARE EnglishDescription,ArabicDescription,STATUS,ESB_CODE CHAR;

		SET OutputRoot.Properties = EV.Properties;
		SET OutputRoot.MQMD = EV.MQMD ;
		SET OutputRoot.MQRFH2 = EV.MQRFH2 ;

		DECLARE propertiesRef REFERENCE TO Environment.Properties.ValidateLaborerInTC.ValidateLaborerInTC.Variables;

		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ValidateLaborerInTCRs NAME 'Header';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ValidateLaborerInTCRs NAME 'Body';

		DECLARE reqHeaderRef REFERENCE TO EV.XMLNSC.ValidateLaborerInTCRq.Header;
		DECLARE rBodyRef REFERENCE TO EV.XMLNSC.ValidateLaborerInTCRq.Body;
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ValidateLaborerInTCRs.Header;
		DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.ValidateLaborerInTCRs.Body;

		IF (inHeaderRef.ResponseStatus.Code <> GetESBSuccessCode()) AND EXISTS(inBodyRef.statusCodesList.StatusCode[]) THEN
			DECLARE I INTEGER 1;
			DECLARE J INTEGER CARDINALITY(inBodyRef.statusCodesList.StatusCode[]);
			WHILE I <=J DO
				CALL getBackendEsb_MapErrorCode('ODMWS',inBodyRef.statusCodesList.StatusCode[I],inHeaderRef.ChannelId,EnglishDescription,ArabicDescription,STATUS,ESB_CODE);
				SET rOutBodyRef.ErrorsList.Error[I].ErrorCode = ESB_CODE;
				SET rOutBodyRef.ErrorsList.Error[I].DescriptionAr = ArabicDescription;
				SET rOutBodyRef.ErrorsList.Error[I].DescriptionEn = EnglishDescription;
				SET I = I +1;
			END WHILE;
			CALL Create_esbXML_Response_Header( propertiesRef.ValidationError,reqHeaderRef, rOutHeaderRef);
		ELSEIF NOT EXISTS(inBodyRef.statusCodesList.StatusCode[])THEN
			SET rOutHeaderRef = inHeaderRef;
		ELSE		
			-- build response
			SET rOutBodyRef.ContractId = EV.DB.CheckLab.ContractId;
			SET rOutBodyRef.ContractExpiryDate = EV.DB.CheckLab.ContractExpiryDate;
			SET rOutBodyRef.EstablishmentName = EV.DB.CheckLab.EstablishmentName;
			SET rOutBodyRef.LaborerName = EV.DB.CheckLab.LaborerName;
			SET rOutBodyRef.JobCode = EV.DB.CheckLab.JobCode;
			SET rOutBodyRef.NoticePeriod = EV.DB.CheckLab.NoticePeriod;
			SET rOutBodyRef.ProbationPeriod = EV.DB.CheckLab.ProbationPeriod;
			SET rOutBodyRef.ProbationTerminationRight = EV.DB.CheckLab.ProbationTerminationRightCode; 
			SET rOutBodyRef.ContractStartDate = EV.DB.CheckLab.ContractStartDate;

			IF EV.DB.CheckLab.HasActiveContracts = propertiesRef.Zero THEN
				SET rOutBodyRef.HasQiwaActiveContract = 'False';
			ELSE
				SET rOutBodyRef.HasQiwaActiveContract = 'True';
			END IF;

			IF EV.DB.CheckLab.HasNoContract = propertiesRef.Zero THEN
				SET rOutBodyRef.HasNoContract = 'False';
			ELSE
				SET rOutBodyRef.HasNoContract = 'True';
			END IF;
			CALL Create_esbXML_Response_Header(GetESBSuccessCode(),reqHeaderRef, rOutHeaderRef);
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;