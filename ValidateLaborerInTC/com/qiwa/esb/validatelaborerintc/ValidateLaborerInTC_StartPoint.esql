BROKER SCHEMA com.qiwa.esb.validatelaborerintc
PATH Qiwa.Framework.Lib;
DECLARE ter NAMESPACE 'http://www.ibm.com/rules/decisionservice/TermContLabEligRequest_DC/TermContLabEligRequest';
DECLARE par NAMESPACE 'http://www.ibm.com/rules/decisionservice/TermContLabEligRequest_DC/TermContLabEligRequest/param';

CREATE COMPUTE MODULE ValidateLaborerInTC_StartPoint
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF FIELDNAME(Environment.Variables) IS NULL THEN
			CREATE FIELD Environment.Variables;
		END IF;
		DECLARE EV REFERENCE TO Environment.Variables;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.ValidateLaborerInTCRq.Body;
		DECLARE rHeaderRef REFERENCE TO InputRoot.XMLNSC.ValidateLaborerInTCRq.Header;
		SET EV.Properties = InputRoot.Properties;
		SET EV.MQMD = InputRoot.MQMD;
		SET EV.MQRFH2 = InputRoot.MQRFH2;
		SET EV.XMLNSC = InputRoot.XMLNSC;

		DECLARE XMLVAR REFERENCE TO Environment.Properties.ValidateLaborerInTC.ValidateLaborerInTC.Variables;
		--If LaborerIdNo starts with 1 then LaborerTypeId must be 1 and if LaborerIdNo starts with 2 then LaborerTypeId must be 2,
		IF (rInBodyRef.LaborerTypeId = XMLVAR.LabTypeIdOne AND NOT STARTSWITH(rInBodyRef.LaborerIdNo,XMLVAR.LabTypeIdOne)) OR (rInBodyRef.LaborerTypeId = XMLVAR.LabTypeIdTwo AND NOT STARTSWITH(rInBodyRef.LaborerIdNo,XMLVAR.LabTypeIdTwo)) THEN
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQMD = InputRoot.MQMD;
			SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ValidateLaborerInTCRs NAME 'Header';
			DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ValidateLaborerInTCRs.Header;
			CALL Create_esbXML_Response_Header (XMLVAR.InvalidData,rHeaderRef,rOutHeaderRef); --E0001496
			RETURN TRUE;
		END IF;

		DECLARE COUNT, Term_Result, Check_Result, ResultSet INT;
		--call sp to check if the laborer already has a TC pending request
		SET Term_Result = TerminateContract(COALESCE(CAST(rInBodyRef.LaborOfficeId AS INT),NULL),
												COALESCE(CAST(rInBodyRef.SequenceNumber AS INT),NULL),
												COALESCE(CAST(rInBodyRef.LaborerIdNo AS CHAR),NULL),
												EV.DB.TermCon[]);
		--call sp to check if the laborer has an active contract
		Set Check_Result = Check_LaborerActiveContract(COALESCE(CAST(rInBodyRef.LaborOfficeId AS INT),NULL) ,
														COALESCE(CAST(rInBodyRef.SequenceNumber AS INT) ,NULL),
														COALESCE(CAST(rInBodyRef.LaborerIdNo AS CHAR),NULL),
														EV.DB.CheckLab[]);
		--If LaborerTypeId = 2 then
		IF rInBodyRef.LaborerTypeId = XMLVAR.LabTypeIdTwo THEN
			--call sp to check if the laborer has ET request with Status (7 or 4 or 13)
			CALL Check_PendingChangeSponsorRequests (COALESCE(CAST(rInBodyRef.LaborerIdNo AS CHAR),NULL),
														XMLVAR.statuses,
														EV.DB.CheckPen[]) INTO ResultSet;
			--If RequesterTypeId = 2 and RelatedToId from “Check_LaborerActiveContract“ <> 5,7,8,9 then
			IF (rInBodyRef.RequesterTypeId = XMLVAR.LabTypeIdTwo AND EV.DB.CheckLab.RelatedToId NOT IN(XMLVAR.RelatedToIdFive,XMLVAR.RelatedToIdSeven,XMLVAR.RelatedToIdEight,XMLVAR.RelatedToIdNine)) OR (rInBodyRef.RequesterTypeId = XMLVAR.LabTypeIdTwo AND EV.DB.CheckLab.RelatedToId IS NULL)THEN
				SET OutputRoot.XMLNSC.data.LaborerIdNo = rInBodyRef.LaborerIdNo;
				SET OutputLocalEnvironment.Destination.HTTP.RequestURL =XMLVAR.DPURL ;
				PROPAGATE TO TERMINAL 'out1' DELETE NONE;
			END IF;
		END IF;
		--IF rInBodyRef.LaborerTypeId in(1,2) or SaudiNonSaudi success then call odm
		IF EV.isSuccess = 'TRUE' OR rInBodyRef.LaborerTypeId IN(XMLVAR.LabTypeIdOne,XMLVAR.LabTypeIdTwo) THEN
			DECLARE HasPendingTCRequest,HasActiveContract,HasNoContract,HasPendingCSRequest CHARACTER;
			SET OutputRoot = NULL;
			SET OutputRoot.Properties = EV.Properties;
			SET OutputRoot.MQMD = EV.MQMD ;
			SET OutputRoot.MQRFH2 = EV.MQRFH2 ;
			SET OutputRoot.MQRFH2.usr.soap.url=XMLVAR.ODMURL;

			IF EV.DB.TermCon.HasPendingTCRequest = XMLVAR.Zero THEN
				SET HasPendingTCRequest = 'False';
			ELSE
				SET HasPendingTCRequest= 'True';
			END IF;

			IF EV.DB.CheckLab.HasActiveContracts = XMLVAR.Zero THEN
				SET HasActiveContract = 'False';
			ELSE
				SET HasActiveContract = 'True';
			END IF;

			IF EV.DB.CheckLab.HasNoContract = XMLVAR.Zero THEN
				SET HasNoContract = 'True';
			ELSE
				SET HasNoContract = 'False';
			END IF;

			IF rInBodyRef.LaborerTypeId = XMLVAR.LabTypeIdTwo And EV.DB.CheckPen.HasPendingCSRequest =XMLVAR.One THEN
				SET HasPendingCSRequest = 'True';
			ELSEIF rInBodyRef.LaborerTypeId = XMLVAR.LabTypeIdTwo And EV.DB.CheckPen.HasPendingCSRequest =XMLVAR.Zero THEN
				SET HasPendingCSRequest = 'False';
			ELSE
				SET HasPendingCSRequest = 'NULL';
			END IF;
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ValidateLaborerInTCRq NAME 'Header';
			CREATE LASTCHILD OF OutputRoot.XMLNSC.ValidateLaborerInTCRq NAME 'Body';
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Header = rHeaderRef;
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.ter:DecisionID = rHeaderRef.TransactionId;
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.RequesterTypeId= rInBodyRef.RequesterTypeId;
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.LaborerTypeId = rInBodyRef.LaborerTypeId;
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.HasPendingTCRequest = HasPendingTCRequest;
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.HasActiveContract= HasActiveContract;
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.HasContractOnSystem = HasNoContract;
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.LaborerStatusCode = COALESCE(EV.NonSaudiRs.LaborerStatusId,NULL);
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.EntryDate =COALESCE(EV.NonSaudiRs.entry_date,NULL);
			SET OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.HasPendingCSRequest = HasPendingCSRequest;
			PROPAGATE TO TERMINAL 'out2';
		END IF;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE TerminateContract (IN LaborOfficeId INT,
	IN SequenceNumber INT,
	IN LaborerIdNo CHAR)
	RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1
	EXTERNAL NAME "dbo.TerminateContract_PendReq_Check";


	CREATE PROCEDURE Check_LaborerActiveContract (IN LaborOfficeId INT,
	IN SequenceNumber INT,
	IN LaborerIdNumber CHAR
	)
	RETURNS INTEGER
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1
	EXTERNAL NAME "dbo.Check_LaborerActiveContract";

	CREATE PROCEDURE Check_PendingChangeSponsorRequests (IN LaborerIdNumber CHAR,
	IN ListOfStatuses CHAR
	)
	RETURNS INTEGER
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Check_PendingChangeSponsorRequests";
END MODULE;
