BROKER SCHEMA com.qiwa.esb.SubmitTCReqByLaborer
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE ValidateLaborerInTCRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--DECLARE THE HEADER AND THE BODY OF THE REQUEST
		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.SubmitTCReqByLaborerRq.Header;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.SubmitTCReqByLaborerRq.Body;
		--SET THE HEADER AND BODY GLOBAL i.e ALL NODES CAN SEE IT
		SET Environment.Variables.Header = rInHeaderRef;
		SET Environment.Variables.Body = rInBodyRef;	

		SET Environment.Variables.Properties = InputRoot.Properties;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;        

		IF EXISTS(Environment.Properties.SubmitTCReqByLaborer.HTTP_INT_SubmitTCReqByLaborer[]) THEN
			SET Environment.Properties.SubmitTCReqByLaborer.HTTP_SubmitTCReqByLaborer =
			Environment.Properties.SubmitTCReqByLaborer.HTTP_INT_SubmitTCReqByLaborer;
			DELETE FIELD Environment.Properties.SubmitTCReqByLaborer.HTTP_INT_SubmitTCReqByLaborer;
		END IF;		
			
		--DECLEARING REFRENCE TO THE SubmitTCReqByLaborerFlow XML FLOW
		DECLARE propertiesRef REFERENCE TO Environment.Properties.SubmitTCReqByLaborer.HTTP_SubmitTCReqByLaborer.Variables;	   
		--DECLARE ALL THE REQUEST PARAMETERS

		DECLARE LaborOfficeId, SequenceNumber, TCReason, LaborerTypeId  INT ;
		--DECLARE THE IDNumber FROM THE REQUEST HEADER
		DECLARE LaborerIdNo CHAR rInHeaderRef.UserInfo.IDNumber;
		SET LaborOfficeId= rInBodyRef.LaborOfficeId;
		SET SequenceNumber =rInBodyRef.SequenceNumber;
		SET TCReason= rInBodyRef.TCReason;
			
			  	 
		--CHECK IF THE IDNumber IN HEADER IS EXIST OR NOT
		--IF NOT RETURN ERROR AND EXIST THE FLOW
		IF NOT EXISTS(rInHeaderRef.UserInfo.IDNumber[]) OR LaborerIdNo is NULL  OR LaborerIdNo = '' THEN
			SET Environment.Variables.MWResponse.status = propertiesRef.MissingIdNumber;
			PROPAGATE TO LABEL 'LabelError';
			RETURN FALSE;
		END IF;
		
		--IF THE IDNumber STARTS WITH 1 SET THE LaborerTypeId EQUAL 1 ELSE SET LaborerTypeId EQUAL 2
		IF STARTSWITH(LaborerIdNo, '1') THEN
			SET Environment.Variables.LaborerTypeId = 1;
		ELSEIF STARTSWITH(LaborerIdNo, '2') THEN
			SET Environment.Variables.LaborerTypeId = 2;
		END IF;		
		   
		
		
		 --CRAETE THE  ValidateLaborerInTC HEADER AND BODY 
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ValidateLaborerInTCRq NAME 'Header'; 
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ValidateLaborerInTCRq.Header;  
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ValidateLaborerInTCRq NAME 'Body'; 
		DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.ValidateLaborerInTCRq.Body;   
	 		
	 	-- COPY HEADERS
	 	 SET rOutHeaderRef=rInHeaderRef;    
	 	  	 
		--PASSING PARAMETERS TO CALL INTERNAL SERVICE
		SET rOutHeaderRef.ChannelId = propertiesRef.ChannelId;
		SET rOutHeaderRef.ServiceCode = propertiesRef.ServiceCode; 
		
		SET rOutBodyRef.LaborOfficeId=rInBodyRef.LaborOfficeId;
		SET rOutBodyRef.SequenceNumber = rInBodyRef.SequenceNumber;
		SET rOutBodyRef.LaborerIdNo=rInHeaderRef.UserInfo.IDNumber;
	    SET rOutBodyRef.LaborerTypeId = Environment.Variables.LaborerTypeId;  
	    SET rOutBodyRef.RequesterTypeId = 2; 
		
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = propertiesRef.HTTPurl;
		-- Call ValidateLaborerInTC service
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
