



BROKER SCHEMA com.qiwa.esb.SubmitTCReqByLaborer
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE HTTP_SubmitTCReqByLaborer_Create_Add
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--COPYING HEADERS
		CALL CopyMessageHeaders();
		--DECLARE THE HEADER AND THE BODY OF THE REQUEST
		DECLARE rInHeader REFERENCE TO Environment.Variables.Header;
		DECLARE rInBody REFERENCE TO Environment.Variables.Body;

		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;
		--DECLEARING REFRENCE TO THE SubmitTCReqByLaborerFlow XML FLOW
		DECLARE propertiesRef REFERENCE TO Environment.Properties.SubmitTCReqByLaborer.HTTP_SubmitTCReqByLaborer.Variables;
		--CREATE THE ApproveRejectTCCancelationByEmployerRs HEADER AND BODY
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByLaborerRs NAME 'Header';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByLaborerRs NAME 'Body';
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByLaborerRs.Header;
		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByLaborerRs.Body;
		--SETTING HEADERS
		--SET rOutHeaderRef =rInHeader;
		--DECLARING PARAMETERS FROM Validate Laborer In TC IN CASE AN ERROR CODE IS RETURN
		DECLARE ValidateResponse REFERENCE TO Environment.Variables.Response;
		--DECLARE ERRORLIST REFERENCE TO ValidateResponse.Body.ErrorsList
		DECLARE ERRORLIST REFERENCE TO ValidateResponse.Body.ErrorsList;
		--DECLARE THE PARAMETERS FROM THE Validate Laborer In TC
		DECLARE EstablishmentName CHAR ValidateResponse.Body.EstablishmentName;
		--DECLARE ContractExpiryDate TIMESTAMP ValidateResponse.Body.ContractExpiryDate;
		DECLARE ContractId INT ValidateResponse.Body.ContractId;
		DECLARE LaborerName CHAR ValidateResponse.Body.LaborerName;

		DECLARE JobCodee CHAR ValidateResponse.Body.JobCode;
		DECLARE JobCode INT;
		SET JobCode =JobCodee;

		DECLARE NoticePeriod INT ValidateResponse.Body.NoticePeriod;
		DECLARE ProbationPeriod INT ValidateResponse.Body.ProbationPeriod;
		--DECLARE ContractStartDate TIMESTAMP ValidateResponse.Body.ContractStartDate;


		DECLARE ContractStartDate TIMESTAMP;
		IF CONTAINS(ValidateResponse.Body.ContractStartDate,'T') THEN
			SET ContractStartDate = CAST(REPLACE(ValidateResponse.Body.ContractStartDate,'T',' ') as TIMESTAMP);

		ELSE
			SET ContractStartDate = ValidateResponse.Body.ContractStartDate;
		END IF;
		-- SET ContractStartDate = CAST(CAST(REPLACE(ValidateResponse.Body.ContractStartDate,'T',' ') as TIMESTAMP) as CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss');

		DECLARE ContractExpiryDate TIMESTAMP;
		--begin, testing
		-- SET ValidateResponse.Body.ContractExpiryDate = '2020-03-13 00:00:00';
		-- SET NoticePeriod = 30;
		-- end

		IF EXISTS(ValidateResponse.Body.ContractExpiryDate[]) OR (ValidateResponse.Body.ContractExpiryDate IS NOT NULL)
			OR (ValidateResponse.Body.ContractExpiryDate <> '') THEN
			IF CONTAINS(ValidateResponse.Body.ContractExpiryDate,'T') THEN
				SET ContractExpiryDate = CAST(REPLACE(ValidateResponse.Body.ContractExpiryDate,'T',' ') as TIMESTAMP);

			ELSE
				SET ContractExpiryDate = ValidateResponse.Body.ContractExpiryDate;
			END IF;
			-- SET ContractExpiryDate = CAST(CAST(REPLACE(ValidateResponse.Body.ContractExpiryDate,'T',' ') as TIMESTAMP) as CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss');

		END IF;		
		
		
		--DECLARING AND SETTING HasQiwaActiveContract AND HasNoContract FROM THE Validate Laborer In TC
		DECLARE HasQiwaActCon BOOLEAN ValidateResponse.Body.HasQiwaActiveContract;
		DECLARE HasNoCon BOOLEAN ValidateResponse.Body.HasNoContract ;

		DECLARE HasQiwaActiveContract INT;
		DECLARE HasNoContract INT;
		DECLARE HasContractOnSystem INT;

		IF HasQiwaActCon ='True' THEN
			SET HasQiwaActiveContract =1;
		ELSE
			SET HasQiwaActiveContract =0;
		END IF;

		IF HasNoCon ='True' THEN
			SET HasNoContract =1;
		ELSE
			SET HasNoContract =0;
		END IF;


		SET HasContractOnSystem =HasNoContract;		
		  
		--DECLARE COUNTER FOR THE ERROR LIST TO CHECK IF THERE IS ERROR LIST OR NOT
		DECLARE ErrorCount INT ;
		SET ErrorCount= CARDINALITY (ERRORLIST.Error[]);
		DECLARE i INT 1;
		--IF ERRORS FROM Validate Laborer In TC IS NOT NULL RETURN THE ERROR LIST AND EXIT THE FLOW
		--begin, testing
		IF ErrorCount <> 0 THEN

			While i <= ErrorCount Do

				SET OutBodyRef.ErrorList.ErrorItem[i].ErrorCode = ERRORLIST.Error[i].ErrorCode;
				SET OutBodyRef.ErrorList.ErrorItem[i].DescriptionAr =ERRORLIST.Error[i].DescriptionAr;
				SET OutBodyRef.ErrorList.ErrorItem[i].DescriptionEn =ERRORLIST.Error[i].DescriptionEn;

				SET i =i+1;

			END WHILE;
			CALL Create_esbXML_Response_Header (propertiesRef.ValidateError,rInHeader,rOutHeaderRef);
			propagate to terminal 'out1' ;
			RETURN FALSE;

		END IF;
		-- end	
		--DECLARE THE CURRENT DATE
		--DECLARE CurrentDate DATE CURRENT_DATE;
		DECLARE CurrentDate TIMESTAMP CURRENT_TIMESTAMP;
		--DECLARE THE PROCEDURES RETURNED VALUES
		DECLARE TOTAL1 INT;
		DECLARE TOTAL2 INT;
		DECLARE TOTAL3 INT;
		--DECLARING Create_TerminateContractRequest PARAMETERS
		DECLARE LaborOfficeId INT rInBody.LaborOfficeId;
		DECLARE SequenceNumber INT rInBody.SequenceNumber;
		DECLARE TCReason INT rInBody.TCReason;
		DECLARE TCReasonId INT;

		DECLARE DirectTerminationReasonId INT;
		DECLARE LaborerTypeId INT;
		SET LaborerTypeId = Environment.Variables.LaborerTypeId;
		DECLARE LaborerIdNo CHAR rInHeader.UserInfo.IDNumber;
		DECLARE RequesterIdNo CHAR rInHeader.UserInfo.IDNumber;
		DECLARE RequesterTypeId INT 2;
		DECLARE MWTransactionId INT rInHeader.TransactionId;
		-- DECLARE PARAMETER TO STORE THE SUMMATION OF ContractStartDate AND ProbationPeriod
		DECLARE SUMDATES TIMESTAMP ;
		SET SUMDATES = ContractStartDate + CAST(CAST(ProbationPeriod as CHAR) AS INTERVAL DAY);
		-- SET SUMDATES = ADD_DAYS(ContractStartDate,CAST(CAST(ProbationPeriod ,as CHAR));
		-- DECLARE PARAMETER TO STORE THE SUMMATION OF CurrentDate AND NoticePeriod
		DECLARE SUMDATES2 TIMESTAMP ;
		SET SUMDATES2 = CurrentDate + CAST(CAST(NoticePeriod as CHAR) AS INTERVAL DAY);
		-- IF ContractSourceId=1 FROM Validate Laborer In TC and the TCReason=3 FROM THE REQUEST THEN
		-- CHECK (ContractStartDate +ProbationPeriod ) > CurrentDate IF SO CALL Create_TerminateContractRequest
		-- testing
		-- SET LaborerTypeId = 2;
		-- Begin, Mohan Kristavarapu, 20-09-2021, ICD Version 1.3
		-- IF LaborerTypeId = 2 THEN
		IF TCReason = 2 THEN
			IF EXISTS(ValidateResponse.Body.ContractExpiryDate[]) AND ((ValidateResponse.Body.ContractExpiryDate IS NOT NULL) OR (ValidateResponse.Body.ContractExpiryDate <> '')) THEN
				IF ContractExpiryDate < SUMDATES2 THEN
					CALL Create_esbXML_Response_Header (propertiesRef.RenewCtrtExpError,rInHeader,rOutHeaderRef);
					propagate to terminal 'out1' ;
					RETURN FALSE;
				END IF;
			ELSE
				CALL Create_esbXML_Response_Header (propertiesRef.RenewCtrtExpNullError,rInHeader,rOutHeaderRef);
				propagate to terminal 'out1' ;
				RETURN FALSE;
			END IF;
		END IF;
		-- END IF;
		-- End


		IF TCReason=3 AND HasQiwaActiveContract=1 THEN

			IF SUMDATES > CurrentDate THEN
				--SET DirectTerminationReasonId AND CALL Create_TerminateContractRequest
				SET DirectTerminationReasonId =1;
				SET TCReasonId =TCReason;



				CALL Create_TerminateContractRequest ( LaborOfficeId,
				SequenceNumber,
				TCReasonId ,
				DirectTerminationReasonId,
				LaborerTypeId,
				EstablishmentName,
				JobCode,
				ContractId ,
				ContractExpiryDate,
				ContractStartDate,
				ProbationPeriod,
				NoticePeriod ,
				HasContractOnSystem,
				LaborerIdNo,
				LaborerName,
				RequesterIdNo,
				RequesterTypeId,
				NULL,
				MWTransactionId,
				Environment.Variables.DB.ResultSet1[])INTO TOTAL1 ;

				SET OutBodyRef.TCRequestId = Environment.Variables.DB.ResultSet1.TCRequestId;

				CALL Create_esbXML_Response_Header (GetESBSuccessCode(),rInHeader,rOutHeaderRef);

			ELSE
				-- return an error indicates that sorry , probation period Is completed
				-- you canâ€™t choose probation period as a reason
				CALL Create_esbXML_Response_Header (propertiesRef.probationperiod,rInHeader,rOutHeaderRef);

				RETURN TRUE;
			END IF;
			-- IF ContractSourceId DOEANT EQYUAL 1 SET DirectTerminationReasonId TO NULL AND CALL Create_TerminateContractRequest
		ELSE

			SET DirectTerminationReasonId = NULL;
			SET TCReasonId =TCReason;


			CALL Create_TerminateContractRequest ( LaborOfficeId,
			SequenceNumber,
			TCReasonId ,
			DirectTerminationReasonId,
			LaborerTypeId,
			EstablishmentName,
			JobCode,
			ContractId ,
			ContractExpiryDate,
			ContractStartDate,
			ProbationPeriod,
			NoticePeriod ,
			HasContractOnSystem,
			LaborerIdNo,
			LaborerName,
			RequesterIdNo,
			RequesterTypeId,
			NULL, 
			MWTransactionId,
			Environment.Variables.DB.ResultSet2[])INTO TOTAL2 ;
			--DECLARING RETURNED PARAMETER FROM Create_TerminateContractRequest PROCEDURE
			DECLARE TCRequestId CHAR;
			SET TCRequestId = Environment.Variables.DB.ResultSet2.TCRequestId;


			DECLARE RequestId CHAR ;
			SET RequestId = TCRequestId;
			DECLARE RequestTypeId INT 1;
			--SETTING THE REALSE DATE TO THE SMMALLEST VALUE OF SUMDATES2 AND ContractExpiryDate
			DECLARE ReleaseDate TIMESTAMP;
			DECLARE ReleaseDateTypeId INT;
			DECLARE Period INT 90;
			--SETTING THE RELAESEDATE EQUAL THE SMAALER VALUE BETWEEN ContractExpiryDate AND SUMDATES2
			-- IF SUMDATES2 < ContractExpiryDate THEN
			--
			-- SET ReleaseDate =SUMDATES2 ;
			-- SET ReleaseDateTypeId =4;
			-- ELSE
			-- SET ReleaseDate =ContractExpiryDate ;
			-- SET ReleaseDateTypeId =2;
			-- END IF;
			-- IF HasNoContract =1 THEN
			-- SET ReleaseDate = CurrentDate + CAST(CAST(Period as CHAR) AS INTERVAL DAY);
			-- SET ReleaseDateTypeId =5;
			-- END IF;
			--
			--SETTING RELEASEDATE EQUAL TO ContractExpiryDate IF TCReason is 2
			-- 14/04/2022
			IF CAST(rInBody.TCReason AS INTEGER) = 2 THEN
				SET ReleaseDate = ContractExpiryDate;
				SET ReleaseDateTypeId =2;

			ELSE
				SET ReleaseDate =SUMDATES2 ;
				SET ReleaseDateTypeId =4;
			END IF;
			--CALL Add_ReleaseDate
			CALL Add_ReleaseDate ( RequestId,
			RequestTypeId,
			ReleaseDate,
			ReleaseDateTypeId,
			MWTransactionId,
			Environment.Variables.DB.ResultSet[])INTO TOTAL3 ;



			SET OutBodyRef.TCRequestId = Environment.Variables.DB.ResultSet2.TCRequestId;
			CALL Create_esbXML_Response_Header (GetESBSuccessCode(),rInHeader,rOutHeaderRef);	  							 




		END IF;

		RETURN TRUE;
	END;




	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	-- Create_TerminateContractRequest PROCEDURE
	CREATE PROCEDURE Create_TerminateContractRequest ( IN LaborOfficeId INT,
	IN SequenceNumber INT,
	IN TCReasonId INT,
	IN DirectTerminationReasonId INT,
	IN LaborerTypeId INT,
	IN EstablishmentName CHAR,
	IN JobCode INT,
	IN ContractId INT,
	IN ContractExpiryDate TIMESTAMP,
	IN ContractStartDate TIMESTAMP,
	IN ProbationPeriod INT,
	IN NoticePeriod INT,
	IN HasContractOnSystem INT ,
	IN LaborerIdNo CHAR,
	IN LaborerName CHAR,
	IN RequesterIdNo CHAR,
	IN RequesterTypeId INT,
	IN TerminateContractFiles CHARACTER,
	
	IN MWTransactionId INT)
	RETURNS INTEGER

	LANGUAGE DATABASE DYNAMIC RESULT SETS 1
	EXTERNAL NAME "dbo.Create_TerminateContractRequest";
	-- Create_TerminateContractRequest PROCEDURE
	CREATE PROCEDURE Add_ReleaseDate ( IN RequestId CHAR,
	IN RequestTypeId INT,
	IN ReleaseDate TIMESTAMP,
	IN ReleaseDateTypeId INT,
	IN MWTransactionId INT)
	RETURNS INTEGER

	LANGUAGE DATABASE DYNAMIC RESULT SETS 1
	EXTERNAL NAME "dbo.Add_ReleaseDate";	




END MODULE;