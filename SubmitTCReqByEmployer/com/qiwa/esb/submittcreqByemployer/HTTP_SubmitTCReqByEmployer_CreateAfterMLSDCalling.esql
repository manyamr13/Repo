BROKER SCHEMA com.qiwa.esb.submittcreqByemployer
path Qiwa.Framework.Lib;

CREATE COMPUTE MODULE HTTP_SubmitTCReqByEmployer_CreateAfterMLSDCalling
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		
--		
--		CALL CopyMessageHeaders() ;
----		-- save headers
----		SET OutputRoot.Properties = Environment.Variables.Properties;
----		SET OutputRoot.MQMD = Environment.Variables.MQMD ;
----		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2 ;
--		
		DECLARE InbodyRef REFERENCE TO Environment.Variables.Request.Body;
		DECLARE InHeaderRef REFERENCE TO Environment.Variables.Request.Header;
		
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.SubmitTCReqByEmployer.HTTP_SubmitTCReqByEmployer.Variables;
		
		
		DECLARE GetForeignerAllDataRs REFERENCE TO Environment.Variables.GetForeignerAllDataResponse;
		
		--save Header to output
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByEmployerRs NAME 'Header';
		DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Header;
		CREATE LASTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByEmployerRs NAME 'Body';
		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body;
		
		SET OutHeaderRef=InHeaderRef;
		
		
		--DECLARE SubmitTCReqByEmployerRs REFERENCE TO Environment.Variables.SubmitTCReqByEmployerRs;
		
		DECLARE RESULTID INT;
		Declare DirectTerminationReason INT;

		
		IF GetForeignerAllDataRs.Body.Status.PersonStatus.Code= 1 then set DirectTerminationReason = 2;
		ELSEIF GetForeignerAllDataRs.Body.AlienPrisonStatus= True then set DirectTerminationReason = 3;
		ELSEIF GetForeignerAllDataRs.Body.Status.PersonStatus.Code=4 then set DirectTerminationReason = 4;
		ELSE set DirectTerminationReason = NULL;
		END IF;  

			
		
		DECLARE HasContractOnSystem INTEGER;
		IF Environment.Variables.DB.checkresultset.HasNoContract=0 THEN
			SET HasContractOnSystem=1;
			ELSE 
				SET HasContractOnSystem =0;
		END IF;


			SET RESULTID = Create_TerminateContractRequest (
			CAST(InbodyRef.LaborOfficeId AS INTEGER),
			CAST(InbodyRef.SequenceNumber AS INTEGER),
			CAST(InbodyRef.TCReason AS INTEGER),
			CAST(DirectTerminationReason AS INTEGER),
			CAST(Environment.Variables.LaborerTypeId AS INTEGER),
			COALESCE(CAST(Environment.Variables.GetLaborerInformationMLSDResponse.EstablishmentInfo.EstablishmentName AS CHARACTER ),NULL),
			COALESCE(CAST (Environment.Variables.GetLaborerInformationMLSDResponse.Job.JobCode AS INTEGER),NULL),
			COALESCE(CAST(Environment.Variables.DB.checkresultset.ContractId AS INTEGER) ,NULL),
			COALESCE(CAST(Environment.Variables.DB.checkresultset.ContractExpiryDate AS TIMESTAMP),NULL),
			COALESCE(CAST(Environment.Variables.DB.checkresultset.ContractStartDate AS TIMESTAMP),NULL),
			COALESCE(CAST(Environment.Variables.DB.checkresultset.ProbationPeriod AS INTEGER),NULL),
			COALESCE(CAST(Environment.Variables.DB.checkresultset.NoticePeriod AS INTEGER),NULL),
			COALESCE(CAST(HasContractOnSystem AS INTEGER),NULL),
			COALESCE(CAST(InbodyRef.LaborerIdNo AS CHARACTER),NULL),
			COALESCE(CAST ((Environment.Variables.GetLaborerInformationMLSDResponse.LaborerInformation.FirstName ||' '||Environment.Variables.GetLaborerInformationMLSDResponse.LaborerInformation.SecondName ||' '||Environment.Variables.GetLaborerInformationMLSDResponse.LaborerInformation.ThirdName||' '||Environment.Variables.GetLaborerInformationMLSDResponse.LaborerInformation.FourthName )AS CHARACTER),NULL),
			CAST(InHeaderRef.UserInfo.IDNumber AS CHARACTER),
			1,
			COALESCE(CAST(Environment.Variables.logicVariable.TCFiles AS CHARACTER),NULL),
			COALESCE(CAST(InHeaderRef.TransactionId AS INTEGER),NULL),
			Environment.Variables.DB.Resultset[]);
			
			
			If RESULTID = 0 then
				
				CALL Create_esbXML_Response_Header( GetESBSuccessCode(),InHeaderRef, OutHeaderRef);
				SET OutBodyRef.TCRequestId = Environment.Variables.DB.Resultset.TCRequestId;
			ELSE
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.FailedToCreateTCRequest,InHeaderRef,OutHeaderRef);
				SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
			END IF;
			
			RETURN TRUE;
		
		
		
		
		
		
		
		
	
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE PROCEDURE Create_TerminateContractRequest (
	IN LaborOfficeId INTEGER,
	IN SequenceNumber INTEGER,
	IN TCReasonId INTEGER,
	IN DirectTerminationReasonId INTEGER,
	IN LaborerTypeId INTEGER,
	IN EstablishmentName Character,
	IN JobCode INTEGER,
	IN ContractId INTEGER,
	IN ContractExpiryDate TimeStamp,
	IN ContractStartDate TimeStamp,
	IN ProbationPeriod INTEGER,
	IN NoticePeriod INTEGER,
	IN HasContractOnSystem INTEGER,
	IN LaborerIdNo Character,
	IN LaborerName Character,
	IN RequesterIdNo Character,
	IN RequesterTypeId INTEGER,
	IN TerminateContractFiles CHARACTER,
	IN MWTransactionId INTEGER )
	RETURNS INTEGER 
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1
	EXTERNAL NAME "dbo.Create_TerminateContractRequest"; 

	
END MODULE;
