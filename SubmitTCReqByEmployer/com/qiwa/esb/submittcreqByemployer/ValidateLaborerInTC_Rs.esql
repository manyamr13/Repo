BROKER SCHEMA com.qiwa.esb.submittcreqByemployer
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE ValidateLaborerInTC_Rs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		-- Success Received from ValidateLaborerInTC
		IF InputRoot.XMLNSC.ValidateLaborerInTCRs.Header.ResponseStatus.Code = GetESBSuccessCode() THEN
			SET Environment.ConsumedServices.ValidateLaborerInTCRs = InputRoot.XMLNSC.ValidateLaborerInTCRs;	
			DECLARE rInHeaderRef REFERENCE TO Environment.Variables.Request.Header;
			DECLARE rInBodyRef REFERENCE TO Environment.Variables.Request.Body;	  
			
			IF  CAST(rInBodyRef.TCReason AS INT) = 14 THEN
				-- Skip ValidateLaborerInTC
				IF STARTSWITH(rInBodyRef.LaborerIdNo, '1') THEN
					-- Call GetCitizenInfo for Saudi Laborer
					SET Environment.Variables.LaborerTypeId = 1;
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				ELSEIF STARTSWITH(rInBodyRef.LaborerIdNo, '2') THEN
					-- Call GetAlienVisitorInfo for Non Saudi Laborer
					SET Environment.Variables.LaborerTypeId = 2;
					PROPAGATE TO TERMINAL 'out2';
					RETURN FALSE;
				END IF;	
			ELSE
				-- Proceed for SP Call Create_TerminateContractRequest
				SET Environment.LogicVariable.CallSP = TRUE;
				RETURN TRUE;
			END IF; 
					
			
			
		ELSEIF EXISTS (InputRoot.XMLNSC.ValidateLaborerInTCRs.Body.ErrorsList[]) THEN
			-- ErrorsList Received from ValidateLaborerInTC	
			SET Environment.Variables.MWResponse.status = InputRoot.XMLNSC.ValidateLaborerInTCRs.Header.ResponseStatus.Code;
			SET Environment.ValidationError.ErrorsList = InputRoot.XMLNSC.ValidateLaborerInTCRs.Body.ErrorsList;
			PROPAGATE TO LABEL 'LabelError';
			RETURN FALSE;
		ELSE
			-- Error Received from ValidateLaborerInTC	
			SET Environment.Variables.MWResponse.status = InputRoot.XMLNSC.ValidateLaborerInTCRs.Header.ResponseStatus.Code;
			PROPAGATE TO LABEL 'LabelError';
			RETURN FALSE;
		END IF;		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
