BROKER SCHEMA com.qiwa.esb.submittcreqByemployer
path Qiwa.Framework.Lib;

CREATE COMPUTE MODULE HTTP_SubmitTCReqByEmployer_CallCreatAndAddRelease
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- save headers
		SET OutputRoot.Properties = Environment.Variables.Properties;

		SET OutputRoot.MQMD = Environment.Variables.MQMD ;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2 ;
		DECLARE InBodyRef REFERENCE TO Environment.Variables.Request.Body;
		DECLARE InHeaderRef REFERENCE TO Environment.Variables.Request.Header;
		--save Header to output
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;


		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByEmployerRs NAME 'Header';
		DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Header;
		CREATE LASTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByEmployerRs NAME 'Body';
		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body;

		DECLARE SubmitTCReqBody REFERENCE TO Environment.Variables.XMLNSC.SubmitTCReqByEmployerRq.Body;
		DECLARE ValidateLaborerTCRES REFERENCE TO InputRoot.XMLNSC.ValidateLaborerInTCRs.Body;
		DECLARE RESULTID INT;
		DECLARE RESULTID2 INT;
		Declare DirectTerminationReason INT;
		DECLARE ReleaseDate TIMESTAMP;
		DECLARE ReleaseDateTypeId INT;

--		IF EXISTS(Environment.Properties.SubmitTCReqByEmployerRs.SubmitTCReqByEmployerRs[]) THEN
--			SET Environment.Properties.SubmitTCReqByEmployerRs.HTTP_INT_SubmitTCReqByEmployerRs =
--			Environment.Properties.SubmitTCReqByEmployerRs.SubmitTCReqByEmployerRs;
--			DELETE FIELD Environment.Properties.SubmitTCReqByEmployerRs.SubmitTCReqByEmployerRs;
--		END IF;


		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.SubmitTCReqByEmployer.HTTP_SubmitTCReqByEmployer.Variables;
		--CASE 1 If the received HasQiwaActiveContract=1

		--SET OutHeaderRef =Environment.Variables.Request.Header;
		--DECLARE COUNTER FOR THE ERROR LIST TO CHECK IF THERE IS ERROR LIST OR NOT
		DECLARE ErrorCount INT ;
		SET ErrorCount= CARDINALITY (ValidateLaborerTCRES.ErrorsList.Error[]);
		DECLARE i INT 1;
		--IF ERRORS FROM Validate Laborer In TC IS NOT NULL RETURN THE ERROR LIST AND EXIT THE FLOW
		IF ErrorCount <> 0 THEN

			While i <= ErrorCount Do

				SET OutBodyRef.ErrorsList.Error[i].ErrorCode = ValidateLaborerTCRES.ErrorsList.Error[i].ErrorCode;
				SET OutBodyRef.ErrorsList.Error[i].DescriptionAr =ValidateLaborerTCRES.ErrorsList.Error[i].DescriptionAr;
				SET OutBodyRef.ErrorsList.Error[i].DescriptionEn =ValidateLaborerTCRES.ErrorsList.Error[i].DescriptionEn;

				SET i =i+1;

			END WHILE;
			CALL Create_esbXML_Response_Header (loadedPropertiesRef.ValidateError,InHeaderRef,OutHeaderRef);
			propagate to terminal 'out1' ;
			RETURN FALSE;

		END IF;
		-- BAKR 2022-07-02
		IF CAST(InBodyRef.TCReason AS INTEGER) = CAST(loadedPropertiesRef.TCReason5 AS INTEGER) 
			OR CAST(InBodyRef.TCReason AS INTEGER) = CAST(loadedPropertiesRef.TCReason12 AS INTEGER) 
			OR CAST(InBodyRef.TCReason AS INTEGER) = CAST(loadedPropertiesRef.TCReason16 AS INTEGER) THEN
				-- Create_TerminateContractRequest THEN  exit the flow
				IF CAST(InBodyRef.TCReason AS INTEGER) = CAST(loadedPropertiesRef.TCReason5 AS INTEGER) THEN
					-- 6
					SET DirectTerminationReason = CAST(loadedPropertiesRef.TCReason6 AS INTEGER);
				ELSE
					-- 5
					SET DirectTerminationReason = CAST(loadedPropertiesRef.TCReason5 AS INTEGER);
				END IF;
				SET RESULTID = Create_TerminateContractRequest (
								CAST(SubmitTCReqBody.LaborOfficeId AS INTEGER),
								CAST(SubmitTCReqBody.SequenceNumber AS INTEGER),
								CAST(SubmitTCReqBody.TCReason AS INTEGER),
								CAST(DirectTerminationReason AS INTEGER),
								CAST(Environment.Variables.LaborerTypeId AS INTEGER),
								COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.EstablishmentName,NULL),
								COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.JobCode AS INTEGER),NULL),
								COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractId AS INTEGER),NULL),
								COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractExpiryDate AS TIMESTAMP),NULL),
								COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractStartDate AS TIMESTAMP),NULL),
								COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ProbationPeriod AS INTEGER),NULL),
								COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.NoticePeriod AS INTEGER),NULL),
								COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.HasNoContract,NULL),
								CAST(InBodyRef.LaborerIdNo AS Character),
								COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.LaborerName,NULL),
								COALESCE(InHeaderRef.UserInfo.IDNumber,NULL),
								1,
								COALESCE(CAST(Environment.Variables.logicVariable.TCFiles AS CHARACTER),NULL),
								COALESCE(CAST(InHeaderRef.TransactionId AS INTEGER),NULL),
								Environment.Variables.DB.Resultset[]);
				IF RESULTID <> 0 THEN
					CALL Create_esbXML_Response_Header(loadedPropertiesRef.FailedToCreateTCRequest,InHeaderRef,OutHeaderRef);
					SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
					RETURN TRUE;
				ELSE
					CALL Create_esbXML_Response_Header(GetESBSuccessCode(),InHeaderRef,OutHeaderRef);
					SET OutBodyRef.TCRequestId = Environment.Variables.DB.Resultset.TCRequestId;
					RETURN TRUE;
				END IF;
		ELSEIF CAST(InBodyRef.TCReason AS INTEGER) = CAST(loadedPropertiesRef.TCReason3 AS INTEGER) AND ValidateLaborerTCRES.HasQiwaActiveContract ='True'  THEN
			--If (ContractStartDate+ProbationPeriod)  is less than Current Date then return error #5 from error codes section and exit the flow
			DECLARE ContractStartDate TIMESTAMP;
			IF CONTAINS(ValidateLaborerTCRES.ContractStartDate,'T') THEN
				SET ContractStartDate = CAST(REPLACE(ValidateLaborerTCRES.ContractStartDate,'T',' ') AS TIMESTAMP);
			ELSE
				SET ContractStartDate = CAST(ValidateLaborerTCRES.ContractStartDate AS TIMESTAMP);
			END IF;
			IF ( ContractStartDate + CAST( ValidateLaborerTCRES.ProbationPeriod AS INTERVAL DAY)) < CURRENT_TIMESTAMP THEN
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.NoPropation,InHeaderRef,OutHeaderRef);
				SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
				RETURN TRUE;
			END IF; 
			-- else :
			SET DirectTerminationReason = 1;
			SET RESULTID = Create_TerminateContractRequest (
							CAST(SubmitTCReqBody.LaborOfficeId AS INTEGER),
							CAST(SubmitTCReqBody.SequenceNumber AS INTEGER),
							CAST(SubmitTCReqBody.TCReason AS INTEGER),
							CAST(DirectTerminationReason AS INTEGER),
							CAST(Environment.Variables.LaborerTypeId AS INTEGER),
							COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.EstablishmentName,NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.JobCode AS INTEGER),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractId AS INTEGER),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractExpiryDate AS TIMESTAMP),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractStartDate AS TIMESTAMP),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ProbationPeriod AS INTEGER),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.NoticePeriod AS INTEGER),NULL),
							COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.HasNoContract,NULL),
							CAST(InBodyRef.LaborerIdNo AS Character),
							COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.LaborerName,NULL),
							COALESCE(InHeaderRef.UserInfo.IDNumber,NULL),
							1,
							COALESCE(CAST(Environment.Variables.logicVariable.TCFiles AS CHARACTER),NULL),
							COALESCE(CAST(InHeaderRef.TransactionId AS INTEGER),NULL),
							Environment.Variables.DB.Resultset[]);
			IF RESULTID <> 0 THEN
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.FailedToCreateTCRequest,InHeaderRef,OutHeaderRef);
				SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
				RETURN TRUE;
			ELSE
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),InHeaderRef,OutHeaderRef);
				SET OutBodyRef.TCRequestId = Environment.Variables.DB.Resultset.TCRequestId;
				RETURN TRUE;
			END IF;
		ELSE
			SET RESULTID = Create_TerminateContractRequest (
							CAST(SubmitTCReqBody.LaborOfficeId AS INTEGER),
							CAST(SubmitTCReqBody.SequenceNumber AS INTEGER),
							CAST(SubmitTCReqBody.TCReason AS INTEGER),
							NULL,
							CAST(Environment.Variables.LaborerTypeId AS INTEGER),
							COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.EstablishmentName,NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.JobCode AS INTEGER),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractId AS INTEGER),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractExpiryDate AS TIMESTAMP),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractStartDate AS TIMESTAMP),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ProbationPeriod AS INTEGER),NULL),
							COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.NoticePeriod AS INTEGER),NULL),
							COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.HasNoContract,NULL),
							CAST(InBodyRef.LaborerIdNo AS Character),
							COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.LaborerName,NULL),
							COALESCE(InHeaderRef.UserInfo.IDNumber,NULL),
							1,
							COALESCE(CAST(Environment.Variables.logicVariable.TCFiles AS CHARACTER),NULL),
							COALESCE(CAST(InHeaderRef.TransactionId AS INTEGER),NULL),
							Environment.Variables.DB.Resultset[]);
			IF RESULTID <> 0 THEN
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.FailedToCreateTCRequest,InHeaderRef,OutHeaderRef);
				SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
				RETURN TRUE;
			END IF;
			--Add_ReleaseDate
			DECLARE ReleaseDate TIMESTAMP;
			DECLARE ReleaseDateTypeId INTEGER; 
			IF CAST(InBodyRef.TCReason AS INTEGER) = 2 THEN
				--ReleaseDate = ContractExpiryDate FROM ValidateLaborerInTC 
				IF CONTAINS(ValidateLaborerTCRES.ContractExpiryDate,'T') THEN
					SET ReleaseDate = CAST(REPLACE(ValidateLaborerTCRES.ContractExpiryDate,'T',' ') AS TIMESTAMP);
				ELSE
					SET ReleaseDate = CAST(ValidateLaborerTCRES.ContractExpiryDate AS TIMESTAMP);
				END IF;
				SET ReleaseDateTypeId = 2;
			ELSE
				SET ReleaseDate = (CURRENT_TIMESTAMP + CAST(CAST(ValidateLaborerTCRES.NoticePeriod AS INTEGER) AS INTERVAL DAY));
				SET ReleaseDateTypeId = 4;
			END IF;
			SET RESULTID = Add_ReleaseDate(CAST(Environment.Variables.DB.Resultset.TCRequestId AS CHARACTER),1,
											ReleaseDate,
											ReleaseDateTypeId,
											CAST(InHeaderRef.TransactionId AS INTEGER));
			IF RESULTID <> 0 THEN
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.FailedToCreateTCRequest,InHeaderRef,OutHeaderRef);
				SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
				RETURN TRUE;
			ELSE
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),InHeaderRef,OutHeaderRef);
				SET OutBodyRef.TCRequestId = Environment.Variables.DB.Resultset.TCRequestId;
				RETURN TRUE;
			END IF; 
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

	CREATE PROCEDURE Create_TerminateContractRequest (
	IN LaborOfficeId INTEGER,
	IN SequenceNumber INTEGER,
	IN TCReasonId INTEGER,
	IN DirectTerminationReasonId INTEGER,
	IN LaborerTypeId INTEGER,
	IN EstablishmentName Character,
	IN JobCode INTEGER,
	IN ContractId INTEGER,
	IN ContractExpiryDate TimeStamp,
	IN ContractStartDate TimeStamp,
	IN ProbationPeriod INTEGER,
	IN NoticePeriod INTEGER,
	IN HasContractOnSystem INTEGER,
	IN LaborerIdNo Character,
	IN LaborerName Character,
	IN RequesterIdNo Character,
	IN RequesterTypeId INTEGER,
	IN TerminateContractFiles CHARACTER,
	IN MWTransactionId INTEGER )
	RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1
	EXTERNAL NAME "dbo.Create_TerminateContractRequest";

	CREATE PROCEDURE Add_ReleaseDate (
	IN RequestId Character,
	IN RequestTypeId INTEGER,
	IN ReleaseDate TimeStamp,
	IN ReleaseDateTypeId INTEGER,
	IN MWTransactionId INTEGER )
	RETURNS INTEGER LANGUAGE DATABASE
	EXTERNAL NAME "dbo.Add_ReleaseDate";


END MODULE;