BROKER SCHEMA com.qiwa.esb.submittcreqByemployer

path Qiwa.Framework.Lib;
CREATE COMPUTE MODULE HTTP_SubmitTCReqByEmployer_CreateTerminate_SP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
 		CALL CopyMessageHeaders();
			 -- save headers 
		SET OutputRoot.Properties	= Environment.Variables.Properties;
		SET OutputRoot.MQMD	= Environment.Variables.MQMD ;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2 ;
		DECLARE InbodyRef REFERENCE TO Environment.Variables.Request.Body;
		DECLARE InHeaderRef REFERENCE TO Environment.Variables.Request.Header;
	 
		--save Header to output
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD 	  = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 	  = Environment.Variables.MQRFH2;
		
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.SubmitTCReqByEmployer.HTTP_SubmitTCReqByEmployer.Variables;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			 
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByEmployerRs  NAME 'Header';
		DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Header; 
		CREATE LASTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByEmployerRs  NAME 'Body'; 
		DECLARE OutBodyRef   REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body;
	    
	    --SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Header = InHeaderRef;
        --DECLARE SubmitTCReqByEmployerRs REFERENCE TO Environment.Variables.SubmitTCReqByEmployerRs;
        DECLARE RESULTID INT; 
        Declare DirectTerminationReason INT;
        
        
       
--        IF EXISTS(Environment.Properties.SubmitTCReqByEmployerRs.SubmitTCReqByEmployerRs[]) THEN
--            SET Environment.Properties.SubmitTCReqByEmployerRs.HTTP_INT_SubmitTCReqByEmployerRs =
--                Environment.Properties.SubmitTCReqByEmployerRs.SubmitTCReqByEmployerRs;
--            DELETE FIELD Environment.Properties.SubmitTCReqByEmployerRs.SubmitTCReqByEmployerRs;
--        END IF;
        
-- 1 If the received ContractSourceId=1 from vaLIDate  TCReason=3 and (ContractStartDate+ProbationPeriod) is greater than Current Date
-- 2 if  Status.PersonStatus.Code=  1 ‘Dead’  from GetForeignerInformation OR Status= ‘Dead’ from GetCitizenInformation
-- 3 if   AlienPrisonStatus= True from GetForeignerInformation 
-- 4 if Status.PersonStatus.Code= 4 'LEFT NOT RETURNED'
-- else Null
 
--            if InbodyRef.Status.PersonStatus.Code=  1   then set DirectTerminationReason = 2;
--            ELSEIF InbodyRef.AlienPrisonStatus= True    then set DirectTerminationReason = 3;
--            ELSEIF InbodyRef.Status.PersonStatus.Code=4 then set DirectTerminationReason = 4; 
--            ELSE set DirectTerminationReason = NULL;
--            END IF;



			--   If received Status is ‘Dead ’ from NIC_GetCitizenInformation  then we will call Create_TerminateContractRequest only then we will exit the flow else :
		-- BAKR 2022-07-02
		IF InputRoot.XMLNSC.GetCitizenInformationNICRs.Body.IdExpiry.Status = 'Dead' THEN
			SET DirectTerminationReason = 2;
			SET RESULTID =  Create_TerminateContractRequest (
						 				CAST(InbodyRef.LaborOfficeId AS INTEGER),
										CAST(InbodyRef.SequenceNumber AS INTEGER),
										CAST(InbodyRef.TCReason AS INTEGER),
										CAST(DirectTerminationReason AS INTEGER),
										CAST(Environment.Variables.LaborerTypeId AS INTEGER),
										COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.EstablishmentName,NULL),-- NULL,
										COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.JobCode AS INTEGER),NULL),-- NULL,
										COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractId AS INTEGER),NULL),  --NULL,
										COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractExpiryDate AS TIMESTAMP),NULL),-- NULL,
										COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ContractStartDate AS TIMESTAMP),NULL),-- NULL,
										COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.ProbationPeriod AS INTEGER),NULL),-- NULL,
										COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.NoticePeriod AS INTEGER),NULL),-- NULL,
										COALESCE(CAST(Environment.Variables.DB.CheckLaborerActiveContract.HasNoContract AS INTEGER),NULL),-- NULL,
										CAST(InbodyRef.LaborerIdNo AS CHARACTER),
										COALESCE(Environment.Variables.DB.CheckLaborerActiveContract.LaborerName,NULL),-- NULL,
										CAST(InHeaderRef.UserInfo.IDNumber AS CHARACTER),
										1,
										COALESCE(CAST(Environment.Variables.logicVariable.TCFiles AS CHARACTER),NULL),
										COALESCE(CAST(InHeaderRef.TransactionId AS INTEGER),NULL),
			                            Environment.Variables.DB.Resultset[]);
			                             
			                                  
 			if RESULTID = 0 then  
		    	 		     
				CALL Create_esbXML_Response_Header( GetESBSuccessCode(),InHeaderRef, OutHeaderRef); 
				SET OutBodyRef.TCRequestId  =	Environment.Variables.DB.Resultset[1].TCRequestId;
			ELSE 
				
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.FailedToCreateTerminateContractRequest,InHeaderRef,OutHeaderRef);
				SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
			END IF;  
			RETURN TRUE;  
		
		ELSEIF InputRoot.XMLNSC.GetCitizenInformationNICRs.Body.IdExpiry.Status <> 'Dead' AND CAST(InbodyRef.TCReason AS INTEGER) = CAST(loadedPropertiesRef.TCReason14 AS INTEGER) THEN  --11 THEN 
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.EmployeeIsAlive,InHeaderRef,OutHeaderRef);
			SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL; 
			RETURN TRUE;
		ELSE 
			Propagate to Terminal 'out1' Delete none;
			Return False ;
		END IF;
	END;
   
	CREATE PROCEDURE Create_TerminateContractRequest  (
        IN LaborOfficeId     INTEGER,
		IN SequenceNumber     INTEGER,
		IN TCReasonId     INTEGER,
		IN DirectTerminationReasonId     INTEGER,
		IN LaborerTypeId     INTEGER,
		IN EstablishmentName     Character,
		IN JobCode     INTEGER,
		IN ContractId     INTEGER,
		IN ContractExpiryDate     TimeStamp,
		IN ContractStartDate      TimeStamp,
		IN ProbationPeriod     INTEGER,
		IN NoticePeriod     INTEGER,
		IN HasContractOnSystem     INTEGER,
		IN LaborerIdNo       Character,
		IN LaborerName       Character,
		IN RequesterIdNo     Character,
		IN RequesterTypeId     INTEGER,
		IN TerminateContractFiles CHARACTER,
		IN MWTransactionId     INTEGER )
RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1 
EXTERNAL NAME "dbo.Create_TerminateContractRequest";  

 

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
