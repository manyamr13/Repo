BROKER SCHEMA com.qiwa.esb.submittcreqByemployer
path Qiwa.Framework.Lib;


CREATE COMPUTE MODULE HTTP_SubmitTCReqByEmployer_Check_LaborerActiveContract
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.SubmitTCReqByEmployer.HTTP_SubmitTCReqByEmployer.Variables;
		DECLARE InBodyRef REFERENCE TO Environment.Variables.Request.Body;
		DECLARE InHeaderRef REFERENCE TO Environment.Variables.Request.Header;
	 
		--save Header to output
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD 	  = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 	  = Environment.Variables.MQRFH2;
	
    -- 	prepare call to check user eli  
	
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByEmployerRs NAME 'Header';
		DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Header;
		CREATE LASTCHILD OF OutputRoot.XMLNSC.SubmitTCReqByEmployerRs NAME 'Body';
		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body;
		
		
		DECLARE LaborerID CHARACTER;
		SET LaborerID =InBodyRef.LaborerIdNo;
		DECLARE resultreturnedvalue INTEGER;
		
					--CALLING Check_NewOccupationTypeLicenseValidity
		  CALL Check_LaborerActiveContract   (cast(InBodyRef.LaborOfficeId As INTEGER),
											  cast(InBodyRef.SequenceNumber As INTEGER),
											  cast(LaborerID As CHARACTER),
										Environment.Variables.DB.CheckLaborerActiveContract[])INTO resultreturnedvalue ; 
										
			IF resultreturnedvalue <> 0 THEN
		        CALL Create_esbXML_Response_Header(loadedPropertiesRef.NoDataFound,InHeaderRef,OutHeaderRef);
		        SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
		        propagate to terminal 'out1' ;
				RETURN FALSE;
						 	  	 
			ELSE
				
				 IF Environment.Variables.DB.CheckLaborerActiveContract.HasActiveContracts = 0 THEN
					CALL Create_esbXML_Response_Header(loadedPropertiesRef.contractnotactive,InHeaderRef,OutHeaderRef);	
					SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL; 	
					propagate to terminal 'out1' ;
					RETURN FALSE;
				 ELSE
				 	-- Begin, Mohan Kristavarapu, 21-09-2021, ICD Version 1.4 	 
				 		-- DECLARE PARAMETER TO STORE THE  TCReason  
						 DECLARE TCReason INTEGER;
						 SET TCReason =  CAST(InBodyRef.TCReason AS INTEGER);
						 
						 -- DECLARE PARAMETER TO STORE THE ContractExpiryDate 
						 DECLARE ContractExpiryDate  TIMESTAMP;
						 SET ContractExpiryDate  = Environment.Variables.DB.CheckLaborerActiveContract.ContractExpiryDate; 
						 -- SET ContractExpiryDate  = CAST(CAST(REPLACE(Environment.Variables.DB.checkresultset.ContractExpiryDate,'T',' ') as TIMESTAMP) as CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss');
						 
						 -- DECLARE PARAMETER TO STORE THE current timestamp 
						 DECLARE CurrentDate TIMESTAMP CURRENT_TIMESTAMP;
						 
						 -- DECLARE PARAMETER TO STORE THE NoticePeriod 
						 DECLARE NoticePeriod INTEGER;
						 SET NoticePeriod = CAST(Environment.Variables.DB.CheckLaborerActiveContract.NoticePeriod AS INTEGER);  
						 
						 -- DECLARE PARAMETER TO STORE THE SUMMATION OF CurrentDate AND NoticePeriod  
	     				DECLARE SUMDATES  TIMESTAMP ;
	    				SET SUMDATES = CurrentDate +  CAST(CAST(NoticePeriod  as CHAR) AS INTERVAL DAY);
	    				
	    				-- to check TCReason value 
						IF TCReason = 2 THEN
							
							--to check the ContractExpiryDate not a null value 
						 	IF (CAST(ContractExpiryDate AS CHARACTER) <> NULL) OR (CAST(ContractExpiryDate AS CHARACTER) <> '') THEN
						 		IF ContractExpiryDate < SUMDATES THEN
						 			CALL Create_esbXML_Response_Header(loadedPropertiesRef.RenewCtrtExpError,InHeaderRef,OutHeaderRef); 
						 			SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
						 	    	propagate to terminal 'out1' ;
						 	  		RETURN FALSE; 	
						 		END IF;
						 	ELSE
						 		CALL Create_esbXML_Response_Header(loadedPropertiesRef.RenewCtrtExpNullError,InHeaderRef,OutHeaderRef); 
						 		SET OutputRoot.XMLNSC.SubmitTCReqByEmployerRs.Body = NULL;
						 	    propagate to terminal 'out1' ;
						 	  	RETURN FALSE; 
						 	END IF;
						END IF;	 
						-- END  	
				  	RETURN TRUE;
					END IF;
		  END IF;

										
		

		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
		
-- Get_OccupationsList PROCEDURE
	CREATE PROCEDURE Check_LaborerActiveContract    (IN LaborOfficeId  INTEGER,
													 IN SequenceNumber INTEGER  ,
													 IN LaborerIdNumber CHARACTER)
													RETURNS INTEGER

	LANGUAGE DATABASE DYNAMIC RESULT SETS 1
	EXTERNAL NAME "dbo.Check_LaborerActiveContract";
END MODULE;
