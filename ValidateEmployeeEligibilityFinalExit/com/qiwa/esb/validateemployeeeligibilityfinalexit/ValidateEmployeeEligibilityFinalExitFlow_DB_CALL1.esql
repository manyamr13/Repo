BROKER SCHEMA com.qiwa.esb.validateemployeeeligibilityfinalexit
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE ValidateEmployeeEligibilityFinalExitFlow_DB_CALL1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;
		
		DECLARE InHeaderRef REFERENCE TO Environment.Variables.Request.Header; 
		DECLARE InbodyRef REFERENCE TO Environment.Variables.Request.Body; 
		DECLARE loadproperties REFERENCE TO Environment.Properties.ValidateEmployeeEligibilityFinalExit.ValidateEmployeeEligibilityFinalExitFlow.Variables;
		
		-- declaring reference to the input root response body for the msg recieved from the odm adapter 
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ValidateEmployeeEligibilityFinalExitRs NAME 'Body'; 
		DECLARE outBodyRef REFERENCE TO OutputRoot.XMLNSC.ValidateEmployeeEligibilityFinalExitRs.Body; 
		-- declaring reference to the output root response header getting out of the service  
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ValidateEmployeeEligibilityFinalExitRs NAME 'Header';
		 
		 
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ValidateEmployeeEligibilityFinalExitRs.Header; 
		
		DECLARE Res CHARACTER;
		DECLARE TotalRecordsCount INTEGER;
		DECLARE Flag CHARACTER;
												
		CALL Get_EmployeeTerminationRequest(COALESCE(CAST(Environment.Variables.LaborOfficeId AS INTEGER),null),
											COALESCE(CAST(Environment.Variables.SequenceNumber AS INTEGER),null),
											NULL,
											NULL,
											NULL,
											NULL,
											COALESCE(InbodyRef.IDNumber,null),
											NULL,
											NULL,
											NULL,
											NULL,
											NULL,
											NULL,
											NULL,
											NULL,
											Res,
											TotalRecordsCount,
											Flag,
											Environment.Variables.DB.EmpTerReq[]);
											
	IF Environment.Variables.DB.EmpTerReq.TerminationStatusID = 1 THEN 
			CALL Create_esbXML_Response_Header(loadproperties.ActiveContractError,InHeaderRef,rOutHeaderRef);
			RETURN TRUE; 									
		END IF;
		
		CALL Check_ActiveContract(COALESCE(CAST(InbodyRef.IDNumber AS CHARACTER),null),Environment.Variables.DB.ResultSet1[]);
		
		
		
		
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(Environment.Variables.DB.ResultSet1[]);
		
		WHILE I <= J DO
			-- ActiveContractError 1001
			IF Environment.Variables.DB.ResultSet1[I].HasActiveContracts = 0  THEN
--				CALL getEsbErrorCodeDescriptionFrom(loadproperties.ActiveContractError,EnglishMSG,ArabicMSG,Status); 
--				SET outBodyRef.Error.ReasonCode = loadproperties.UnifiedNumberError;
--				SET outBodyRef.Error.ArReasonMessage = ArabicMSG;
--				SET outBodyRef.Error.EnReasonMessage = EnglishMSG;
--				SET outBodyRef.ContractExpiryDate.Hijri = Environment.Variables.DB.ResultSet1[I].ExpiryDateHijri;
--				SET outBodyRef.ContractExpiryDate.Gregorian = Environment.Variables.DB.ResultSet1[I].ExpiryDateGregorian; 
				SET outBodyRef.ContractExpiryDate = Environment.Variables.DB.ResultSet1[I].ExpiryDate;
                CALL Create_esbXML_Response_Header(loadproperties.ActiveContractError,InHeaderRef,rOutHeaderRef);
				RETURN TRUE;
			ELSE 
				-- NOActiveContractError 1002
				IF Environment.Variables.DB.ResultSet1[I].HasActiveContracts = 1  THEN  

					SET outBodyRef.ContractExpiryDate = Environment.Variables.DB.ResultSet1[I].ExpiryDate;
					CALL Create_esbXML_Response_Header(loadproperties.NOActiveContractError,InHeaderRef,rOutHeaderRef);
					RETURN TRUE;
				ELSE 
					CALL Create_esbXML_Response_Header(loadproperties.CommError,InHeaderRef,rOutHeaderRef);
					RETURN TRUE;

				END IF;
			END IF;
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	--create stored procedure 
	CREATE PROCEDURE Check_ActiveContract(IN LaborerIdNumber CHARACTER)  	 									
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Check_ActiveContract"; 
	
	CREATE PROCEDURE Get_EmployeeTerminationRequest(IN laborOfficeId INTEGER,
													IN sequenceNumber INTEGER,
													IN EmployeeFirstName CHARACTER,
													IN EmployeeSecondName CHARACTER,
													IN EmployeeThirdName CHARACTER,
													IN EmployeeLastName CHARACTER,
													IN IqamaNumber CHARACTER,
													IN RequestId INTEGER,
													IN TerminatedBy CHARACTER,
													IN TerminationReasonId INTEGER,
													IN TerminationStatusId INTEGER,
													IN CreationDate TIMESTAMP,
													IN UnifiedNationalNumber CHARACTER,
													IN PageSize INTEGER,
													IN PageIndex INTEGER,
													INOUT Result CHARACTER,
													INOUT TotalRecordsCount INTEGER,
													INOUT Flag CHARACTER)  	 									
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Get_EmployeeTerminationRequest"; 
	
END MODULE;
