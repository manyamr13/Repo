BROKER SCHEMA com.qiwa.esb.getindividualcontractslist
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE Call_DB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		-- Create reference to flow Environment.Properties
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.GetIndividualContractsList.HTTP_GetIndividualContractsListFlow.Variables;
		-- Create refrences for the header and body of the request
		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.GetIndividualContractsListRq.Header;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.GetIndividualContractsListRq.Body;
		
		-- Create refrences for the Properties and header of the response
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.GetIndividualContractsListRs NAME 'Header';
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.GetIndividualContractsListRs.Header;
		
		-- Declare LaborerIdNo in body and IdNumber in header
		DECLARE IDNoH INT CAST(rInHeaderRef.UserInfo.IDNumber AS INT) ;
		DECLARE IDNoB INT CAST(rInBodyRef.LaborerDetails.LaborerIdNo AS INT) ;
		
		-- Check if IdNumber exists
		IF NOT EXISTS(rInHeaderRef.UserInfo.IDNumber[]) THEN
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.NoIdNumber,rInHeaderRef,rOutHeaderRef);
		ELSEIF IDNoB <> IDNoH THEN
			-- Check if LaborerIdNo in body is identical to the input IdNumber
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.Error_Contract,rInHeaderRef,rOutHeaderRef);
		ELSE
			-- Check status list before sending input
			DECLARE StatusList CHARACTER '';
			IF EXISTS(rInBodyRef.StatusList.Status[]) THEN
				DECLARE rStatus REFERENCE TO rInBodyRef.StatusList.Status[2];
				SET StatusList = CAST(rInBodyRef.StatusList.Status[1].Id as CHARACTER);
				WHILE LASTMOVE(rStatus) DO
					SET StatusList = StatusList || ',' || CAST(rStatus.Id as CHARACTER);
					MOVE rStatus NEXTSIBLING REPEAT NAME;
				END WHILE;
			ELSE
				SET StatusList = NULL;
			END IF;
			
			-- Send all variables sent in the request and call procedure
			DECLARE TotalRecordsCount INT;
			CALL IndividualContracts_GetList(
											COALESCE(CAST(rInBodyRef.LaborerDetails.LaborerIdNo AS CHARACTER),NULL),
											COALESCE(CAST(rInBodyRef.LaborerDetails.LaborerTypeId AS INTEGER),NULL),
											StatusList,
											COALESCE(CAST(rInBodyRef.DateTypeId AS INTEGER),NULL),
											COALESCE(CAST(rInBodyRef.SortByExpiryDate AS INTEGER),NULL),
											COALESCE(CAST(rInBodyRef.SortByNoticePeriod AS INTEGER),NULL),
											COALESCE(CAST(rInBodyRef.SortByModificationDate AS INTEGER),NULL),
											CAST(rInBodyRef.PageSize AS INTEGER),
											CAST(rInBodyRef.PageIndex AS INTEGER),
											Environment.Variables.DB.ResultSet[]);
			
			-- Check if record exists in DB
			IF EXISTS(Environment.Variables.DB.ResultSet[] ) THEN
				-- Prepare the response
				DECLARE rResult REFERENCE TO Environment.Variables.DB.ResultSet[1];
				CREATE LASTCHILD OF OutputRoot.XMLNSC.GetIndividualContractsListRs NAME 'Body';
				DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC.GetIndividualContractsListRs.Body;
				DECLARE i INTEGER 0;
				WHILE LASTMOVE(rResult) DO
					SET i = i + 1;
					SET OutRef.ContractsList.ContractsItem[i].ContractId VALUE = rResult.ContractId;
					SET OutRef.ContractsList.ContractsItem[i].ContractType.Code VALUE = rResult.ContractTypeId;
					SET OutRef.ContractsList.ContractsItem[i].ContractType.NameAr VALUE = rResult.ContractTypeNameAr;
					SET OutRef.ContractsList.ContractsItem[i].ContractType.NameEn VALUE = rResult.ContractTypeNameEn;
					SET OutRef.ContractsList.ContractsItem[i].DateTypeId VALUE = rResult.DateTypeId;
					IF rResult.DateTypeId = 1 THEN
						SET OutRef.ContractsList.ContractsItem[i].OriginalStartDate.Hijri VALUE = rResult.HijriStartDate_Original;
						SET OutRef.ContractsList.ContractsItem[i].OriginalExpiryDate.Hijri VALUE = rResult.HijriExpiryDate_Original;
						SET OutRef.ContractsList.ContractsItem[i].CurrentStartDate.Hijri VALUE = rResult.HijriStartDate;
						SET OutRef.ContractsList.ContractsItem[i].CurrentExpiryDate.Hijri VALUE = rResult.HijriExpiryDate;

					ELSEIF rResult.DateTypeId = 2 THEN
						SET OutRef.ContractsList.ContractsItem[i].OriginalStartDate.Greogrian VALUE = rResult.GregorianStartDate_Original;
						SET OutRef.ContractsList.ContractsItem[i].OriginalExpiryDate.Greogrian VALUE = rResult.GregorianExpiryDate_Original;
						SET OutRef.ContractsList.ContractsItem[i].CurrentStartDate.Greogrian VALUE = rResult.GregorianStartDate;
						SET OutRef.ContractsList.ContractsItem[i].CurrentExpiryDate.Greogrian VALUE = rResult.GregorianExpiryDate;
					ELSE
						SET OutRef.ContractsList.ContractsItem[i].OriginalStartDate.Hijri VALUE = rResult.HijriStartDate_Original;
						SET OutRef.ContractsList.ContractsItem[i].OriginalExpiryDate.Hijri VALUE = rResult.HijriExpiryDate_Original;
						SET OutRef.ContractsList.ContractsItem[i].OriginalStartDate.Greogrian VALUE = rResult.GregorianStartDate_Original;
						SET OutRef.ContractsList.ContractsItem[i].OriginalExpiryDate.Greogrian VALUE = rResult.GregorianExpiryDate_Original;
						SET OutRef.ContractsList.ContractsItem[i].CurrentStartDate.Hijri VALUE = rResult.HijriStartDate;
						SET OutRef.ContractsList.ContractsItem[i].CurrentExpiryDate.Hijri VALUE = rResult.HijriExpiryDate;
						SET OutRef.ContractsList.ContractsItem[i].CurrentStartDate.Greogrian VALUE = rResult.GregorianStartDate;
						SET OutRef.ContractsList.ContractsItem[i].CurrentExpiryDate.Greogrian VALUE = rResult.GregorianExpiryDate;
					END IF;
					SET OutRef.ContractsList.ContractsItem[i].CreationDate VALUE = rResult.CreationDate;
					SET OutRef.ContractsList.ContractsItem[i].LastModifiedDate VALUE = rResult.LastModifiedDate;
					SET OutRef.ContractsList.ContractsItem[i].LaborerAppRejDate VALUE = rResult.LaborerAppRejDate;
					SET OutRef.ContractsList.ContractsItem[i].EmployerAppRejDate VALUE = rResult.EmployerAppRejDate;
					SET OutRef.ContractsList.ContractsItem[i].RejectionReason.Code VALUE = rResult.RejectionReasonId;
					SET OutRef.ContractsList.ContractsItem[i].RejectionReason.NameAr VALUE = rResult.RejectionReasonAr;
					SET OutRef.ContractsList.ContractsItem[i].RejectionReason.NameEn VALUE = rResult.RejectionReasonEn;
					SET OutRef.ContractsList.ContractsItem[i].RejectionDescription VALUE = rResult.RejectionDescription;
					SET OutRef.ContractsList.ContractsItem[i].UpdateReason.Code VALUE = rResult.UpdateReasonId;
					SET OutRef.ContractsList.ContractsItem[i].UpdateReason.NameAr VALUE = rResult.UpdateReasonAr;
					SET OutRef.ContractsList.ContractsItem[i].UpdateReason.NameEn VALUE = rResult.UpdateReasonEn;
					SET OutRef.ContractsList.ContractsItem[i].ModificationReason.Code VALUE = rResult.ModificationReasonId;
					SET OutRef.ContractsList.ContractsItem[i].ModificationReason.NameAr VALUE = rResult.ModificationReasonAr;
					SET OutRef.ContractsList.ContractsItem[i].ModificationReason.NameEn VALUE = rResult.ModificationReasonEn;
					SET OutRef.ContractsList.ContractsItem[i].NoticePeriod VALUE = rResult.NoticePeriod;
					SET OutRef.ContractsList.ContractsItem[i].Salary VALUE = rResult.Salary;
					SET OutRef.ContractsList.ContractsItem[i].JobTitle.JobTitleAr VALUE = rResult.JobTitleAr;
					SET OutRef.ContractsList.ContractsItem[i].JobTitle.JobTitleEn VALUE = rResult.JobTitleEn;
					SET OutRef.ContractsList.ContractsItem[i].Status.Code VALUE = rResult.StatusId;
					SET OutRef.ContractsList.ContractsItem[i].Status.NameAr VALUE = rResult.StatusAr;
					SET OutRef.ContractsList.ContractsItem[i].Status.NameEn VALUE = rResult.StatusEn;
					SET OutRef.ContractsList.ContractsItem[i].InActiveReason.InactiveReasonId VALUE = rResult.InactiveReasonId;
					SET OutRef.ContractsList.ContractsItem[i].InActiveReason.InactiveReasonEn VALUE = rResult.InactiveReasonEn;
					SET OutRef.ContractsList.ContractsItem[i].InActiveReason.InactiveReasonAr VALUE = rResult.InactiveReasonAr;
					SET OutRef.ContractsList.ContractsItem[i].InActiveReason.TerminationReason.Code VALUE = rResult.TerminationReasonId;
					SET OutRef.ContractsList.ContractsItem[i].InActiveReason.TerminationReason.NameAr VALUE = rResult.TerminationReasonAr;
					SET OutRef.ContractsList.ContractsItem[i].InActiveReason.TerminationReason.NameEn VALUE = rResult.TerminationReasonEn;
					SET OutRef.ContractsList.ContractsItem[i].RelatedTo.Code VALUE = rResult.ContractSourceId;
					SET OutRef.ContractsList.ContractsItem[i].RelatedTo.NameAr VALUE = rResult.ContractSourceAr;
					SET OutRef.ContractsList.ContractsItem[i].RelatedTo.NameEn VALUE = rResult.ContractSourceEn;
					SET OutRef.ContractsList.ContractsItem[i].LastWorkingDay VALUE = rResult.LastWorkingDay;
					SET OutRef.ContractsList.ContractsItem[i].LaborerIdNo VALUE = rResult.LaborerIdNo;
					SET OutRef.ContractsList.ContractsItem[i].LaborerName VALUE = rResult.LaborerName;
					SET OutRef.ContractsList.ContractsItem[i].RequesterName VALUE = rResult.RequesterName;
					SET OutRef.ContractsList.ContractsItem[i].EstablishmentId VALUE = rResult.EstablishmentId;
					SET OutRef.ContractsList.ContractsItem[i].LaborOfficeId VALUE = rResult.LaborOfficeId;
					SET OutRef.ContractsList.ContractsItem[i].SequenceNumber VALUE = rResult.SequenceNumber;
					SET OutRef.ContractsList.ContractsItem[i].UnifiedNumberId VALUE = rResult.UnifiedNumberId;
					SET OutRef.ContractsList.ContractsItem[i].EntityId VALUE = rResult.EntityId;
					SET OutRef.ContractsList.ContractsItem[i].CRNumber VALUE = rResult.CRNumber;
					SET OutRef.ContractsList.ContractsItem[i].EstablishmentNameEn VALUE = rResult.EstablishmentNameEn;
					SET OutRef.ContractsList.ContractsItem[i].EstablishmentNameAr VALUE = rResult.EstablishmentNameAr;
					IF rResult.IsExternal = false THEN
						SET OutRef.ContractsList.ContractsItem[i].IsExternal VALUE = 0;
					ELSE
						SET OutRef.ContractsList.ContractsItem[i].IsExternal VALUE = 1;
					END IF;
					SET OutRef.ContractsList.ContractsItem[i].ContractPeriod VALUE = rResult.ContractPeriod;
					SET OutRef.ContractsList.ContractsItem[i].Occupation.Code VALUE = rResult.OccupationID;
					SET OutRef.ContractsList.ContractsItem[i].Occupation.NameAr VALUE = rResult.OccupationAr;
					SET OutRef.ContractsList.ContractsItem[i].Occupation.NameEn VALUE = rResult.OccupationEn;
					SET OutRef.ContractsList.ContractsItem[i].WorkLocation.Code VALUE = rResult.WorkLocationId;
					SET OutRef.ContractsList.ContractsItem[i].WorkLocation.NameAr VALUE = rResult.WorkLocationAr;
					SET OutRef.ContractsList.ContractsItem[i].WorkLocation.NameEn VALUE = rResult.WorkLocationEn;
					IF rResult.IsRegisteredwithGosi = false THEN
						SET OutRef.ContractsList.ContractsItem[i].IsRegisteredwithGosi VALUE = 0;
					ELSE
						SET OutRef.ContractsList.ContractsItem[i].IsRegisteredwithGosi VALUE = 1;
					END IF;
					SET OutRef.ContractsList.ContractsItem[i].IsGosiMigrated VALUE = rResult.IsGosiMigrated;
					MOVE rResult NEXTSIBLING REPEAT NAME;
				END WHILE;
				SET OutRef.TotalRecordsCount VALUE = Environment.Variables.DB.ResultSet[1].TotalRecordsCount;
				-- Return success via response status
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);
			ELSE
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.Nodata,rInHeaderRef,rOutHeaderRef);
			END IF;
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	-- Procedure to Get Contracts list
	CREATE PROCEDURE IndividualContracts_GetList (IN LaborerIdNo CHARACTER,
	IN LaborerTypeId INTEGER,
	IN StatusList CHARACTER,
	IN DateTypeId INTEGER,
	IN SortByExpiryDate INTEGER,
	IN SortByNoticePeriod INTEGER,
	IN SortByLastModifiedDate INTEGER,
	IN PageSize INTEGER,
	IN PageIndex INTEGER) LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.IndividualContracts_GetList";
END MODULE;