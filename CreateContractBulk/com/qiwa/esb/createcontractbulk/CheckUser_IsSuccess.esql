BROKER SCHEMA com.qiwa.esb.createcontractbulk
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE CheckUser_IsSuccess
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE EV REFERENCE TO Environment.Variables;
		-- references to header, body , properties
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.CreateContractBulk.CreateContractBulkFlow.Variables;
		DECLARE InBodyRef REFERENCE TO EV.XMLNSC.CreateContractBulkRq.Body;
		DECLARE InHeaderRef REFERENCE TO EV.XMLNSC.CreateContractBulkRq.Header;
		DECLARE RspHeaderRef REFERENCE TO InputRoot.XMLNSC.CheckUserEligibilityRs.Header;
		-- If user eligib
		IF RspHeaderRef.ResponseStatus.Code = GetESBSuccessCode() OR CONTAINS(UPPER(loadedPropertiesRef.ExcludeChannel), UPPER(InHeaderRef.ChannelId)) THEN
			-- insert the bulk
			DECLARE ResultID INTEGER;
			DECLARE ContractList CHARACTER;
			SET Environment.XmlObject VALUE = NULL;
			DECLARE xmlObj reference to Environment.XmlObject;
			--Create XML object XMLNSC Domain
			Create FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
			DECLARE i,j,index INTEGER 1;
			DECLARE Fileslist CHARACTER '' ;
			DECLARE ContractListCount INTEGER CARDINALITY(InBodyRef.ContractList.ContractItem[]);
			WHILE index <= ContractListCount DO
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].DateTypeId = InBodyRef.ContractList.ContractItem[index].DateTypeId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].ContractTypeId = InBodyRef.ContractList.ContractItem[index].ContractDetails.ContractTypeId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LaborerId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.LaborerIdNo;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].BorderNumber = InBodyRef.ContractList.ContractItem[index].LaborersDetails.BorderNumber;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LaborerName = InBodyRef.ContractList.ContractItem[index].LaborersDetails.LaborerName;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LaborerTypeId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.LaborerTypeId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].JobTitleAr = InBodyRef.ContractList.ContractItem[index].ContractDetails.JobTitle.JobTitleAr;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].JobTitleEn = InBodyRef.ContractList.ContractItem[index].ContractDetails.JobTitle.JobTitleEng;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].ContractDurationId = InBodyRef.ContractList.ContractItem[index].ContractDetails.ContractDurationId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].ProbationPeriod = InBodyRef.ContractList.ContractItem[index].ContractDetails.ProbationPeriod;
 				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].ProbationTerminationRightCode = InBodyRef.ContractList.ContractItem[index].ContractDetails.ProbationTerminationRight;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].WorkingHoursTypeId = InBodyRef.ContractList.ContractItem[index].ContractDetails.WorkingHoursTypeId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].VacationPeriod = InBodyRef.ContractList.ContractItem[index].ContractDetails.VacationPeriod;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].Salary = InBodyRef.ContractList.ContractItem[index].ContractDetails.Salary;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].SalaryTypeId = InBodyRef.ContractList.ContractItem[index].ContractDetails.SalaryTypeId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].PercentageReasonEn = InBodyRef.ContractList.ContractItem[index].ContractDetails.PercentageReasonEN;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].PercentageReasonAr = InBodyRef.ContractList.ContractItem[index].ContractDetails.PercentageReasonAR;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LanguageId = InBodyRef.ContractList.ContractItem[index].LanguageId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].RenewalStatusId = InBodyRef.ContractList.ContractItem[index].ContractDetails.RenewalStatusId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].ContractPeriod = InBodyRef.ContractList.ContractItem[index].ContractDetails.ContractPeriod;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].NoticePeriod = InBodyRef.ContractList.ContractItem[index].ContractDetails.NoticePeriod;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LaborerJobNumber = InBodyRef.ContractList.ContractItem[index].ContractDetails.LaborerJobNumber;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].HijriStartDate = InBodyRef.ContractList.ContractItem[index].ContractDetails.StartDate.HijriDate;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].GregorianStartDate = InBodyRef.ContractList.ContractItem[index].ContractDetails.StartDate.GregDate;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].HijriExpiryDate = InBodyRef.ContractList.ContractItem[index].ContractDetails.ExpiryDate.HijriDate;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].GregorianExpiryDate = InBodyRef.ContractList.ContractItem[index].ContractDetails.ExpiryDate.GregDate;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LaborerIdExpiryDate = InBodyRef.ContractList.ContractItem[index].LaborersDetails.LaborerIdExpiryDate;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LaborerEmail = InBodyRef.ContractList.ContractItem[index].LaborersDetails.LaborerEmail;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LaborerMobileNumber = InBodyRef.ContractList.ContractItem[index].LaborersDetails.LaborerMobileNumber;

				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].NationalityId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.Nationality;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].GenderId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.Gender;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].ReligionId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.Religion;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].MaritalStatusId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.MaritalStatus;

				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].EducationId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.EducationId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].DobTypeId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.DOBType;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].DobGregorian = InBodyRef.ContractList.ContractItem[index].LaborersDetails.LaborerDOB.GregDate;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].DobHijri = InBodyRef.ContractList.ContractItem[index].LaborersDetails.LaborerDOB.HijriDate;

				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].SpecialityId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.SpecialtyId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].WorklocationId = InBodyRef.ContractList.ContractItem[index].LaborersDetails.WorkLocationId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].IBAN = InBodyRef.ContractList.ContractItem[index].LaborersDetails.IBAN;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].RejectionDescription = NULL;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].LaborerAppRejDate = NULL;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].EmployerAppRejDate = NULL;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].SalaryFrequency = InBodyRef.ContractList.ContractItem[index].ContractDetails.SalaryFrequency;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].HoursPerWeek = InBodyRef.ContractList.ContractItem[index].ContractDetails.HoursPerWeek;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].DaysPerWeek = InBodyRef.ContractList.ContractItem[index].ContractDetails.DaysPerWeek;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].HoursPerDay = InBodyRef.ContractList.ContractItem[index].ContractDetails.HoursPerDay;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].Period = InBodyRef.ContractList.ContractItem[index].ContractDetails.OptionalArticles.Period;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].OccupationId = InBodyRef.ContractList.ContractItem[index].ContractDetails.OccupationId;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].Location = InBodyRef.ContractList.ContractItem[index].ContractDetails.OptionalArticles.Location;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].WorkField = InBodyRef.ContractList.ContractItem[index].ContractDetails.OptionalArticles.WorkField;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].RelatedToId = InBodyRef.ContractList.ContractItem[index].RelatedToId;
				-- prepare allowances
				IF EXISTS(InBodyRef.ContractList.ContractItem[index].ContractDetails.Allowances.AllowancesItem[]) THEN
					DECLARE AllowancesList INTEGER CARDINALITY(InBodyRef.ContractList.ContractItem[index].ContractDetails.Allowances.AllowancesItem[]);
					WHILE i <= AllowancesList DO
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].Allowances.ClausesList.AllowancesList.AllowanceItem[i].Key = InBodyRef.ContractList.ContractItem[index].ContractDetails.Allowances.AllowancesItem[i].Key;
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].Allowances.ClausesList.AllowancesList.AllowanceItem[i].Value = InBodyRef.ContractList.ContractItem[index].ContractDetails.Allowances.AllowancesItem[i].Value;
						SET i = i +1;
					END WHILE;
				END IF;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].CategoryId = InBodyRef.ContractList.ContractItem[index].ContractDetails.CategoryId;

				SET j = 1;
				IF EXISTS(InBodyRef.ContractList.ContractItem[index].ContractDetails.UploadedFiles.UploadedFilesItem[]) THEN
					DECLARE Files REFERENCE TO InBodyRef.ContractList.ContractItem[index].ContractDetails.UploadedFiles.UploadedFilesItem[1];
					WHILE LASTMOVE (Files) DO
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].Files.ContractFilesList.ContractFileItem[j].FileId = Files.FileId;
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].Files.ContractFilesList.ContractFileItem[j].FileTypeId = Files.FileTypeId;
						SET j = j+1;
						MOVE Files NEXTSIBLING REPEAT NAME;
					END WHILE;
				END IF;
				SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].IsUploadFilesSkiped = InBodyRef.ContractList.ContractItem[index].ContractDetails.IsUploadFilesSkiped;
				-- prepare cluases
				SET i =1;
				IF EXISTS(InBodyRef.ContractList.ContractItem[index].ContractDetails.AddedClauses.AddedClausesItem[]) THEN
					DECLARE AddedClausesList INTEGER CARDINALITY(InBodyRef.ContractList.ContractItem[index].ContractDetails.AddedClauses.AddedClausesItem[]);
					WHILE i <= AddedClausesList DO
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].AddedClauses.ClausesList.AddedClausesList.ClauseItem[i].Key = InBodyRef.ContractList.ContractItem[index].ContractDetails.AddedClauses.AddedClausesItem[i].Key;
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].AddedClauses.ClausesList.AddedClausesList.ClauseItem[i].Value = InBodyRef.ContractList.ContractItem[index].ContractDetails.AddedClauses.AddedClausesItem[i].Value;
						SET i = i +1;
					END WHILE;
				END IF;
				SET i =1;
				-- prepare AdditionalItems
				IF EXISTS(InBodyRef.ContractList.ContractItem[index].ContractDetails.AdditionalAllowancesList.Item[]) THEN
					DECLARE AdditionalItemsList INTEGER CARDINALITY(InBodyRef.ContractList.ContractItem[index].ContractDetails.AdditionalAllowancesList.Item[]);
					WHILE i <= AdditionalItemsList DO
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].AdditionalItems.AddtionalItemsList.AddtionalItem[i].BenefitNameAr = InBodyRef.ContractList.ContractItem[index].ContractDetails.AdditionalAllowancesList.Item[i].BenefitNameAr;
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].AdditionalItems.AddtionalItemsList.AddtionalItem[i].BenefitNameEn = InBodyRef.ContractList.ContractItem[index].ContractDetails.AdditionalAllowancesList.Item[i].BenefitNameEn;
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].AdditionalItems.AddtionalItemsList.AddtionalItem[i].Amount = InBodyRef.ContractList.ContractItem[index].ContractDetails.AdditionalAllowancesList.Item[i].Amount;
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].AdditionalItems.AddtionalItemsList.AddtionalItem[i].AmountType = InBodyRef.ContractList.ContractItem[index].ContractDetails.AdditionalAllowancesList.Item[i].AmountType;
						SET xmlObj.ContractRequestItemsList.ContractRequestItem[index].AdditionalItems.AddtionalItemsList.AddtionalItem[i].Frequency = InBodyRef.ContractList.ContractItem[index].ContractDetails.AdditionalAllowancesList.Item[i].Frequency;
						SET i = i +1;
					END WHILE;
				END IF;
				SET i =1;
				SET index = index +1;
			END WHILE;
			SET Environment.xml.ContractRequestItemsList = xmlObj.ContractRequestItemsList;
			SET Environment.xml.ContractRequestItemsList = CAST(ASBITSTREAM(Environment.xml CCSID 1208 ) AS CHARACTER CCSID 1208);
			-- call create contract bulk
			SET ContractList = CAST(Environment.xml.ContractRequestItemsList as CHARACTER);
			SET ResultID = Create_ContractBulk(CAST(InBodyRef.EstablishmentDetails.LaborOfficeId AS INTEGER),
												CAST(InBodyRef.EstablishmentDetails.SequenceNumber AS INTEGER),
												CAST(InBodyRef.EstablishmentDetails.EstablishmentId AS INTEGER),
												CAST(InBodyRef.EstablishmentDetails.UnifiedNumberId AS INTEGER),
												InBodyRef.EstablishmentDetails.EntityId,
												InBodyRef.EstablishmentDetails.EstablishmentNameEn,
												InBodyRef.EstablishmentDetails.EstablishmentNameAr,
												InBodyRef.EstablishmentDetails.EstablishmentEmail,
												InBodyRef.RequesterDetails.RequesterIdNo ,
												CAST(InBodyRef.RequesterDetails.RequesterUserId AS INTEGER),
												InBodyRef.RequesterDetails.RequesterName,
												InBodyRef.RequesterDetails.RequesterRole,
												NULL,
												ContractList,
												CAST(InHeaderRef.TransactionId as INTEGER),
												CAST(InHeaderRef.ChannelId as CHARACTER),
												CAST(InBodyRef.IsDraft as INTEGER),
												EV.ESB.BulkId[]);
			 COMMIT;
			IF ResultID = 0 THEN
				IF ContractListCount <= CAST(loadedPropertiesRef.Count as INTEGER) THEN
					IF (CAST(InBodyRef.IsDraft as INTEGER)=0) THEN
						-- go to create new contract
						RETURN TRUE;
					END IF;
				ELSE
					SET OutputRoot.Properties = EV.Properties;
					SET OutputRoot.MQMD = EV.MQMD;
					SET OutputRoot.MQRFH2 = EV.MQRFH2;
					CREATE FIRSTCHILD OF OutputRoot.XMLNSC.CreateContractBulkRs NAME 'Header';
					DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CreateContractBulkRs.Header;
					CREATE LASTCHILD OF OutputRoot.XMLNSC.CreateContractBulkRs NAME 'Body';
					DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.CreateContractBulkRs.Body;
					CALL Create_esbXML_Response_Header(loadedPropertiesRef.UnderProcessing, InHeaderRef,OutHeaderRef);
					SET OutBodyRef.BulkId = EV.ESB.BulkId[1].BulkId;
					propagate to terminal 'out2' delete none;
					SET EV.ESB.BackgroundProcess = TRUE;
					IF (CAST(InBodyRef.IsDraft as INTEGER)=0) THEN
						-- go to create new contract
						RETURN TRUE;
					END IF;
				END IF;
			ELSE
				SET EV.MWResponse.status = loadedPropertiesRef.CannotInsert;
				propagate to terminal 'out1' delete none;
				RETURN FALSE;
			END IF;
		ELSE
			SET EV.MWResponse.status = loadedPropertiesRef.LoginFaild;
			propagate to terminal 'out1' delete none;
			RETURN FALSE;
		END IF;
	END;
	CREATE PROCEDURE Create_ContractBulk (IN LaborOfficeId INTEGER,
											IN SequenceNumber INTEGER,
											IN EstablishmentId INTEGER,
											IN UnifiedNumberId INTEGER,
											IN EntityId CHARACTER,
											IN EstablishmentNameEn CHARACTER,
											IN EstablishmentNameAr CHARACTER,
											IN EstablishmentEmail CHARACTER,
											IN RequesterIdNumber CHARACTER,
											IN RequesterUserId INTEGER,
											IN RequesterName CHARACTER,
											IN RequesterRole CHARACTER,
											IN ContractTemplateId INTEGER,
											IN ContractList CHARACTER,
											IN MWTransactionId INTEGER,
											IN ChannelId CHARACTER,
											IN IsDraft INTEGER)RETURNS INTEGER
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Create_ContractBulk"; -- Create_ContractBulk_ToBeDeployed
END MODULE;