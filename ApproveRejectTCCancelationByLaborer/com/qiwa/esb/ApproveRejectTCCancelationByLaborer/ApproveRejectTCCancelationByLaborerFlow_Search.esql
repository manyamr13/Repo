BROKER SCHEMA com.qiwa.esb.ApproveRejectTCCancelationByLaborer
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE ApproveRejectTCCancelationByLaborerFlow_Search
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		
		--HEADERS COPYING
		 CALL CopyMessageHeaders();
		 
		 
	--DECLARE THE HEADER AND THE BODY OF THE FILTER  
		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.ApproveRejectTCCancelationByLaborerRq.Header;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.ApproveRejectTCCancelationByLaborerRq.Body; 
		
		  
		 --SET THE HEADER AND BODY GLOBAL i.e ALL NODES CAN SEE IT
		SET Environment.Variables.Header = rInHeaderRef;
		SET Environment.Variables.Body = rInBodyRef; 
		
	--SETTING THE HTTP AND HTTP_INT GROUPS AS REPLACEMENT TO EACH OTHER
		IF EXISTS(Environment.Properties.ApproveRejectTCCancelationByLaborer.HTTP_INT_ApproveRejectTCCancelationByLaborer[]) THEN
			set Environment.Properties.ApproveRejectTCCancelationByLaborer.HTTP_ApproveRejectTCCancelationByLaborer = 
				Environment.Properties.ApproveRejectTCCancelationByLaborer.HTTP_INT_ApproveRejectTCCancelationByLaborer;
			DELETE FIELD Environment.Properties.ApproveRejectTCCancelationByLaborer.HTTP_INT_ApproveRejectTCCancelationByLaborer;
		END IF;
		
		
				
	 --DECLEARING REFRENCE TO THE ApproveRejectTCCancelationByEmployerFlow XML FLOW
	   DECLARE propertiesRef  REFERENCE TO Environment.Properties.ApproveRejectTCCancelationByLaborer.HTTP_ApproveRejectTCCancelationByLaborer.Variables; 
	
	
	
	   --DECLARE  SND SETTING ALL THE REQUEST PARAMETERS 
	
		DECLARE CancelationRequestId INT ; 
		DECLARE IsApproved INT;
		DECLARE RejectionReason  CHAR;
		
		SET CancelationRequestId= rInBodyRef.CancelationRequestId;
		SET IsApproved =rInBodyRef.IsApproved;
		SET RejectionReason= rInBodyRef.RejectionReason; 
		
		--DECLARING THE LOBORER ID NUMBER WHICH EQUAL THE IDNumber OF THE REQUEST HEADER
		DECLARE LaborerIdNo CHAR rInHeaderRef.UserInfo.IDNumber;
		
		
		--DECLARING PARAMETERS FOR Search_TerminateContractRequests PROCEDURE
		DECLARE Result INT 0 ;
		DECLARE TotalRecordsCount  INT ;
		DECLARE TOTAL1 INT 0 ;
		DECLARE TOTAL2 INT 0 ;
		
		 
	   --CREATE THE ApproveRejectTCCancelationByEmployerRs HEADER AND BODY  
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ApproveRejectTCCancelationByLaborerRs  NAME 'Header'; 
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ApproveRejectTCCancelationByLaborerRs  NAME 'Body';  
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ApproveRejectTCCancelationByLaborerRs.Header; 
		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.ApproveRejectTCCancelationByLaborerRs.Body;
	    
	   --SETTING INPUTHEADER EQUAL OUTPUTHEADER
		 SET rOutHeaderRef =rInHeaderRef;
	 
	 
	--DECLARE THE Search_TerminateContractRequests INPUT PARAMETERS
		DECLARE StatusIds CHAR '5';
		DECLARE PageSize INT 1;
		DECLARE PageIndex INT 1;
		DECLARE StatusId INT;
		DECLARE LaborerApprovalRejDate TIMESTAMP;   
		DECLARE EmployerApproveRejDate TIMESTAMP;
		
	    --DECLARE THE CURRENT DATE
	    DECLARE CurrentDate DATE CURRENT_DATE;
         SET CurrentDate = cast(CurrentDate AS TIMESTAMP);
	    
	    
	    --IF THE REQUEST HEADER IDNumber IS NULL RETURN AN ERROR AND EXCIT THEH FLOW
	IF LaborerIdNo is NULL THEN
			
			CALL Create_esbXML_Response_Header (propertiesRef.MissingIdNumber,rInHeaderRef,rOutHeaderRef);
		 	  
		 		RETURN TRUE;
    END IF;
 	  	
 	  	
 	  	
	-- IF IsApproved is NULL THE RejectionReason IS MANDATORY RETURN AN ERROR AND EXCIT THE FLOW
 	  	
	IF  RejectionReason is NULL  AND IsApproved = 0  THEN 
			
 	  	  CALL Create_esbXML_Response_Header( propertiesRef.RejectionReasonMissing ,rInHeaderRef,rOutHeaderRef);
		 	 	
		 	RETURN TRUE;
		 	  	
 	  END IF;
 	  	
 	  	 --IF THERE IS NO MISSING PARAMETERS CALL Search_TerminateContractRequests AND PASS ITS PARAMETERS
 	  	 
		CALL Search_TerminateContractRequests (NULL ,      
											   NULL ,
											   NULL ,
											   NULL ,
											   NULL ,
											   NULL ,
											   NULL ,
											   StatusIds,											   
											   NULL ,
										       CancelationRequestId ,
											   NULL ,
											   NULL ,
											   NULL ,
											   NULL ,
											   PageSize,
											   PageIndex ,
											   TotalRecordsCount,  
											   Environment.Variables.DB.ResultSet[])INTO TOTAL1 ;  
		
		
	  			 										         

	-- COUNTING THE RESULTS FROM THE Search_TerminateContractRequests
			SET Result = CARDINALITY(Environment.Variables.DB.ResultSet[]);
	
	--IF THERE IS NO RECORD, RETURN ERROR INDICATES invalid CancelationRequestId or unacceptable status
	
			IF Result = 0 THEN
				
				 CALL Create_esbXML_Response_Header(propertiesRef.InvalidCancelationRequestId,rInHeaderRef,rOutHeaderRef);  
				     
		 	  	 
		 	  	
			ELSE
				
  --IF THERE IS A RECORD CALL Update_TCCancelationRequest
  --DECLARE THE PARAMETERS FOR Update_TCCancelationRequest
				
				SET LaborerApprovalRejDate=CurrentDate;   
				SET EmployerApproveRejDate= NULL;
				
				IF IsApproved= 0 THEN 
					SET StatusId =8;
					SET RejectionReason= rInBodyRef.RejectionReason;
					
				ELSEIF IsApproved= 1 THEN
					SET StatusId =6;
					SET RejectionReason='';
					
				END IF;
				
				
	   CALL Create_esbXML_Response_Header (GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);
				

	 --CALLING Update_TCCancelationRequest PROCEDURE
	     CALL Update_TCCancelationRequest (CancelationRequestId,    
								           StatusId,
								           EmployerApproveRejDate ,
								           LaborerApprovalRejDate,
								           RejectionReason,   
								    	   Environment.Variables.DB.ResultSet[])INTO TOTAL2 ; 
			
			END IF;	  	


	RETURN TRUE;
	
		-- CALL CopyEntireMessage();
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN  
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	--THE CREATE OF  Search_TerminateContractRequests PROCEDURE 
	CREATE PROCEDURE Search_TerminateContractRequests (IN LaborOfficeId INT,
													   IN SequenceNumber INT,
													   IN TCRequestId INT,
													   IN RequesterIdNo CHAR,
													   IN LaborerIdNo CHAR,
													   IN LaborerName CHAR,
													   IN RequesterTypeId INT,
													   IN StatusIds CHAR,
													   IN RDUpdateRequestId CHAR,
													   IN CancelationRequestId INT,
													   IN TCReasonId INT,
													   IN CreationDate CHAR,
													   IN ReleaseDate CHAR,
													   IN RemainingDays INT,
													   IN PageSize INT,
													   IN PageIndex INT,
													   INOUT TotalRecordsCount INT) 
				 										RETURNS INTEGER  
			                                             
    LANGUAGE DATABASE DYNAMIC RESULT SETS 1  
    EXTERNAL NAME "dbo.Search_TerminateContractRequests";
    
    --  THE CREATE OF Update_TCCancelationRequest PROCEDURE 
    
	CREATE PROCEDURE Update_TCCancelationRequest (IN CancelationRequestId INT ,
												  IN StatusId INT,  
												  IN EmployerApproveRejDate TIMESTAMP,
												  IN LaborerApprovalRejDate TIMESTAMP, 
												  IN RejectionReason CHAR ) 
			 									  RETURNS INTEGER  
                                             
    LANGUAGE DATABASE DYNAMIC RESULT SETS 1  
    EXTERNAL NAME "dbo.Update_TCCancelationRequest";
    
    
END MODULE;
		