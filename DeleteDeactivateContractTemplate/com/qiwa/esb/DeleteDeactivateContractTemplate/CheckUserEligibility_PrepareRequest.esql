BROKER SCHEMA com.qiwa.esb.DeleteDeactivateContractTemplate


CREATE COMPUTE MODULE CheckUserEligibility_PrepareRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- ref to properties, Header and Body
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.DeleteDeactivateContractTemplate.DeleteDeactivateContractTemplateFlow.Variables;
		DECLARE InBodyRef REFERENCE TO InputRoot.XMLNSC.DeleteDeactivateContractTemplateRq.Body;
		DECLARE InHeaderRef REFERENCE TO InputRoot.XMLNSC.DeleteDeactivateContractTemplateRq.Header; 
    	
    	-- 	save the input message and headers
		SET Environment.Variables.Properties = InputRoot.Properties;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.Variables.XMLNSC = InputRoot.XMLNSC; 
	    SET Environment.Variables.Request = InputRoot.XMLNSC.DeleteDeactivateContractTemplateRq;  
		
		IF (InHeaderRef.ChannelId = loadedPropertiesRef.unifiedPortal) THEN 
			PROPAGATE TO TERMINAL 'out1'; -- skip CheckUserEligibility 
			RETURN FALSE;
			
		ELSE
			
	   		-- 	prepare call to check user eli
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
			SET OutputRoot.XMLNSC.CheckUserEligibilityRq.Header = InHeaderRef;
			DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Header;
			CREATE LASTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Body';
			DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Body;
			SET rOutHeaderRef.ServiceCode = loadedPropertiesRef.ServiceCode; 
			SET rOutHeaderRef.ChannelId = loadedPropertiesRef.ChannelId;
			-- prepare body
			SET rOutBodyRef.UserId = InHeaderRef.UserInfo.UserId;
			SET rOutBodyRef.IdNo = InHeaderRef.UserInfo.IDNumber;
			SET rOutBodyRef.LaborOfficeId = InBodyRef.LaborOfficeId;
			SET rOutBodyRef.EstablishmentSequence  = InBodyRef.SequenceNumber;
			SET rOutBodyRef.ServiceId  = loadedPropertiesRef.ServiceId;
			
			SET Environment.InternalServiceCaller.callCorrIDOffset = SUBSTRING(InHeaderRef.TransactionId FROM 1 FOR 2);
			RETURN TRUE;
		END IF;	
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
