BROKER SCHEMA com.qiwa.esb.checktclaborereligibility
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE HTTP_INT_CheckTCLaborerEligibility_prepRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
			SET Environment.Variables.Properties = InputRoot.Properties;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.Variables.XMLNSC = InputRoot.XMLNSC;
		
		IF EXISTS(Environment.Properties.CheckTCLaborerEligibility.HTTP_INT_CheckTCLaborerEligibility[]) THEN
			  
			SET Environment.Properties.CheckTCLaborerEligibility.HTTP_CheckTCLaborerEligibility = Environment.Properties.CheckTCLaborerEligibility.HTTP_INT_CheckTCLaborerEligibility;
			DELETE FIELD Environment.Properties.CheckTCLaborerEligibility.HTTP_INT_CheckTCLaborerEligibility;
			
		END IF;
		DECLARE propertiesRef REFERENCE TO Environment.Properties.CheckTCLaborerEligibility.HTTP_CheckTCLaborerEligibility;
		
		DECLARE Request REFERENCE TO InputRoot.XMLNSC.CheckTCLaborerEligibilityRq;
	-- 	DECLARE propertiesRef  REFERENCE TO Environment.Properties.CheckTCLaborerEligibility.HTTP_CheckTCLaborerEligibility;
		
		
		
		SET OutputRoot.MQMD.ReplyToQ = propertiesRef.Variables.replyToQueueName;
		SET OutputRoot.MQRFH2.usr.soap.url=propertiesRef.Variables.ODMURL;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq NAME 'Header';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq NAME 'Body';
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Header = Request.Header; 
		
		
		IF Request.Body.HasActiveContract = 'False'   And  Request.Body.HasContractOnSystem is NULL THEN
			SET Environment.Variables.MWResponse.status = propertiesRef.Variables.ErrorCode;
        	PROPAGATE TO TERMINAL 'out1';
        	RETURN FALSE;
		END IF;
		
		IF Request.Body.RequesterTypeId = 2   And  Request.Body.LaborerStatusCode is NULL THEN
			SET Environment.Variables.MWResponse.status = propertiesRef.Variables.ErrorCode;
        	PROPAGATE TO TERMINAL 'out1';
        	RETURN FALSE;
		END IF;
		
		IF Request.Body.RequesterTypeId = 2  And Request.Body.LaborerTypeId   = 2  And  Request.Body.EntryDate is NULL THEN
			SET Environment.Variables.MWResponse.status = propertiesRef.Variables.ErrorCode;
        	PROPAGATE TO TERMINAL 'out1';
        	RETURN FALSE;
		END IF;
		
		IF Request.Body.LaborerTypeId = 2   And  Request.Body.HasPendingCSRequest is NULL THEN
			SET Environment.Variables.MWResponse.status = propertiesRef.Variables.ErrorCode;
        	PROPAGATE TO TERMINAL 'out1';
        	RETURN FALSE;
		END IF;	
		
		
		
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.ter:DecisionID = Request.Header.TransactionId;
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.RequesterTypeId= Request.Body.RequesterTypeId;
	    SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.LaborerTypeId = Request.Body.LaborerTypeId;
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.HasPendingTCRequest = Request.Body.HasPendingTCRequest;
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.HasActiveContract= Request.Body.HasActiveContract;
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.HasContractOnSystem = Request.Body.HasContractOnSystem;
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.LaborerStatusCode = Request.Body.LaborerStatusCode;
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.EntryDate = Request.Body.EntryDate;
		SET OutputRoot.XMLNSC.CheckTCLaborerEligibilityRq.Body.ter:TermContLabEligRequestRequest.par:termContLabEligRequest.termContLabEligRequest.HasPendingCSRequest = Request.Body.HasPendingCSRequest;
--			PROPAGATE TO TERMINAL 'out1';
--        	RETURN FALSE;
--	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
