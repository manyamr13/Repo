BROKER SCHEMA com.qiwa.esb
path Qiwa.Framework.Lib;


CREATE COMPUTE MODULE ValidateEmployerEligibilityFinalExit_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		  -- 	save the input message and headers
		SET Environment.Variables.Properties = InputRoot.Properties;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.Variables.XMLNSC = InputRoot.XMLNSC; 
	    SET Environment.Variables.Request = InputRoot.XMLNSC.ValidateEmployerEligibilityFinalExitRq;  
		-- Reference the property file 
        DECLARE loadProperties REFERENCE TO Environment.Properties.ValidateEmployerEligibilityFinalExit.ValidateEmployerEligibilityFinalExitFlow.Variables; 
		DECLARE InHeaderRef  REFERENCE TO Environment.Variables.Request.Header;  
		-- set headers to outputroot
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD 	  = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 	  = Environment.Variables.MQRFH2;
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ValidateEmployerEligibilityFinalExitRs NAME 'Header'; 
		DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ValidateEmployerEligibilityFinalExitRs.Header;
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ValidateEmployerEligibilityFinalExitRs NAME 'Body'; 
		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.ValidateEmployerEligibilityFinalExitRs.Body;  
		
		DECLARE ResultID INTEGER;
		--Call SP   Qiwa_CheckLaborerAndUnifiedNumber 
        SET ResultID = Qiwa_CheckLaborerAndUnifiedNumber (  
			                                    OutBodyRef.IDNumber,  -- LaborerIdNo 
			                                    OutBodyRef.NationalUnifiedNumber,
			                                    Environment.Variables.LaborerList[]);   
		DECLARE CheckResultID  INTEGER;	                                    
		-- if laborer exist =1 and unified number=1 proceed to next sp
	    IF  Environment.Variables.LaborerList.LaborerExist = 1 AND Environment.Variables.LaborerList.UnifiedNumberExist=1 THEN	
	    	RETURN TRUE; 
	    END IF;                                     
		--IF laborer exist =0 exit floe and sen 1003
 		IF  Environment.Variables.LaborerList.LaborerExist = 0 THEN   
 		 CALL Create_esbXML_Response_Header(loadProperties.Variables.Error1003,InHeaderRef,OutHeaderRef); 
        -- if laborer exist =1 and unified number=0 send 1004
 		ELSEIF   Environment.Variables.LaborerList.LaborerExist = 1 AND Environment.Variables.LaborerList.UnifiedNumberExist= 0 THEN
 		CALL Create_esbXML_Response_Header(loadProperties.Variables.Error1004,InHeaderRef,OutHeaderRef);  
 		END IF; 	
	    	
--	    
--		SET CheckResultID   = Check_ActiveContract ( OutBodyRef.IDNumber,
--		    										 Environment.Variables.OutList[]);
--		     								   
----		if active contract=1 or is employee transfer  =1 send 1002
--      IF Environment.Variables.OutList.HasActiveContract=1 OR Environment.Variables.OutList.IsEmployeeTransferAppliedfortheemployee= 1 THEN  
--      CALL Create_esbXML_Response_Header(loadProperties.Variables.Error1002,InHeaderRef,OutHeaderRef);  
--      ELSEIF  Environment.Variables.OutList.HasActiveContract=0 AND Environment.Variables.OutList.IsEmployeeTransferAppliedfortheemployee= 0 THEN  
--	  CALL Create_esbXML_Response_Header(loadProperties.Variables.Error1001,InHeaderRef,OutHeaderRef);   
----if active contract=0 AND is employee transfer  =0 send 1001
-- 	   END IF; 
		RETURN FALSE; 
	END;
												 
CREATE PROCEDURE Qiwa_CheckLaborerAndUnifiedNumber  (
IN  LaborerIdNo    CHARACTER ,			
IN	UnifiedNumber  CHARACTER)	 				

RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1 
EXTERNAL NAME "dbo.Qiwa_CheckLaborerAndUnifiedNumber";
--
--
-- CREATE PROCEDURE Check_ActiveContract  (IN  LaborerIdNumber   CHARACTER )			 				
--
--RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1 
--EXTERNAL NAME "dbo.Check_ActiveContract";
		
 
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
