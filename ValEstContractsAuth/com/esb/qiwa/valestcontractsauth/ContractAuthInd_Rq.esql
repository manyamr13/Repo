BROKER SCHEMA com.esb.qiwa.valestcontractsauth


CREATE COMPUTE MODULE ContractAuthIndRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
		
		IF EXISTS(Environment.Properties.ValEstContractsAuth.HTTP_INT_ValEstContractsAuthFlow[]) THEN
			SET Environment.Properties.ValEstContractsAuth.HTTP_ValEstContractsAuthFlow =
			Environment.Properties.ValEstContractsAuth.HTTP_INT_ValEstContractsAuthFlow;
			DELETE FIELD Environment.Properties.ValEstContractsAuth.HTTP_INT_ValEstContractsAuthFlow;
		END IF;
				
		-- declare input header and body
		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.ValidateEstablishmentContractsAuthenticationRq.Header;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.ValidateEstablishmentContractsAuthenticationRq.Body;
		   
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.ValEstContractsAuth.HTTP_ValEstContractsAuthFlow.Variables; 
		
		-- declare env variables  
		 
		SET Environment.Variables.Properties = InputRoot.Properties;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.Variables.XMLNSC = InputRoot.XMLNSC;
 
		-- declare output
		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
		SET OutputRoot.XMLNSC.ContractAuthenticationIndicatorRq.Header = rInHeaderRef;
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ContractAuthenticationIndicatorRq.Header;
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ContractAuthenticationIndicatorRq NAME 'Body';
		DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.ContractAuthenticationIndicatorRq.Body;
		SET rOutHeaderRef.ServiceCode = loadedPropertiesRef.ServiceCode; 
		SET rOutHeaderRef.ChannelId = loadedPropertiesRef.ChannelId;
		-- prepare body
		
		SET rOutBodyRef.LaborOfficeId = rInBodyRef.LaborOfficeId;
		SET rOutBodyRef.SequenceNumber  = rInBodyRef.SequenceNumber;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = loadedPropertiesRef.AuthURL;  
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE; 