BROKER SCHEMA com.qiwa.esb.updatecontractdetails
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE UpdateContractDetailsFlow_DBCALL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Declarations
		DECLARE EV REFERENCE TO Environment.Variables;
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.UpdateContractDetails.UpdateContractDetailsFlow.Variables;
		DECLARE rInBodyRef REFERENCE TO EV.XMLNSC.UpdateContractDetailsRq.Body;
		DECLARE rInHeaderRef REFERENCE TO EV.XMLNSC.UpdateContractDetailsRq.Header;
		--Setting Output Properties
		SET OutputRoot.Properties = EV.Properties;
		SET OutputRoot.MQMD = EV.MQMD;
		SET OutputRoot.MQRFH2 = EV.MQRFH2;
		--Creating Output Header
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.UpdateContractDetailsRs NAME 'Header';
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.UpdateContractDetailsRs.Header;
		-- Calculating Values for Update_Contract SP
		DECLARE Allowances, AddedClauses, AdditionalAllowancesList CHARACTER;
		SET Environment.XmlObject VALUE = NULL;
		DECLARE xmlObj reference to Environment.XmlObject;
		--CREATE XML object XMLNSC Domain for Allowances
		CREATE FIRSTCHILD of Environment DOMAIN 'XMLNSC' NAME 'xml';
		DECLARE index INT 1;
		DECLARE p_Allowances, p_AddedClauses, p_AdditionalItems INTEGER ;
		IF EXISTS(rInBodyRef.ContractDetails.Allowances.AllowancesItem[]) THEN
			DECLARE AllowancesList INTEGER CARDINALITY(rInBodyRef.ContractDetails.Allowances.AllowancesItem[]);

			WHILE index <= AllowancesList DO
				SET xmlObj.ClausesList.AllowancesList.AllowanceItem[index].Key = rInBodyRef.ContractDetails.Allowances.AllowancesItem[index].Key;
				SET xmlObj.ClausesList.AllowancesList.AllowanceItem[index].Value = rInBodyRef.ContractDetails.Allowances.AllowancesItem[index].Value;
				SET index = index + 1;
			END WHILE;

			SET Environment.xml.ClausesList = xmlObj.ClausesList;
			SET Environment.xml.ClausesList = CAST(ASBITSTREAM(Environment.xml CCSID GetDefaultCharacterSet() ) AS CHARACTER CCSID GetDefaultCharacterSet());
			SET Allowances = CAST(Environment.xml.ClausesList AS CHARACTER);
			SET p_Allowances = '1';
		ELSE
			SET Allowances = NULL;
			SET p_Allowances = '0';
		END IF;

		SET index = 1;
		SET Environment.XmlObject = NULL;
		DECLARE xmlObj2 reference to Environment.XmlObject2;
		SET Environment.xml = NULL;
		--CREATE XML object XMLNSC Domain AddedClauses
		CREATE FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
		IF EXISTS(rInBodyRef.ContractDetails.AddedClauses.AddedClausesItem[]) THEN
			DECLARE AddedClausesList INTEGER CARDINALITY(rInBodyRef.ContractDetails.AddedClauses.AddedClausesItem[]);

			WHILE index <= AddedClausesList DO
				SET xmlObj2.ClausesList.AddedClausesList.ClauseItem[index].Key = rInBodyRef.ContractDetails.AddedClauses.AddedClausesItem[index].Key;
				SET xmlObj2.ClausesList.AddedClausesList.ClauseItem[index].Value = rInBodyRef.ContractDetails.AddedClauses.AddedClausesItem[index].Value;
				SET index = index + 1;
			END WHILE;

			SET Environment.xml.ClausesList = xmlObj2.ClausesList;
			SET Environment.xml.ClausesList = CAST(ASBITSTREAM(Environment.xml CCSID GetDefaultCharacterSet() ) AS CHARACTER CCSID GetDefaultCharacterSet());
			SET AddedClauses = CAST(Environment.xml.ClausesList AS CHARACTER);
			SET p_AddedClauses = '1';
		ELSE
			SET AddedClauses = NULL;
			SET p_AddedClauses = '0';
		END IF;

		SET index = 1;
		SET Environment.XmlObject = NULL;
		DECLARE xmlObj3 reference to Environment.XmlObject3;
		SET Environment.xml = NULL;
		--CREATE XML object XMLNSC Domain AdditionalAllowancesList
		CREATE FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
		IF EXISTS(rInBodyRef.ContractDetails.AdditionalAllowancesList.Item[]) THEN
			DECLARE AdditionalAllowances INTEGER CARDINALITY(rInBodyRef.ContractDetails.AdditionalAllowancesList.Item[]);

			WHILE index <= AdditionalAllowances DO
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].BenefitNameAr = rInBodyRef.ContractDetails.AdditionalAllowancesList.Item[index].BenefitNameAr;
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].BenefitNameEn = rInBodyRef.ContractDetails.AdditionalAllowancesList.Item[index].BenefitNameEn;
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].Amount = rInBodyRef.ContractDetails.AdditionalAllowancesList.Item[index].Amount;
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].AmountType = rInBodyRef.ContractDetails.AdditionalAllowancesList.Item[index].AmountType;
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].Frequency = rInBodyRef.ContractDetails.AdditionalAllowancesList.Item[index].Frequency;
				SET index = index + 1;
			END WHILE;

			SET Environment.xml.AddtionalItemsList = xmlObj3.AddtionalItemsList;
			SET Environment.xml.AddtionalItemsList = CAST(ASBITSTREAM(Environment.xml CCSID GetDefaultCharacterSet() ) AS CHARACTER CCSID GetDefaultCharacterSet());
			SET AdditionalAllowancesList = CAST(Environment.xml.AddtionalItemsList AS CHARACTER);
			SET p_AdditionalItems = '1';
		ELSE
			SET AdditionalAllowancesList = NULL;
			SET p_AdditionalItems = '0';
		END IF;
		-- Setting StatusId value based one business requirements
		DECLARE StatusId INTEGER;
		IF Environment.Variables.DB.ResultSet.StatusId IN ( loadedPropertiesRef.StatusId06, loadedPropertiesRef.StatusId15 ) THEN
			SET StatusId = CAST(loadedPropertiesRef.StatusId20 AS INTEGER);
		ELSEIF
			Environment.Variables.DB.ResultSet.StatusId = loadedPropertiesRef.StatusId12 THEN
			SET StatusId = CAST(loadedPropertiesRef.StatusId12 AS INTEGER);
		ELSEIF
			Environment.Variables.DB.ResultSet.StatusId IN ( loadedPropertiesRef.StatusId04, loadedPropertiesRef.StatusId08 ) THEN
			SET StatusId= CAST(loadedPropertiesRef.StatusId05 AS INTEGER);
		ELSEIF
			Environment.Variables.DB.ResultSet.StatusId = loadedPropertiesRef.StatusId19 AND ( Environment.Variables.DB.ResultSet.RelatedToId IN ( loadedPropertiesRef.RelatedToId01, loadedPropertiesRef.RelatedToId02, loadedPropertiesRef.RelatedToId05, loadedPropertiesRef.RelatedToId07, loadedPropertiesRef.RelatedToId08, loadedPropertiesRef.RelatedToId09 )) THEN
			SET StatusId= CAST(loadedPropertiesRef.StatusId05 AS INTEGER);
		END IF;

		SET Environment.Variables.StatusId = StatusId;


		IF Environment.Variables.DB.ResultSet.StatusId = loadedPropertiesRef.StatusId15 THEN -- QIP-3358
			-- If CurrentStartDate is BEFORE OriginalStartDate then return Error
			IF EXISTS(rInBodyRef.ContractDetails.StartDate.HijriDate[]) AND EXISTS(Environment.Variables.DB.ResultSet.HijriStartDate_Original[])THEN
				-- Validation for Hijri Date
				IF rInBodyRef.DateTypeId = loadedPropertiesRef.One AND CAST(rInBodyRef.ContractDetails.StartDate.HijriDate AS INTEGER) < CAST (Environment.Variables.DB.ResultSet.HijriStartDate_Original AS INTEGER) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.LessDate; --E0000921
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
			ELSE
				-- Validation for Gregorian Date
				--PROD Fix 22-01-2024
				DECLARE CurrentStartDateG DATE CAST (CAST(rInBodyRef.ContractDetails.StartDate.GregDate AS TIMESTAMP) AS DATE );
				DECLARE OriginalStartDateG DATE CAST (CAST(Environment.Variables.DB.ResultSet.GregorianStartDate_Original AS TIMESTAMP ) AS  DATE );

				IF rInBodyRef.DateTypeId = loadedPropertiesRef.Two AND CAST(CurrentStartDateG AS DATE ) < CAST (OriginalStartDateG AS DATE ) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.LessDate; --E0000921
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
			END IF;
		END IF;
		-- If contract status is NOT 15 and ContractDetails.CurrentStartDate.Hijri/Greg is NOT NULL then send value received from Input
		DECLARE statusCode CHARACTER Environment.Variables.DB.ResultSet.StatusId ;

		IF EXISTS(rInBodyRef.ContractDetails.StartDate.HijriDate[]) AND (statusCode <> loadedPropertiesRef.StatusId15) THEN
			SET Environment.Variables.OriginalStartDateH = rInBodyRef.ContractDetails.StartDate.HijriDate;
		ELSE
			SET Environment.Variables.OriginalStartDateH VALUE = NULL;
		END IF;

		IF EXISTS(rInBodyRef.ContractDetails.StartDate.GregDate[]) AND (statusCode <> loadedPropertiesRef.StatusId15) THEN
			SET Environment.Variables.OriginalStartDateG = rInBodyRef.ContractDetails.StartDate.GregDate;
		ELSE
			SET Environment.Variables.OriginalStartDateG VALUE = NULL;
		END IF;

		DECLARE Result, RESULT, ResultUpdate INTEGER;
		IF Environment.Variables.DB.ResultSet.StatusId IN (loadedPropertiesRef.StatusId06, loadedPropertiesRef.StatusId15) THEN
			SET Result = Contract_History_Create (
			CAST(rInBodyRef.ContractId AS INT));

			IF Result <> 0 THEN
				ROLLBACK;
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.HistoryError;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;

			END IF;
		END IF;
		-- Call SP Update_Contract

		SET RESULT = Update_Contract (
		CAST(rInBodyRef.ContractId AS INT),
		CAST(rInBodyRef.LaborOfficeId AS INT),
		CAST(rInBodyRef.SequenceNumber AS INT),
		CAST(rInBodyRef.RequesterDetails.RequesterIdNo AS CHAR),
		CAST(rInBodyRef.RequesterDetails.RequesterUserId AS INT),
		CAST(rInBodyRef.RequesterDetails.RequesterName AS CHAR),
		COALESCE(rInBodyRef.RequesterDetails.RequesterRole,NULL),
		COALESCE(CAST(rInBodyRef.EstablishmentEmail AS CHAR),NULL),
		COALESCE(CAST(rInBodyRef.LaborerEmail AS CHAR),NULL),
		COALESCE(CAST(rInBodyRef.LaborerMobileNumber AS CHAR),NULL),
		COALESCE(CAST(rInBodyRef.Nationality AS INT),NULL),
		COALESCE(CAST(rInBodyRef.Gender AS INT),NULL),
		COALESCE(CAST(rInBodyRef.Religion AS INT),NULL),
		COALESCE(CAST(rInBodyRef.MaritalStatus AS INT),NULL),
		CAST(rInBodyRef.EducationId AS INTEGER),
		CAST(rInBodyRef.SpecialtyId AS INT),
		CAST(rInBodyRef.WorkLocationId AS INT),
		CAST(rInBodyRef.IBAN AS CHARACTER),
		COALESCE(CAST(rInBodyRef.ContractDetails.LaborerJobNumber AS CHAR),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.JobTitle.JobTitleAr AS CHAR),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.JobTitle.JobTitleEng AS CHAR),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.ContractTypeId AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.ContractDurationId AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.ContractPeriod AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.StartDate.HijriDate AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.StartDate.GregDate AS TIMESTAMP),NULL),
		COALESCE(CAST(Environment.Variables.OriginalStartDateH AS INT),NULL),
		COALESCE(CAST(Environment.Variables.OriginalStartDateG AS TIMESTAMP),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.WorkingHoursTypeId AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.DaysPerWeek AS INTEGER),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.HoursPerDay AS INTEGER),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.HoursPerWeek AS INTEGER),NULL),
		CAST(rInBodyRef.ContractDetails.SalaryTypeId AS INT),
		COALESCE(CAST(rInBodyRef.ContractDetails.Salary AS CHARACTER),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.SalaryFrequency AS INTEGER),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.PercentageReasonAR AS CHARACTER),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.PercentageReasonEN AS CHARACTER),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.ProbationPeriod AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.VacationPeriod AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.NoticePeriod AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.RenewalStatusId AS INT),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.OptionalArticles.Period AS INTEGER),NULL),
		COALESCE(rInBodyRef.ContractDetails.OptionalArticles.WorkField,NULL),
		COALESCE(rInBodyRef.ContractDetails.OptionalArticles.Location,NULL),
		COALESCE(CAST(rInBodyRef.LanguageId AS INT),NULL),
		COALESCE(CAST(rInBodyRef.DateTypeId AS INT),NULL),
		COALESCE(CAST(rInBodyRef.UpdateReason AS INTEGER),NULL),
		COALESCE(CAST(rInBodyRef.ReasonText AS CHAR),NULL),
		StatusId,
		CAST(loadedPropertiesRef.TerminateAllSC AS INTEGER),
 		CAST(rInBodyRef.ContractDetails.ProbationTerminationRight AS INTEGER),
		COALESCE(CAST(rInHeaderRef.TransactionId AS INT),NULL));


		IF RESULT <> CAST(loadedPropertiesRef.spResultSuccess AS INTEGER) THEN
			ROLLBACK;
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.UpdateCtrtFailed; --E0001545
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSE
			IF EXISTS(rInBodyRef.ContractDetails.Allowances.AllowancesItem[]) OR
				EXISTS(rInBodyRef.ContractDetails.AddedClauses.AddedClausesItem[]) OR
				EXISTS(rInBodyRef.ContractDetails.AdditionalAllowancesList.Item[]) THEN

				SET ResultUpdate = ContractDetails_Update (
				CAST(rInBodyRef.ContractId AS INT),
				Allowances,
				AddedClauses,
				AdditionalAllowancesList,
				CAST(rInBodyRef.ContractDetails.DeleteAllAllowances AS INT),
				CAST(rInBodyRef.ContractDetails.DeleteAllAddedClauses AS INT),
				CAST(rInBodyRef.ContractDetails.DeleteAllAdditionalAllowances AS INT));

				IF ResultUpdate <> 0 THEN
					ROLLBACK;
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.UpdateFailed; -- E0000219
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;


			END IF;
			-- CREATE SUCCESS Response
			COMMIT;
			CALL CREATE_esbXML_Response_Header(GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);
			PROPAGATE TO TERMINAL 'out' DELETE NONE ;

		END IF;

		DECLARE GOSIRes INTEGER ContractGOSIReplica_Create (CAST(rInBodyRef.ContractId AS INT),
		StatusId ,
		1) ;

		IF GOSIRes <> 0 THEN
			SET OutputRoot.XMLNSC.data.CNC.GOSIRep = rInBodyRef.ContractId;
		END IF;

		DECLARE GOSIUpdateRes INTEGER;
		IF (CAST(Environment.Variables.StatusId AS INT) IN (5, 20)) THEN
			-- Call SP ContractReplica_CreateOrUpdate

			SET GOSIUpdateRes = ContractReplica_CreateOrUpdate (
			CAST(rInBodyRef.ContractId AS INT),
			COALESCE(CAST(rInBodyRef.LaborerEmail AS CHAR),NULL),
			COALESCE(CAST(rInBodyRef.LaborerMobileNumber AS CHAR),NULL),
			COALESCE(CAST(rInBodyRef.Nationality AS INT),NULL),
			COALESCE(CAST(rInHeaderRef.UserInfo.IDNumber AS INT),NULL));
		END IF;


		IF GOSIUpdateRes<>0 THEN
			SET OutputRoot.XMLNSC.data.CNC.NotifiRep = rInBodyRef.ContractId;
		END IF ;

		IF EXISTS(OutputRoot.XMLNSC.data.CNC[])THEN

			DELETE FIELD OutputRoot.XMLNSC.UpdateContractDetailsRs;
			PROPAGATE TO TERMINAL 'out2' DELETE NONE ;
		END IF;
		COMMIT;
		RETURN FALSE;


	END;

	CREATE PROCEDURE Update_Contract(IN ContractId INT,
	IN LaborOfficeId INT,
	IN SequenceNumber INT,
	IN RequesterIdNumber CHARACTER,
	IN RequesterUserId INT,
	IN RequesterName CHARACTER,
	IN RequesterRole CHARACTER,
	IN EstablishmentEmail CHARACTER,
	IN LaborerEmail CHARACTER,
	IN LaborerMobileNumber CHARACTER,
	IN NationalityId INT,
	IN GenderId INT,
	IN ReligionId INT,
	IN MaritalStatusId INT,
	IN EducationId INT,
	IN SpecialityId INT,
	IN WorklocationId INT,
	IN IBAN CHARACTER,
	IN LaborerJobNumber CHARACTER,
	IN JobTitleAr CHARACTER,
	IN JobTitleEn CHARACTER,
	IN ContractTypeId INT,
	IN ContractDurationId INT,
	IN ContractPeriod INT,
	IN HijriStartDate INT,
	IN GregorianStartDate TIMESTAMP,
	IN HijriStartDate_Original INT,
	IN GregorianStartDate_Original TIMESTAMP,
	IN WorkingHoursTypeId INT,
	IN DaysPerWeek INT,
	IN HoursPerDay INT,
	IN HoursPerWeek INT,
	IN SalaryTypeId INT,
	IN Salary CHARACTER,
	IN SalaryFrequency INT,
	IN PercentageReasonAr CHARACTER,
	IN PercentageReasonEn CHARACTER,
	IN ProbationPeriod INT,
	IN VacationPeriod INT,
	IN NoticePeriod INT,
	IN RenewalStatusId INT,
	IN Period INT,
	IN WorkField CHARACTER,
	IN Location CHARACTER,
	IN LanguageId INT,
	IN DateTypeId INT,
	IN UpdateContractReasonId INT,
	IN RejectionDescription CHARACTER,
	IN StatusId INT,
	IN TerminateAllSC INT,
  	IN ProbationTerminationRightCode INT,
	IN MWTransactionId INT)
	RETURNS INTEGER LANGUAGE DATABASE EXTERNAL NAME "dbo.Update_Contract";

	CREATE PROCEDURE ContractDetails_Update (
	IN p_ContractId INT ,
	IN p_Allowances CHAR ,
	IN p_AddedClauses CHAR ,
	IN p_AdditionalItems CHAR,
	IN p_AllowancesDelete INT,
	IN p_AddedClausesDelete INT,
	IN p_AdditionalItemsDelete INT)
	RETURNS INTEGER LANGUAGE DATABASE EXTERNAL NAME "dbo.ContractDetails_Update";

	CREATE PROCEDURE Contract_History_Create (
	IN p_ContractId INT )
	RETURNS INTEGER LANGUAGE DATABASE EXTERNAL NAME "dbo.Contract_History_Create";

	CREATE PROCEDURE ContractReplica_CreateOrUpdate (
	IN p_ContractId INT ,
	IN p_LaborerEmail CHAR ,
	IN p_LaborerMobileNumber CHAR ,
	IN p_NationalityId INT ,
	IN p_CreatedOrModifiedBy INT)
	RETURNS INTEGER LANGUAGE DATABASE EXTERNAL NAME "dbo.ContractReplica_CreateOrUpdate";

	CREATE PROCEDURE ContractGOSIReplica_Create (IN ContractId INTEGER,
	IN StatusId INTEGER,
	IN IsUpdate INTEGER)
	RETURNS INTEGER LANGUAGE DATABASE
	EXTERNAL NAME "dbo.ContractGOSIReplica_Create";

END MODULE;
