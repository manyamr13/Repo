BROKER SCHEMA com.qiwa.esb.updatecontractdetails


CREATE COMPUTE MODULE PrepareRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		-- Declarations
		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.UpdateContractDetailsRq.Header;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.UpdateContractDetailsRq.Body;
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.UpdateContractDetails.UpdateContractDetailsFlow.Variables;

		SET Environment.Variables.Properties = InputRoot.Properties;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.Variables.XMLNSC = InputRoot.XMLNSC;
		
		-- Check IF IDNumber not exists
		IF rInHeaderRef.UserInfo.IDNumber IS NULL OR rInHeaderRef.UserInfo.IDNumber= '' THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.NoIdNumber;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;	

		-- Calculating Greg Expiry Date and validating with Contract Period	
		IF ((CAST(rInBodyRef.ContractDetails.ContractDurationId AS INT) = CAST(loadedPropertiesRef.ContractDurationIdOne AS INTEGER)) AND rInBodyRef.ContractDetails.ContractPeriod IS NOT NULL) THEN
			IF (EXISTS(rInBodyRef.ContractDetails.CurrentStartDate.GregDate[]) AND EXISTS(rInBodyRef.ContractDetails.CurrentExpiryDate.GregDate[])) THEN
				SET Environment.Variables.CurrentStartDate = CAST(CAST(rInBodyRef.ContractDetails.CurrentStartDate.GregDate AS TIMESTAMP) AS DATE FORMAT loadedPropertiesRef.TmpStmpFormat);
				SET Environment.Variables.CurrentExpiryDate = CAST(CAST(rInBodyRef.ContractDetails.CurrentExpiryDate.GregDate AS TIMESTAMP) AS DATE FORMAT loadedPropertiesRef.TmpStmpFormat);			
				SET Environment.Variables.tempDate = CAST(Environment.Variables.CurrentStartDate AS DATE) + CAST(CAST(rInBodyRef.ContractDetails.ContractPeriod AS INT) AS INTERVAL MONTH); 
				SET Environment.Variables.tempDate = CAST(Environment.Variables.tempDate AS DATE) - CAST(1 AS INTERVAL DAY); 
				
				IF (Environment.Variables.tempDate <> Environment.Variables.CurrentExpiryDate) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.CPValidation; -- E0000959
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
			END IF;		
		END IF;	
		
		-- Check Salary Percentage Reason
		IF (rInBodyRef.ContractDetails.SalaryTypeId = CAST(loadedPropertiesRef.SalaryTypeIdTwo AS INTEGER) AND (rInBodyRef.ContractDetails.PercentageReasonEN IS NULL OR rInBodyRef.ContractDetails.PercentageReasonAR IS NULL)) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.PercentageMissing; -- E0000776
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;

		END IF;	
		
		--validate ContractPeriod
		IF CAST(rInBodyRef.ContractDetails.ContractDurationId AS INT) = CAST(loadedPropertiesRef.ContractDurationIdOne AS INTEGER) AND (  rInBodyRef.ContractDetails.ContractPeriod IS NULL) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ContractPeriodMissing; -- E0001495
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		--validate ExpiryDate
		IF CAST(rInBodyRef.ContractDetails.ContractDurationId AS INT) = CAST(loadedPropertiesRef.ContractDurationIdOne AS INTEGER) AND (rInBodyRef.ContractDetails.CurrentExpiryDate.HijriDate IS NULL AND rInBodyRef.ContractDetails.CurrentExpiryDate.GregDate IS NULL) THEN
		SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ExpiryDateMissing; -- E0001497
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		--Check working hours type and corresponding data
		IF (rInBodyRef.ContractDetails.WorkingHoursTypeId = CAST(loadedPropertiesRef.WorkingHoursTypeIdOne AS INTEGER) AND rInBodyRef.ContractDetails.HoursPerWeek IS NULL) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.WeekMissing; --E0000388
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		--Check working hours type and corresponding data
		IF (rInBodyRef.ContractDetails.WorkingHoursTypeId = CAST(loadedPropertiesRef.WorkingHoursTypeIdTwo AS INTEGER) AND (rInBodyRef.ContractDetails.DaysPerWeek IS NULL OR rInBodyRef.ContractDetails.HoursPerDay IS NULL)) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.DayMissing; --E0000389
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		--Check UpdateReason
		IF (rInBodyRef.UpdateReason = CAST(loadedPropertiesRef.UpdateReason AS INTEGER) AND rInBodyRef.ReasonText IS NULL) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ReasonMissing; --E0000775
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		-- check if UpdateRequesterDetails.IdNumber matches with IdNumber from Header
		IF CAST(rInHeaderRef.UserInfo.IDNumber AS INT) <> CAST(rInBodyRef.UpdateRequesterDetails.IdNumber AS INT) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.RequesterIDError;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		
		-- 	DateTypeId is mandatory if Original or Current Start or Expiry date is present	
		IF (EXISTS(rInBodyRef.ContractDetails.CurrentStartDate[]) 	OR 	
			EXISTS(rInBodyRef.ContractDetails.CurrentExpiryDate[]) OR 	
			EXISTS(rInBodyRef.ContractDetails.OriginalStartDate[]) OR 	
			EXISTS(rInBodyRef.ContractDetails.OriginalEndDate[])) AND NOT EXISTS(rInBodyRef.DateTypeId[]) THEN
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.DateTypeIdMis; --E0000004
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
		END IF;	
		
		
		-- DateTypeId =1 and Hijri Date is missing, throw error	
		-- 	DateTypeId is mandatory if Original or Current Start or Expiry date is present	
		IF (rInBodyRef.DateTypeId = loadedPropertiesRef.DateTypeIdOne) THEN
			IF (EXISTS(rInBodyRef.ContractDetails.CurrentStartDate[]) AND NOT EXISTS(rInBodyRef.ContractDetails.CurrentStartDate.HijriDate[]))
			OR 	(EXISTS(rInBodyRef.ContractDetails.CurrentExpiryDate[]) AND NOT EXISTS(rInBodyRef.ContractDetails.CurrentExpiryDate.HijriDate[]))
			OR 	(EXISTS(rInBodyRef.ContractDetails.OriginalStartDate[]) AND NOT EXISTS(rInBodyRef.ContractDetails.OriginalStartDate.HijriDate[]))
			OR 	(EXISTS(rInBodyRef.ContractDetails.OriginalEndDate[]) AND NOT EXISTS(rInBodyRef.ContractDetails.OriginalEndDate.HijriDate[])) THEN
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.MissingData; --E0000004
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF;	
		
		-- DateTypeId =2 and Greg Date is missing, throw error	
		-- 	DateTypeId is mandatory if Original or Current Start or Expiry date is present
		ELSEIF (rInBodyRef.DateTypeId = loadedPropertiesRef.DateTypeIdTwo) THEN
			IF (EXISTS(rInBodyRef.ContractDetails.CurrentStartDate[]) AND NOT EXISTS(rInBodyRef.ContractDetails.CurrentStartDate.GregDate[]))
			OR 	(EXISTS(rInBodyRef.ContractDetails.CurrentExpiryDate[]) AND NOT EXISTS(rInBodyRef.ContractDetails.CurrentExpiryDate.GregDate[]))
			OR 	(EXISTS(rInBodyRef.ContractDetails.OriginalStartDate[]) AND NOT EXISTS(rInBodyRef.ContractDetails.OriginalStartDate.GregDate[]))
			OR 	(EXISTS(rInBodyRef.ContractDetails.OriginalEndDate[]) AND NOT EXISTS(rInBodyRef.ContractDetails.OriginalEndDate.GregDate[])) THEN
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.MissingData; --E0000004
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF;	
		END IF;	
		

		
		-- validating Allowances NameAr,NameEn parameter
		IF (EXISTS (rInBodyRef.ContractDetails.Allowances.AllowancesItem[])) THEN
			DECLARE J INT 1;
			FOR allowRef AS rInBodyRef.ContractDetails.Allowances.AllowancesItem[] DO
				IF allowRef.AllowanceType = 3 AND (allowRef.NameAr IS NULL OR allowRef.NameEn IS NULL) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ErrNameClauses; --E0000728
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
				
				IF allowRef.AmountType IS NOT NULL AND (allowRef.Amount IS NULL) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.AmountError;  --E0001582
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
				
				SET J = J + 1;
			END FOR;
		END IF;
		
		--Validating  OptionalClausesType parameters
		IF (EXISTS (rInBodyRef.ContractDetails.OptionalClauses.OptionalClausesItem[])) THEN
			DECLARE I INT 1;
			FOR source AS rInBodyRef.ContractDetails.OptionalClauses.OptionalClausesItem[] DO
				IF source.OptionalClausesType IN (1,2) AND (source.Period IS NULL OR source.Field IS NULL OR source.Location IS NULL) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ErrOptionalClauses; --E0000729
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
				IF source.OptionalClausesType =3 AND (source.FirstParty IS NULL OR source.SecondParty IS NULL) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ErrPartyClauses; --E0000730
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
				SET I = I + 1;
			END FOR;
		END IF;
		
		-- ProbationPeriod it couldnâ€™t be more than 90 days
		IF CAST(rInBodyRef.ContractDetails.ProbationPeriod AS INTEGER) > CAST(loadedPropertiesRef.ProbationPeriod AS INTEGER) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ProbationPeriodError;  -- E0000169
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		IF CAST(rInBodyRef.ContractDetails.ProbationPeriod AS INT) > CAST(loadedPropertiesRef.Zero AS INT) AND NOT EXISTS(rInBodyRef.ContractDetails.ProbationTerminationRight[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ProbTermRightError; -- E0001557
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		IF CAST(rInBodyRef.ContractDetails.VacationPeriod as INTEGER)< CAST(loadedPropertiesRef.VacationPeriod as INTEGER) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.VacationPeriodError;  -- E0000170
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		-- NoticPeriod it couldnâ€™t more than than 120 days
		IF CAST(rInBodyRef.ContractDetails.NoticePeriod as INTEGER)> CAST(loadedPropertiesRef.NoticePeriod as INTEGER) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.NoticPeriodError; -- E0001498 
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		-- If ContractDurationId = 2 & SalaryFrequency = 1 
		-- then NoticePeriod must be >= 60 else error E0001290
		IF (CAST(rInBodyRef.ContractDetails.ContractDurationId AS INTEGER) = 2) AND
			(CAST(rInBodyRef.ContractDetails.SalaryFrequency AS INTEGER) = 1) AND
			 CAST(rInBodyRef.ContractDetails.NoticePeriod AS INTEGER) < CAST(loadedPropertiesRef.NoticePeriodSixty AS INTEGER) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.NoticePeriodSixtyDaysMinError; -- E0001290
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;	
		END IF; 
		
		-- If ContractDurationId = 2 & SalaryFrequency = 2 
		-- then NoticePeriod must be >= 30 , else return error E0001291
		IF (CAST(rInBodyRef.ContractDetails.ContractDurationId AS INTEGER) = 2) AND
		 	(CAST(rInBodyRef.ContractDetails.SalaryFrequency AS INTEGER) = 2) AND
	 	     CAST(rInBodyRef.ContractDetails.NoticePeriod AS INTEGER) < CAST(loadedPropertiesRef.NoticePeriodThirty AS INTEGER) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.NoticePeriodThirtyDaysMinError; -- E0001291
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;	
		
		IF (EXISTS (rInBodyRef.ContractDetails.Allowances[]) AND CAST(rInBodyRef.ContractDetails.DeleteAllAllowances AS INT)= CAST(loadedPropertiesRef.IsDeletedFlag AS INTEGER))
				OR (EXISTS(rInBodyRef.ContractDetails.OptionalClauses[]) AND CAST(rInBodyRef.ContractDetails.DeleteAllOptionalClauses AS INT)= CAST(loadedPropertiesRef.IsDeletedFlag AS INT))
 				OR (EXISTS(rInBodyRef.ContractDetails.AdditionalTerms[]) AND CAST(rInBodyRef.ContractDetails.DeleteAllAdditionalTerms AS INT )= CAST (loadedPropertiesRef.IsDeletedFlag AS INTEGER))THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Deleteflagvalue; -- E0001559
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		
		IF CONTAINS(UPPER(loadedPropertiesRef.ExcludedChannelId), UPPER(rInHeaderRef.ChannelId)) THEN
			PROPAGATE TO TERMINAL 'out2';
			RETURN FALSE;

		ELSE
			-- Prepare Check User Eligibility Request
			SET OutputRoot.Properties = Environment.Variables.Properties;
			SET OutputRoot.MQMD = Environment.Variables.MQMD;
			SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;
	
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
			SET OutputRoot.XMLNSC.CheckUserEligibilityRq.Header = rInHeaderRef;
			DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Header;
	
			CREATE LASTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Body';
			DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Body;
	
			SET rOutHeaderRef.ServiceCode = loadedPropertiesRef.ServiceCodeChkUserEligibility; 
			SET rOutHeaderRef.ChannelId = loadedPropertiesRef.ChannelId;
	
			SET rOutBodyRef.UserId = CAST(rInHeaderRef.UserInfo.UserId AS INTEGER);
			SET rOutBodyRef.IdNo = CAST(rInHeaderRef.UserInfo.IDNumber AS CHARACTER);
			SET rOutBodyRef.LaborOfficeId = CAST(rInBodyRef.LaborOfficeId AS INTEGER);
			SET rOutBodyRef.EstablishmentSequence = CAST(rInBodyRef.SequenceNumber AS INTEGER);
			SET rOutBodyRef.ServiceId = CAST(loadedPropertiesRef.ServiceId AS INTEGER);
			-- Call CheckUserEligibility
			RETURN TRUE;
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;