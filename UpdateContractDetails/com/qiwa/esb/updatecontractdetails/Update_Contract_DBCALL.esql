


BROKER SCHEMA com.qiwa.esb.updatecontractdetails
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE Update_Contract_DBCALL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Declarations
		DECLARE EV REFERENCE TO Environment.Variables;
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.UpdateContractDetails.UpdateContractDetailsFlow.Variables;
		DECLARE rInBodyRef REFERENCE TO EV.XMLNSC.UpdateContractDetailsRq.Body;
		DECLARE rInHeaderRef REFERENCE TO EV.XMLNSC.UpdateContractDetailsRq.Header;
		--Setting Output Properties
		SET OutputRoot.Properties = EV.Properties;
		SET OutputRoot.MQMD = EV.MQMD;
		SET OutputRoot.MQRFH2 = EV.MQRFH2;
		--Creating Output Header
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.UpdateContractDetailsRs NAME 'Header';
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.UpdateContractDetailsRs.Header;
		--Validate OriginalStartDate and OriginalEndDate with Contract Status
		IF (EXISTS(rInBodyRef.ContractDetails.OriginalEndDate[]) OR EXISTS(rInBodyRef.ContractDetails.OriginalStartDate[])) AND Environment.Variables.DB.ResultSet.StatusId = loadedPropertiesRef.StatusId15 THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ErrOriginStartDate; --E0000704
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		--Validate if StatusId is 19 and RelatedToId is (3,4,6)
		IF Environment.Variables.DB.ResultSet.StatusId = loadedPropertiesRef.StatusId19 AND ( Environment.Variables.DB.ResultSet.RelatedToId IN ( loadedPropertiesRef.RelatedToId03, loadedPropertiesRef.RelatedToId04, loadedPropertiesRef.RelatedToId06 )) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.TransferRequestError; --E0001004
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		-- Calculating Values for Update_Contract SP
		DECLARE AllowancesList, OptionalClausesList, AdditionalTermsList CHARACTER ;
		DECLARE i INT 1;

		CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' NAME 'AllowanceTypeList';
		CREATE LASTCHILD OF Environment.AllowanceTypeList NAME 'AllowancesList';
		CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' NAME 'OptionalClauses';
		CREATE LASTCHILD OF Environment.OptionalClauses NAME 'OptionalClausesList';
		CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' NAME 'AdditionalTerms';
		CREATE LASTCHILD OF Environment.AdditionalTerms NAME 'AdditionalTermsList';


		IF EXISTS(rInBodyRef.ContractDetails.Allowances.AllowancesItem[]) THEN
			--Create XML object XMLNSC Domain for Allowances List
			DECLARE OutAllownaceListRef REFERENCE TO Environment.AllowanceTypeList.AllowancesList;
			DECLARE rAllowances REFERENCE TO rInBodyRef.ContractDetails.Allowances.AllowancesItem[1];

			WHILE LASTMOVE(rAllowances) DO
				SET OutAllownaceListRef.AllowanceItem[i].BenefitNameAr = rAllowances.NameAr ;
				SET OutAllownaceListRef.AllowanceItem[i].BenefitNameEn = rAllowances.NameEn ;
				SET OutAllownaceListRef.AllowanceItem[i].AllowanceTypeId = rAllowances.AllowanceType ;
				SET OutAllownaceListRef.AllowanceItem[i].AmountType = rAllowances.AmountType ;
				SET OutAllownaceListRef.AllowanceItem[i].Frequency = rAllowances.Frequency ;
				SET OutAllownaceListRef.AllowanceItem[i].IsProvidedByEstablishment = rAllowances.IsProvidedByEstablishment ;
				SET OutAllownaceListRef.AllowanceItem[i].Amount = rAllowances.Amount;

				MOVE rAllowances NEXTSIBLING REPEAT NAME;
				SET i = i + 1;
			END WHILE;
			SET AllowancesList = CAST(ASBITSTREAM( Environment.AllowanceTypeList CCSID GetDefaultCharacterSet()) AS CHARACTER CCSID GetDefaultCharacterSet());
		ELSE
			SET AllowancesList = NULL;
		END IF;



		IF EXISTS(rInBodyRef.ContractDetails.OptionalClauses.OptionalClausesItem[]) THEN
			--Create XML object XMLNSC Domain for OptionalClauses XML List
			DECLARE OutOptionClsLstRef REFERENCE TO Environment.OptionalClauses.OptionalClausesList;
			DECLARE rClauses REFERENCE TO rInBodyRef.ContractDetails.OptionalClauses.OptionalClausesItem[1];
			SET i = 1;

			WHILE LASTMOVE(rClauses) DO
				SET OutOptionClsLstRef.OptionalClauseItem[i].Field = rClauses.Field ;
				SET OutOptionClsLstRef.OptionalClauseItem[i].Location = rClauses.Location ;
				SET OutOptionClsLstRef.OptionalClauseItem[i].Period = rClauses.Period ;
				SET OutOptionClsLstRef.OptionalClauseItem[i].FirstParty = rClauses.FirstParty ;
				SET OutOptionClsLstRef.OptionalClauseItem[i].SecondParty = rClauses.SecondParty ;
				SET OutOptionClsLstRef.OptionalClauseItem[i].OptionalClausesTypeId = rClauses.OptionalClausesType ;

				MOVE rClauses NEXTSIBLING REPEAT NAME;
				SET i = i+1;
			END WHILE;
			SET OptionalClausesList = CAST(ASBITSTREAM( Environment.OptionalClauses CCSID GetDefaultCharacterSet()) AS CHARACTER CCSID GetDefaultCharacterSet());
		ELSE
			SET OptionalClausesList = NULL;
		END IF;

		IF EXISTS(Environment.AdditionalTerms.AdditionalTermsList[]) THEN
			-- Create XML object XMLNSC Domain for Additional Terms XML List
			DECLARE OutAddTermsList REFERENCE TO Environment.AdditionalTerms.AdditionalTermsList;
			DECLARE rAdditionalTerms REFERENCE TO rInBodyRef.ContractDetails.AdditionalTerms.AdditionalTermsItem[1];
			SET i = 1;

			WHILE LASTMOVE(rAdditionalTerms) DO
				SET OutAddTermsList.AdditionalTermItem[i].NameEn = rAdditionalTerms.NameEn ;
				SET OutAddTermsList.AdditionalTermItem[i].NameAr = rAdditionalTerms.NameAr ;
				SET i = i+1;
				MOVE rAdditionalTerms NEXTSIBLING REPEAT NAME;
			END WHILE;
			SET AdditionalTermsList = CAST(ASBITSTREAM( Environment.AdditionalTerms CCSID GetDefaultCharacterSet()) AS CHARACTER CCSID GetDefaultCharacterSet());
		ELSE
			SET AdditionalTermsList = NULL;
		END IF;
		-- Terms Comma seperated string
		DECLARE ids CHAR ;
		SET ids = CAST(rInBodyRef.ContractDetails.Terms.TermsItem[1].TermId AS CHAR);
		DECLARE rIDs REFERENCE TO rInBodyRef.ContractDetails.Terms.TermsItem[2];

		WHILE LASTMOVE(rIDs) DO
			SET ids = ids || ',' || CAST(rIDs.TermId AS CHAR);
			MOVE rIDs NEXTSIBLING REPEAT NAME;
		END WHILE;
		-- Setting StatusId value based on business requirements
		DECLARE StatusId, ProbationPeriod  INTEGER;
		IF Environment.Variables.DB.ResultSet.StatusId IN ( loadedPropertiesRef.StatusId06, loadedPropertiesRef.StatusId15 ) THEN
			SET StatusId = CAST(loadedPropertiesRef.StatusId20 AS INTEGER);
		ELSEIF
			Environment.Variables.DB.ResultSet.StatusId = loadedPropertiesRef.StatusId12 THEN
			SET StatusId = CAST(loadedPropertiesRef.StatusId12 AS INTEGER);
		ELSEIF
			Environment.Variables.DB.ResultSet.StatusId IN ( loadedPropertiesRef.StatusId04, loadedPropertiesRef.StatusId08 ) THEN
			SET StatusId= CAST(loadedPropertiesRef.StatusId05 AS INTEGER);
		ELSEIF
			Environment.Variables.DB.ResultSet.StatusId = loadedPropertiesRef.StatusId19 AND ( Environment.Variables.DB.ResultSet.RelatedToId IN ( loadedPropertiesRef.RelatedToId01, loadedPropertiesRef.RelatedToId02, loadedPropertiesRef.RelatedToId05, loadedPropertiesRef.RelatedToId07, loadedPropertiesRef.RelatedToId08, loadedPropertiesRef.RelatedToId09 )) THEN
			SET StatusId= CAST(loadedPropertiesRef.StatusId05 AS INTEGER);
		END IF;

		SET Environment.Variables.StatusId = StatusId;
		-- if OriginalStartDate from input if NULL then use OriginalStartDate from Get_ContractDetails
		IF NOT EXISTS(rInBodyRef.ContractDetails.OriginalStartDate[]) THEN
			SET Environment.Variables.OriginalStartDateG = Environment.Variables.DB.ResultSet.GregorianStartDate_Original;
			SET Environment.Variables.OriginalStartDateH = Environment.Variables.DB.ResultSet.HijriStartDate_Original;
		ELSE
			SET Environment.Variables.OriginalStartDateG =rInBodyRef.ContractDetails.OriginalStartDate.GregDate ;
			SET Environment.Variables.OriginalStartDateH =rInBodyRef.ContractDetails.OriginalStartDate.HijriDate ;
		END IF;

		IF Environment.Variables.DB.ResultSet.StatusId = loadedPropertiesRef.StatusId15 THEN -- QIP-3358
			-- If CurrentStartDate is BEFORE OriginalStartDate then return Error
			IF EXISTS(rInBodyRef.ContractDetails.CurrentStartDate.HijriDate[]) AND EXISTS(Environment.Variables.OriginalStartDateH[])THEN
				-- Validation for Hijri Date
				IF CAST(rInBodyRef.ContractDetails.CurrentStartDate.HijriDate AS INTEGER) < CAST (Environment.Variables.OriginalStartDateH AS INTEGER) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.LessDate; --E0000921
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
			ELSE
				-- Validation for Gregorian Date
				SET Environment.Variables.OriginalStartDateG = CAST(Environment.Variables.OriginalStartDateG AS TIMESTAMP); -- FORMAT 'yyyy-MM-dd HH:mm:ss');
				SET Environment.Variables.CurrentStartDateG = CAST(rInBodyRef.ContractDetails.CurrentStartDate.GregDate AS TIMESTAMP); --FORMAT 'yyyy-MM-dd HH:mm:ss');

				DECLARE CurrentStartDateG DATE CAST (Environment.Variables.CurrentStartDateG AS DATE );
				DECLARE OriginalStartDateG DATE CAST (Environment.Variables.OriginalStartDateG AS DATE );

				IF CAST(CurrentStartDateG AS DATE ) < CAST (OriginalStartDateG AS DATE ) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.LessDate; --E0000921
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
			END IF;
			-- If the ExtendProbationPeriod in the request = 1 “True“
			IF CAST(rInBodyRef.ContractDetails.ExtendProbationPeriod AS INTEGER) = CAST(loadedPropertiesRef.ProbationPeriodOne AS INTEGER) THEN
				-- Check if IsProbationPeriodExtended returned from SP = 1
				IF CAST(Environment.Variables.DB.ResultSet.IsProbationPeriodExtended AS CHAR) = CAST(loadedPropertiesRef.ProbationPeriodTrue AS CHAR) THEN
					-- Return error E0001601
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ProbationPeriodExtended; --E0001601;
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
					-- check the ProbationPeriod returned from the SP, if it's = 0 then return error
				ELSEIF CAST(Environment.Variables.DB.ResultSet.ProbationPeriod AS INTEGER) = CAST(loadedPropertiesRef.ProbationPeriodZero AS INTEGER) THEN
					-- Return error E0001602
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ZeroProbationValue; -- E0001602;
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
					-- check the ProbationPeriod returned from the SP, if it's > 90 then return error E0001603
				ELSEIF CAST(Environment.Variables.DB.ResultSet.ProbationPeriod AS INTEGER) > CAST(loadedPropertiesRef.ProbationPeriodNinty AS INTEGER) THEN
					-- Return error E0001603
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ProbationValueMaxNinty; -- E0001603
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
					-- check the ProbationPeriod returned from SP if it's >0 & <= 90 &
					-- ((SP GregorianStartDate_Original +(SP ProbationPeriod * 2)) > SP GregorianExpiryDate) & ((SP GregorianStartDate_Original +(SP ProbationPeriod * 2)) > input ExpiryDate.GregDate (if it’s not null)) then return error E0001604
				ELSEIF CAST(Environment.Variables.DB.ResultSet.ProbationPeriod AS INTEGER) > CAST(loadedPropertiesRef.ProbationPeriodZero AS INTEGER)
					AND CAST(Environment.Variables.DB.ResultSet.ProbationPeriod AS INTEGER) <= CAST(loadedPropertiesRef.ProbationPeriodNinty AS INTEGER) THEN
					-- Calculate GregorianStartDate_Original + (ProbationPeriod * 2)
					-- Check if ((GregorianStartDate_Original + (ProbationPeriod * 2)) > GregorianExpiryDate)
					-- Check if ((GregorianStartDate_Original + (ProbationPeriod * 2)) > input ExpiryDate.GregDate)
					-- If conditions met, return error E0001604
					DECLARE GregProb TIMESTAMP;
					SET GregProb = CAST(Environment.Variables.DB.ResultSet.GregorianStartDate_Original AS TIMESTAMP)
					+ CAST(CAST(Environment.Variables.DB.ResultSet.ProbationPeriod AS INTEGER) * CAST(loadedPropertiesRef.ProbationPeriodTwo AS INTEGER) AS INTERVAL DAY);
					IF GregProb > CAST(Environment.Variables.DB.ResultSet.GregorianExpiryDate AS TIMESTAMP) AND
						GregProb > CAST(rInBodyRef.ContractDetails.CurrentExpiryDate.GregDate AS TIMESTAMP) THEN
						SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ProbationPeriodExpiredDate; -- E0001604
						PROPAGATE TO TERMINAL 'out1';
						RETURN FALSE;
					END IF;
				END IF;
			END IF;
			--If the returned LaborerTypeId = 2 & ContractDetails.OccupationId is present in the request, then return error
			IF (CAST(Environment.Variables.DB.ResultSet.LaborerTypeId AS INT)= CAST(loadedPropertiesRef.Two AS INTEGER) AND EXISTS(rInBodyRef.ContractDetails.OccupationId[]))THEN
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.AllowedForSuadiLaborer; -- E0001638
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF;
		END IF;
		
		IF CAST(rInBodyRef.ContractDetails.ExtendProbationPeriod AS INTEGER) = CAST(loadedPropertiesRef.ProbationPeriodOne AS INTEGER) THEN
				SET ProbationPeriod = CAST(rInBodyRef.ContractDetails.ProbationPeriod AS INT) * 2;
		ELSE
			SET ProbationPeriod = CAST(rInBodyRef.ContractDetails.ProbationPeriod AS INT);
		END IF;
		
		-- If contract status is NOT 15 and ContractDetails.CurrentStartDate.Hijri/Greg is NOT NULL then send value received from Input
		DECLARE statusCode CHARACTER Environment.Variables.DB.ResultSet.StatusId ;
		IF EXISTS(rInBodyRef.ContractDetails.CurrentStartDate.HijriDate[]) AND (statusCode <> loadedPropertiesRef.StatusId15) THEN
			SET Environment.Variables.OriginalStartDateH = rInBodyRef.ContractDetails.CurrentStartDate.HijriDate;
		END IF;

		IF EXISTS(rInBodyRef.ContractDetails.CurrentStartDate.GregDate[]) AND (statusCode <> loadedPropertiesRef.StatusId15) THEN
			SET Environment.Variables.OriginalStartDateG = rInBodyRef.ContractDetails.CurrentStartDate.GregDate;
		END IF;

		DECLARE Result, RESULT, ResultUpdate INTEGER;
		IF Environment.Variables.DB.ResultSet.StatusId IN (loadedPropertiesRef.StatusId06, loadedPropertiesRef.StatusId15) THEN
			SET Result = Contract_History_Create (
			CAST(rInBodyRef.ContractId AS INT));

			IF Result <> 0 THEN
				ROLLBACK;
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.HistoryError;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;

			END IF;
		END IF;
		-- Call SP Update_Contract
		SET RESULT = Update_Contract( CAST(rInBodyRef.ContractId AS INTEGER),
		CAST(rInBodyRef.LaborOfficeId AS INTEGER),
		CAST(rInBodyRef.SequenceNumber AS INTEGER),
		rInBodyRef.RequesterDetails.RequesterIdNo,
		CAST(rInBodyRef.RequesterDetails.RequesterUserId AS INTEGER),
		rInBodyRef.RequesterDetails.RequesterName,
		COALESCE(rInBodyRef.RequesterDetails.RequesterRole, NULL),
		COALESCE(rInBodyRef.EstablishmentEmail, NULL),
		COALESCE(rInBodyRef.LaborerEmail, NULL),
		COALESCE(rInBodyRef.LaborerMobileNumber, NULL),
		COALESCE(CAST(rInBodyRef.Nationality AS INT), NULL),
		COALESCE(CAST(rInBodyRef.Gender AS INT), NULL),
		COALESCE(CAST(rInBodyRef.Religion AS INT), NULL),
		COALESCE(CAST(rInBodyRef.MaritalStatus AS INT), NULL),
		CAST(rInBodyRef.EducationId AS INTEGER),
		CAST(rInBodyRef.SpecialtyId AS INTEGER ),
		CAST(rInBodyRef.WorkLocationId AS INTEGER ),
		CAST(rInBodyRef.IBAN AS CHARACTER ),
		COALESCE(rInBodyRef.ContractDetails.LaborerJobNumber, NULL),
		COALESCE(rInBodyRef.ContractDetails.JobTitle.JobTitleAr, NULL),
		COALESCE(rInBodyRef.ContractDetails.JobTitle.JobTitleEng, NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.ContractTypeId AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.ContractDurationId AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.ContractPeriod AS INTEGER),NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.CurrentStartDate.HijriDate AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.CurrentStartDate.GregDate AS TIMESTAMP), NULL),
		COALESCE(CAST(Environment.Variables.OriginalStartDateH AS INTEGER), NULL),
		COALESCE(CAST(Environment.Variables.OriginalStartDateG AS TIMESTAMP), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.WorkingHoursTypeId AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.DaysPerWeek AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.HoursPerDay AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.HoursPerWeek AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.SalaryTypeId AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.Salary AS CHARACTER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.SalaryFrequency AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.PercentageReasonEN AS CHARACTER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.PercentageReasonAR AS CHARACTER), NULL),
		COALESCE(ProbationPeriod,NULL), 
		COALESCE(CAST(rInBodyRef.ContractDetails.VacationPeriod AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.NoticePeriod AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.RenewalStatusId AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.LanguageId AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.DateTypeId AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.UpdateReason AS INTEGER), NULL),
		StatusId,
		COALESCE(CAST(rInBodyRef.ContractDetails.ProbationTerminationRight AS INT), NULL),
		CAST(rInHeaderRef.TranscationId AS CHARACTER),
		COALESCE(CAST(rInBodyRef.ContractDetails.OccupationId AS INTEGER),NULL),
		COALESCE(rInBodyRef.ReasonText, NULL) ,
		COALESCE(CAST(rInBodyRef.UpdateRequesterDetails.IdNumber AS INTEGER), NULL),
		COALESCE(CAST(rInBodyRef.UpdateRequesterDetails.Name AS CHAR), NULL),
		COALESCE(CAST(rInBodyRef.ContractDetails.ExtendProbationPeriod AS INT), NULL)
		);


		COMMIT;
		IF RESULT <> CAST(loadedPropertiesRef.spResultSuccess AS INTEGER) THEN
			ROLLBACK;
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.UpdateFailed; -- E0000219RETURN TRUE;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSE
			IF EXISTS(rInBodyRef.ContractDetails.Allowances.AllowancesItem[]) OR
				EXISTS(rInBodyRef.ContractDetails.OptionalClauses.OptionalClausesItem[]) OR
				EXISTS(rInBodyRef.ContractDetails.AdditionalTerms.AdditionalTermsItem[]) OR
				EXISTS(rInBodyRef.ContractDetails.Terms.TermsItem[]) THEN

				SET ResultUpdate = ContractDetails_Update (
				CAST(rInBodyRef.ContractId AS INT),
				AllowancesList,
				OptionalClausesList,
				AdditionalTermsList,
				ids,
				CAST(rInBodyRef.ContractDetails.DeleteAllAllowances AS INT),
				CAST(rInBodyRef.ContractDetails.DeleteAllOptionalClauses AS INT),
				CAST(rInBodyRef.ContractDetails.DeleteAllAdditionalTerms AS INT));


				IF ResultUpdate <> 0 THEN
					ROLLBACK;
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.UpdateFailed; -- E0000219
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
			END IF;
			-- Create SUCCESS Response
			CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);
			PROPAGATE TO TERMINAL 'out' DELETE NONE ;
		END IF;

		DECLARE GOSIRes INTEGER ContractGOSIReplica_Create (CAST(rInBodyRef.ContractId AS INT),
		StatusId ,
		1) ;

		IF GOSIRes <> 0 THEN
			SET OutputRoot.XMLNSC.data.CNC.GOSIRep = rInBodyRef.ContractId;
		END IF;

		DECLARE GOSIUpdateRes INTEGER;
		IF (CAST(Environment.Variables.StatusId AS INT) IN (5, 20)) THEN
			-- Call SP ContractReplica_CreateOrUpdate

			SET GOSIUpdateRes = ContractReplica_CreateOrUpdate (
			CAST(rInBodyRef.ContractId AS INT),
			COALESCE(CAST(rInBodyRef.LaborerEmail AS CHAR),NULL),
			COALESCE(CAST(rInBodyRef.LaborerMobileNumber AS CHAR),NULL),
			COALESCE(CAST(rInBodyRef.Nationality AS INT),NULL),
			COALESCE(CAST(rInHeaderRef.UserInfo.IDNumber AS INT),NULL));
		END IF;


		IF GOSIUpdateRes<>0 THEN
			SET OutputRoot.XMLNSC.data.CNC.NotifiRep = rInBodyRef.ContractId;
		END IF ;

		IF EXISTS(OutputRoot.XMLNSC.data.CNC[])THEN

			DELETE FIELD OutputRoot.XMLNSC.UpdateContractDetailsRs;
			PROPAGATE TO TERMINAL 'out2' DELETE NONE ;
		END IF;
		COMMIT;
		RETURN FALSE;

	END;

	CREATE PROCEDURE Update_Contract(IN p_ContractId INTEGER ,
	IN p_LaborOfficeId INTEGER ,
	IN p_SequenceNumber INTEGER ,
	IN p_RequesterIdNumber CHARACTER ,
	IN p_RequesterUserId INTEGER ,
	IN p_RequesterName CHARACTER ,
	IN p_RequesterRole CHARACTER ,
	IN p_EstablishmentEmail CHARACTER ,
	IN p_LaborerEmail CHARACTER,
	IN p_LaborerMobileNumber CHARACTER,
	IN p_NationalityId INTEGER ,
	IN p_GenderId INTEGER ,
	IN p_ReligionId INTEGER ,
	IN p_MaritalStatusId INTEGER,
	IN p_EducationId INTEGER ,
	IN p_SpecialityId INTEGER,
	IN p_WorklocationId INTEGER,
	IN p_IBAN CHARACTER,
	IN p_LaborerJobNumber CHARACTER,
	IN p_JobTitleAr CHARACTER,
	IN p_JobTitleEn CHARACTER,
	IN p_ContractTypeId INTEGER ,
	IN p_ContractDurationId INTEGER ,
	IN p_ContractPeriod INTEGER ,
	IN p_HijriStartDate INTEGER ,
	IN p_GregorianStartDate TIMESTAMP,
	IN p_HijriOriginalStartDate INTEGER,
	IN p_GregorianOriginalStartDate TIMESTAMP,
	IN p_WorkingHoursTypeId INTEGER ,
	IN p_DaysPerWeek INTEGER,
	IN p_HoursPerDay INTEGER,
	IN p_HoursPerWeek INTEGER,
	IN p_SalaryTypeId INTEGER,
	IN p_Salary CHARACTER,
	IN p_SalaryFrequency INTEGER,
	IN p_PercentageReasonEn CHARACTER,
	IN p_PercentageReasonAr CHARACTER,
	IN p_ProbationPeriod INTEGER ,
	IN p_VacationPeriod INTEGER ,
	IN p_NoticePeriod INTEGER ,
	IN p_RenewalStatusId INTEGER ,
	IN p_LanguageId INTEGER ,
	IN p_DateTypeId INTEGER ,
	IN p_UpdateContractReasonId INTEGER ,
	IN p_StatusId INTEGER ,
	IN p_ProbationTerminationRightCode INTEGER,
	IN p_MWTransactionId CHARACTER,
	IN p_OccupationId INTEGER ,
	IN p_UpdateDescription CHARACTER,
	IN p_UpdateByIDNumber INTEGER ,
	IN p_UpdateByName CHARACTER,
	IN p_IsProbationPeriodExtended INTEGER
	)
	RETURNS INTEGER
	LANGUAGE DATABASE EXTERNAL NAME "dbo.Update_Contract";

	CREATE PROCEDURE ContractDetails_Update (
	IN p_ContractId INT ,
	IN p_Allowances CHAR ,
	IN p_OptionalClauses CHAR ,
	IN p_AdditionalTerms CHAR,
	IN p_Terms CHAR,
	IN p_AllowancesDelete INT,
	IN p_OptionalClausesDelete INT,
	IN p_AdditionalTermsDelete INT)
	RETURNS INTEGER LANGUAGE DATABASE EXTERNAL NAME "dbo.ContractDetails_Update";

	CREATE PROCEDURE Contract_History_Create (
	IN p_ContractId INT )
	RETURNS INTEGER LANGUAGE DATABASE EXTERNAL NAME "dbo.Contract_History_Create";

	CREATE PROCEDURE ContractReplica_CreateOrUpdate (
	IN p_ContractId INT ,
	IN p_LaborerEmail CHAR ,
	IN p_LaborerMobileNumber CHAR ,
	IN p_NationalityId INT ,
	IN p_CreatedOrModifiedBy INT)
	RETURNS INTEGER LANGUAGE DATABASE EXTERNAL NAME "dbo.ContractReplica_CreateOrUpdate";

	CREATE PROCEDURE ContractGOSIReplica_Create (IN ContractId INTEGER,
	IN StatusId INTEGER,
	IN IsUpdate INTEGER)
	RETURNS INTEGER LANGUAGE DATABASE
	EXTERNAL NAME "dbo.ContractGOSIReplica_Create";

END MODULE;