BROKER SCHEMA com.qiwa.esb.getcontractslist


CREATE COMPUTE MODULE GetContractsListFlow_Check_Sub
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.GetContractsList.GetContractsListFlow;
		SET Environment.Variables.Properties = InputRoot.Properties;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.Variables.XMLNSC = InputRoot.XMLNSC;

		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;		


		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.GetContractsListRq.Header;
		DECLARE rInputBody REFERENCE TO InputRoot.XMLNSC.GetContractsListRq.Body;		
		--InputValidations
		--Check IdNumber if Not exsits
		IF NOT EXISTS( rInHeaderRef.UserInfo.IDNumber[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.NoIdNumber;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			--'Qiwa Individual' check
		ELSEIF rInHeaderRef.ChannelId = loadedPropertiesRef.Variables.Individual THEN
			IF NOT EXISTS( rInputBody.LaborerDetails.LaborerIdNo[] ) THEN
				--Missing Param --E0000772
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.NoLabId; --E0000772
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			ELSEIF (CAST (rInputBody.LaborerDetails.LaborerIdNo AS INT) = CAST (rInHeaderRef.UserInfo.IDNumber as int) ) THEN
				SET Environment.Variables.CheckUserEligibilityIsSkipped = 1;
				PROPAGATE TO TERMINAL 'out2';
				RETURN FALSE;
			ELSE
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.Error_Contract; --E0000545
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF ;
		ELSEIF (rInHeaderRef.ChannelId = loadedPropertiesRef.Variables.ChannelId OR rInHeaderRef.ChannelId = loadedPropertiesRef.Variables.unifiedPortal)THEN
			SET Environment.Variables.CheckUserEligibilityIsSkipped = 1;
			PROPAGATE TO TERMINAL 'out2';
			RETURN FALSE;
		
		ELSEIF rInHeaderRef.ChannelId = loadedPropertiesRef.Variables.Qiwa AND   (NOT EXISTS( rInputBody.EstablishmentDetails.LaborOfficeId []) OR NOT EXISTS( rInputBody.EstablishmentDetails.SequenceNumber [])) THEN
			
			--Missing Data
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.NoLabSeq; --E0000263
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		
		ELSE

			CREATE FIRSTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Header';
			DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Header;
			CREATE LASTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Body';
			DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Body;

			SET rOutHeaderRef=rInHeaderRef;

			SET rOutHeaderRef.ServiceCode = loadedPropertiesRef.Variables.CheckUserCode;
			SET rOutHeaderRef.ChannelId = loadedPropertiesRef.Variables.ChannelId;


			SET rOutBodyRef.UserId = rInHeaderRef.UserInfo.UserId;
			SET rOutBodyRef.IdNo = rInHeaderRef.UserInfo.IDNumber;
			SET rOutBodyRef.LaborOfficeId = rInputBody.EstablishmentDetails.LaborOfficeId;
			SET rOutBodyRef.EstablishmentSequence = rInputBody.EstablishmentDetails.SequenceNumber;
			SET rOutBodyRef.ServiceId = '18';

			RETURN TRUE;

		END IF;

	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;	


END MODULE;