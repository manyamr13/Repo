BROKER SCHEMA com.qiwa.esb.getcontlablist
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE Call_DB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Create reference to flow Environment.Properties
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.GetContLabList.HTTP_GetContLabListFlow.Variables;
		-- Create refrences for the header and body of the request
		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.GetContractLaborersListRq.Header;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.GetContractLaborersListRq.Body;
		
		-- Create refrences for the Properties and header of the response
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.GetContractLaborersListRs NAME 'Header';
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.GetContractLaborersListRs.Header;
		
		-- Declare LaborerIdNo in body and IdNumber in header
		DECLARE IDNoH INT CAST(rInHeaderRef.UserInfo.IDNumber AS INT) ; 
		
		-- Check if IdNumber exists
		IF NOT EXISTS(rInHeaderRef.UserInfo.IDNumber[]) THEN
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.NoIdNumber,rInHeaderRef,rOutHeaderRef);
		ELSE 
			-- Send all variables sent in the request and call procedure 
			CALL Contracts_LaborersList_Get(
											COALESCE(CAST(rInBodyRef.LaborOfficeId AS INTEGER),NULL),
											COALESCE(CAST(rInBodyRef.SequenceNumber AS INTEGER),NULL),  
											COALESCE(CAST(rInBodyRef.LaborerTypeId AS INTEGER),NULL),
											COALESCE(CAST(rInBodyRef.LaborerIdNo AS CHARACTER),NULL),
											COALESCE(CAST(rInBodyRef.LaborerFirstName AS CHARACTER),NULL),
											CAST(rInBodyRef.PageSize AS INTEGER),
											CAST(rInBodyRef.PageIndex AS INTEGER),
											Environment.Variables.DB.ResultSet[]);
			
			-- Check if record exists in DB
			IF EXISTS(Environment.Variables.DB.ResultSet[] ) THEN
				-- Prepare the response
				DECLARE rResult REFERENCE TO Environment.Variables.DB.ResultSet[1];
				CREATE LASTCHILD OF OutputRoot.XMLNSC.GetContractLaborersListRs NAME 'Body';
				DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC.GetContractLaborersListRs.Body;
				DECLARE i INTEGER 0;
				-- Loop on all records
				WHILE LASTMOVE(rResult) DO
					SET i = i + 1;
					SET OutRef.LaborersList.LaborerItem[i].LaborerIdNo VALUE = rResult.LaborerIdNo; 
					SET OutRef.LaborersList.LaborerItem[i].LaborerName VALUE = rResult.LaborerName;
					MOVE rResult NEXTSIBLING REPEAT NAME;
				END WHILE;
				SET OutRef.TotalRecordsCount VALUE = Environment.Variables.DB.ResultSet[1].TotalRecordsCount;
				-- Return success via response status
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);
			ELSE
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.Nodata,rInHeaderRef,rOutHeaderRef);
			END IF;
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	-- Procedure to Get Contracts list
	CREATE PROCEDURE Contracts_LaborersList_Get (IN p_LaborOfficeId INTEGER,
	IN p_SequenceNumber INTEGER, 
	IN p_LaborerTypeId INTEGER,
	IN p_LaborerIdNo CHARACTER,
	IN p_LaborerFirstName CHARACTER,
	IN p_PageSize INTEGER,
	IN p_PageIndex INTEGER) LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Contracts_LaborersList_Get";
END MODULE;