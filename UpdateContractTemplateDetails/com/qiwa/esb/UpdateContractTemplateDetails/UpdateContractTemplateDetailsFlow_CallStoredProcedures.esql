BROKER SCHEMA com.qiwa.esb.UpdateContractTemplateDetails
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE UpdateContractTemplateDetailsFlow_CallStoredProcedures
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF FIELDNAME(Environment.Variables) IS NULL THEN
			CREATE FIELD Environment.Variables;
		END IF;
		DECLARE EV REFERENCE TO Environment.Variables;
		-- set headers to out put root
		SET OutputRoot.Properties = EV.Properties;
		SET OutputRoot.MQMD = EV.MQMD;
		SET OutputRoot.MQRFH2 = EV.MQRFH2;
		-- refe to propreties and request header
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.UpdateContractTemplateDetails.UpdateContractTemplateDetailsFlow.Variables;
		DECLARE InHeadeRef REFERENCE TO EV.XMLNSC.UpdateContractTemplateDetailsRq.Header;
		-- create response Header
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.UpdateContractTemplateDetailsRs NAME 'Header';
		DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.UpdateContractTemplateDetailsRs.Header;
		-- ref to request
		DECLARE RequestRef REFERENCE TO EV.XMLNSC.UpdateContractTemplateDetailsRq.Body;

		DECLARE ResultID, Result INTEGER;

		DECLARE ClausesList, AdditionalItems , rTemplateDescription CHAR ;
		-- call Check_TemplateContracts
		SET ResultID = Check_TemplateContracts(CAST(RequestRef.TemplateId As INTEGER), EV.HasContracts[]);
		
		COMMIT; 
		-- check HasContracts is -1
		IF EV.HasContracts[1].HasContracts = loadedPropertiesRef.HasContractsMinusOne THEN 
			-- will return error invalid TemplateId
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.InvalidTemplateId,InHeadeRef,OutHeaderRef);
		ELSEIF EV.HasContracts[1].HasContracts = loadedPropertiesRef.HasContractsOne THEN 
			-- you canâ€™t update a template which contracts already were created on it
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.CannotUpdateTemplate,InHeadeRef,OutHeaderRef);			
		ELSEIF EV.HasContracts[1].HasContracts = loadedPropertiesRef.HasContractsZero THEN 
			-- Cast clauses list to XML characters 
			DECLARE i, j, k INT 1;

			CREATE FIELD EV.SPXML1;
			CREATE FIRSTCHILD OF EV.SPXML1 DOMAIN 'XMLNSC';
			FOR SOURCE1 AS RequestRef.ClausesList.AddedClauses[] DO 
				SET EV.SPXML1.XMLNSC.ClausesList.AddedClausesList.ClauseItem[j].Key = SOURCE1.Key;
				SET EV.SPXML1.XMLNSC.ClausesList.AddedClausesList.ClauseItem[j].Value = SOURCE1.Value;
				SET j = j + 1;
			END FOR;
			
			FOR SOURCE2 AS RequestRef.ClausesList.Allowances[] DO 
				SET EV.SPXML1.XMLNSC.ClausesList.AllowancesList.AllowanceItem[k].Key = SOURCE2.Key;
				SET EV.SPXML1.XMLNSC.ClausesList.AllowancesList.AllowanceItem[k].Value = SOURCE2.Value;
				SET k = k + 1;
			END FOR;
			
			--Check ClausesList is not null
			IF EXISTS(EV.SPXML1.XMLNSC.ClausesList[]) THEN
				SET ClausesList = CAST(ASBITSTREAM(EV.SPXML1.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);
			ELSE
				SET ClausesList = NULL ;
			END IF;

			CREATE FIELD EV.SPXML;
			CREATE FIRSTCHILD OF EV.SPXML DOMAIN 'XMLNSC';
			FOR SOURCE AS RequestRef.ContractDetails.AdditionalAllowancesList.Item[] DO
				SET EV.SPXML.XMLNSC.AddtionalItemsList.AddtionalItem[i].BenefitNameAr = SOURCE.BenefitNameAr;
				SET EV.SPXML.XMLNSC.AddtionalItemsList.AddtionalItem[i].BenefitNameEn = SOURCE.BenefitNameEn;
				SET EV.SPXML.XMLNSC.AddtionalItemsList.AddtionalItem[i].Amount = SOURCE.Amount;
				SET EV.SPXML.XMLNSC.AddtionalItemsList.AddtionalItem[i].AmountType = SOURCE.AmountType;
				SET EV.SPXML.XMLNSC.AddtionalItemsList.AddtionalItem[i].Frequency = SOURCE.Frequency;
				SET i = i + 1;
			END FOR;
			IF EXISTS(EV.SPXML.XMLNSC.AddtionalItemsList.AddtionalItem[]) THEN
				SET AdditionalItems = CAST(ASBITSTREAM(EV.SPXML.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);
			ELSE
				SET AdditionalItems = NULL;
			END IF;        		
			
			IF NOT EXISTS(RequestRef.TemplateDescription[])  THEN 
				SET rTemplateDescription = NULL;
			ELSE
				SET rTemplateDescription = COALESCE(RequestRef.TemplateDescription, '') ;
			END IF;
			SET Result = Update_ContractTemplate( CAST(RequestRef.TemplateId as INTEGER),
														CAST(RequestRef.EstablishmentDetails.LaborOfficeId as INTEGER),
														CAST(RequestRef.EstablishmentDetails.SequenceNumber as INTEGER),
														CAST(RequestRef.LanguageId as INTEGER),
														RequestRef.TemplateName ,
														rTemplateDescription ,
														InHeadeRef.UserInfo.IDNumber ,
														CAST(InHeadeRef.TransactionId as INTEGER),
														CAST(RequestRef.DateTypeId as INTEGER),
														ClausesList,
														CAST(RequestRef.EstablishmentDetails.EstablishmentId as INTEGER),
														CAST(RequestRef.EstablishmentDetails.UnifiedNumberId as INTEGER),
														CAST(RequestRef.EstablishmentDetails.EntityId as CHARACTER),
														CAST(RequestRef.EstablishmentDetails.EstablishmentNameAr as CHARACTER),
														CAST(RequestRef.EstablishmentDetails.EstablishmentNameEn as CHARACTER),
														CAST(RequestRef.EstablishmentDetails.EstablishmentEmail as CHARACTER),
														CAST(RequestRef.RequesterDetails.RequesterUserId as INTEGER),
														CAST(RequestRef.RequesterDetails.RequesterName as CHARACTER),
														CAST(RequestRef.LaborerDetails.LaborerIdNo as CHARACTER),
														CAST(RequestRef.LaborerDetails.LaborerName as CHARACTER),
														CAST(RequestRef.LaborerDetails.LaborerTypeId as INTEGER),
														CAST(RequestRef.LaborerDetails.LaborerIdExpiryDate as CHARACTER),
														CAST(RequestRef.LaborerDetails.LaborerEmail as CHARACTER),
														CAST(RequestRef.LaborerDetails.LaborerMobileNumber as CHARACTER),
														CAST(RequestRef.ContractDetails.JobTitle.JobTitleAr as CHARACTER),
														CAST(RequestRef.ContractDetails.JobTitle.JobTitleEng as CHARACTER),
														CAST(RequestRef.ContractDetails.LaborerJobNumber as INTEGER),
														CAST(RequestRef.ContractDetails.ProbationPeriod as INTEGER),
														CAST(RequestRef.ContractDetails.WorkingHoursTypeId as INTEGER),
														CAST(RequestRef.ContractDetails.VacationPeriod as INTEGER),
														CAST(RequestRef.ContractDetails.Salary as CHARACTER),
														CAST(RequestRef.ContractDetails.RenewalStatusId as INTEGER),
														CAST(RequestRef.ContractDetails.ContractTypeId as INTEGER),
														CAST(RequestRef.ContractDetails.ContractDurationId as INTEGER),
														CAST(RequestRef.ContractDetails.ContractPeriod as INTEGER), 
														CAST(RequestRef.ContractDetails.NoticePeriod as INTEGER),
														CAST(RequestRef.ContractDetails.StartDate.HijriDate as INTEGER),
														CAST(RequestRef.ContractDetails.StartDate.GregDate as CHARACTER),
														CAST(RequestRef.ContractDetails.ExpiryDate.HijriDate as INTEGER),
														CAST(RequestRef.ContractDetails.ExpiryDate.GregDate as CHARACTER),
														CAST(RequestRef.ContractDetails.SalaryFrequency as INTEGER),
														CAST(RequestRef.ContractDetails.HoursPerWeek as INTEGER),
														CAST(RequestRef.ContractDetails.DaysPerWeek as INTEGER),
														CAST(RequestRef.ContractDetails.HoursPerDay as INTEGER),
														CAST(RequestRef.ContractDetails.OptionalArticles.Period as INTEGER),
														CAST(RequestRef.ContractDetails.OptionalArticles.Location as CHARACTER),
														CAST(RequestRef.ContractDetails.OptionalArticles.WorkField as CHARACTER),
														AdditionalItems,
														CAST(RequestRef.ContractDetails.SalaryTypeId AS INT),
														RequestRef.ContractDetails.PercentageReasonAR,
														RequestRef.ContractDetails.PercentageReasonEN, 
  														CAST(RequestRef.ContractDetails.ProbationTerminationRight as INTEGER) 
														);
			COMMIT; 
			-- Check sp Status
			IF Result = loadedPropertiesRef.ResultZero THEN
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),InHeadeRef,OutHeaderRef);
			ELSE
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.FailedUpdateTemplateDetails,InHeadeRef,OutHeaderRef);
			END IF;

		END IF;
		RETURN TRUE;
	END;


CREATE PROCEDURE Check_TemplateContracts (IN TemplateId INTEGER ) RETURNS INTEGER 
LANGUAGE DATABASE DYNAMIC RESULT SETS 1	EXTERNAL NAME "dbo.Check_TemplateContracts";

CREATE PROCEDURE Update_ContractTemplate (IN TemplateId INTEGER,
												IN LaborOfficeId INTEGER,
												IN SequenceNumber INTEGER,
												IN LanguageId INTEGER,
												IN TemplateName CHARACTER,
												IN TemplateDescription CHARACTER,
												IN RequesterIdNo CHARACTER,
												IN MWTransactionId INTEGER,
												IN DateTypeId INTEGER,
												IN ClausesList CHARACTER,
												IN EstablishmentId INTEGER,
												IN UnifiedNumberId INTEGER,
												IN EntityId CHARACTER,
												IN EstablishmentNameAr CHARACTER,
												IN EstablishmentNameEn CHARACTER,
												IN EstablishmentEmail CHARACTER,
												IN RequesterUserId INTEGER,
												IN RequesterName CHARACTER,
												IN LaborerId CHARACTER,
												IN LaborerName CHARACTER,
												IN LaborerTypeId INTEGER,
												IN LaborerIdExpiryDate CHARACTER,
												IN LaborerEmail CHARACTER,
												IN LaborerMobileNumber CHARACTER,
												IN JobTitleAr CHARACTER,
												IN JobTitleEn CHARACTER,
												IN LaborerJobNumber INTEGER,
												IN ProbationPeriod INTEGER,
												IN WorkingHoursTypeId INTEGER,
												IN VacationPeriod INTEGER,
												IN Salary CHARACTER,
												IN RenewalStatusId INTEGER, 
												IN ContractTypeId INTEGER,
												IN ContractDurationId INTEGER,
												IN ContractPeriod INTEGER,
												IN NoticePeriod INTEGER,
												IN HijriStartDate INTEGER,
												IN GregorianStartDate CHARACTER,
												IN HijriExpiryDate INTEGER,
												IN GregorianExpiryDate CHARACTER,
												IN SalaryFrequency INTEGER,
												IN HoursPerWeek INTEGER,
												IN DaysPerWeek INTEGER,
												IN HoursPerDay INTEGER,
												IN Period INTEGER,
												IN Location CHARACTER,
												IN WorkField CHARACTER,
												IN AdditionalItems CHARACTER,
												IN SalaryTypeId INTEGER,
												IN PercentageReasonAr CHARACTER,
												IN PercentageReasonEn CHARACTER,
  												IN ProbationTerminationRightCode INTEGER
												) RETURNS INTEGER 
LANGUAGE DATABASE EXTERNAL NAME "dbo.Update_ContractTemplate";


	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
