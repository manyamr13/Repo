BROKER SCHEMA com.qiwa.esb.approverejectTCcancelationbyemployer
PATH Qiwa.Framework.Lib;


CREATE COMPUTE MODULE ApproveRejectTCCancelationByEmployerFlow_Check_Update
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--HEADERS COPYING
		 CALL CopyMessageHeaders();
		 
		  --DECLARE THE HEADER AND THE BODY OF THE ApproveRejectTCCancelationByEmployer REQUEST 
		DECLARE rInHeader REFERENCE TO Environment.Variables.Header; 
		DECLARE rInBody REFERENCE TO Environment.Variables.Body ; 
	   
	   	
	  	SET OutputRoot.Properties = Environment.Variables.Properties;
        SET OutputRoot.MQMD  = Environment.Variables.MQMD;
        SET OutputRoot.MQRFH2  = Environment.Variables.MQRFH2;
	
		--DECLEARING REFRENCE TO THE ApproveRejectTCCancelationByEmployer XML FLOW
		DECLARE propertiesRef  REFERENCE TO  Environment.Properties.ApproveRejectTCCancelationByEmployer.HTTP_ApproveRejectTCCancelationByEmployer.Variables;
		
		
	  
	  
	   --CREATE THE ApproveRejectTCCancelationByEmployerRs HEADER AND BODY  
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRs  NAME 'Header'; 
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRs  NAME 'Body';  
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRs.Header; 
		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRs.Body;
		
		
		SET rOutHeaderRef = rInHeader;
		
		--DECLARE U=INT TO STORE THE RETURN VALUE OF Update_TCCancelationRequest
	    DECLARE TOTAL INT 0;
	    
	    
	    --DECLARE CHAR TO STORE THE RESPONSE OF CheckUserEligibility SERVICE 
	    DECLARE CHECK CHAR;
	    
	    --SETTING THE RESULT FROM CheckUserEligibility TO CHECK PARAMETER TO ccheck ITS VALUE
	    SET CHECK = Environment.Variables.MWResponse.status;
	    
	    
	    --DECLARING PARAMETERS TO SENT TO Update_TCCancelationRequest PROCEDURE FOR UPDATING 
	    DECLARE CancelationRequestId INT ;
	    DECLARE IsApproved INT;
	    
	    DECLARE StatusId INT ;
	    DECLARE EmployerApproveRejDate TIMESTAMP ;
	    DECLARE LaborerApprovalRejDate TIMESTAMP ;
	    DECLARE RejectionReason CHAR;
	   
	    
	    --SET VALUES FROM ApproveRejectTCCancelationByEmployer REQUEST
		SET IsApproved =rInBody.IsApproved;
	    SET CancelationRequestId = rInBody.CancelationRequestId;
	      
	    --SET THE StatusId AND RejectionReason  VALUES ACCORDING TO IsApproved VALUE
	    IF IsApproved= 0 THEN
	    	SET StatusId=9;
	    	SET RejectionReason=rInBody.RejectionReason;
	    	
	    ELSEIF IsApproved= 1 THEN
	    	SET RejectionReason='';
	    	SET StatusId=7;
	    	
	    END IF;
	    
	    
	    
	    --DECLARE THE CURRENT DATE
	    DECLARE CurrentDate DATE CURRENT_DATE;   
	             	    
	   -- SETTING EmployerApproveRejDate EQUAL CURRENT DATE
	   SET EmployerApproveRejDate = cast (CurrentDate AS TIMESTAMP); 
	   
	   
	   -- IF error code retrieved from CheckUserEligibility then return an error indicates that the employer, 
	   -- doesnâ€™t have a privilege to approve or reject terminate contract cancellation request then exit the flow
	  
	     IF CHECK = 'E0000048' OR CHECK = 'E0000046' OR CHECK = 'E0000047' THEN  
	     	
	     	CALL Create_esbXML_Response_Header(propertiesRef.NO_Privilege_Error,rInHeader,rOutHeaderRef);
	    
	    ELSE
	    
	   CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInHeader,rOutHeaderRef);
	      -- UPDATE THE INFORMATION ACCORDING TO THE DECLARED PARAMETERS PREVIOUSLY 
	      
	     CALL Update_TCCancelationRequest (CancelationRequestId,    
								           StatusId,
								           EmployerApproveRejDate ,
								           LaborerApprovalRejDate,
								           RejectionReason,   
								    	   Environment.Variables.DB.ResultSet[])INTO TOTAL ; 
								    	   
								    		
	     END IF;  
		
		RETURN TRUE;
	END;
	
	

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

	 --  THE CREATE OF Update_TCCancelationRequest PROCEDURE 
    
	CREATE PROCEDURE Update_TCCancelationRequest (IN CancelationRequestId INT ,
												  IN StatusId INT,  
												  IN EmployerApproveRejDate TIMESTAMP,
												  IN LaborerApprovalRejDate TIMESTAMP, 
												  IN RejectionReason CHAR ) 
			 									  RETURNS INTEGER  
                                             
    LANGUAGE DATABASE DYNAMIC RESULT SETS 1  
    EXTERNAL NAME "dbo.Update_TCCancelationRequest";
    
END MODULE;
