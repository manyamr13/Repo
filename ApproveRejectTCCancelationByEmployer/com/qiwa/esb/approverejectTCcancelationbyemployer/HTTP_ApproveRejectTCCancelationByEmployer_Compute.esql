BROKER SCHEMA com.qiwa.esb.ApproveRejectTCCancelationByEmployer
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE HTTP_ApproveRejectTCCancelationByEmployer_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--HEADERS COPYING
		 CALL CopyMessageHeaders();
		 
		 
	--DECLARE THE HEADER AND THE BODY OF THE FILTER  
		DECLARE rInHeaderRef REFERENCE TO InputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRq.Header;
		DECLARE rInBodyRef REFERENCE TO InputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRq.Body;   
		
	 --SET THE HEADER AND BODY GLOBAL i.e ALL NODES CAN SEE IT
		SET Environment.Variables.Header = rInHeaderRef;
		SET Environment.Variables.Body = rInBodyRef; 
	
	    SET Environment.Variables.Properties = InputRoot.Properties;
        SET Environment.Variables.MQMD = InputRoot.MQMD;
        SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;    
        
			
			
		IF EXISTS(Environment.Properties.ApproveRejectTCCancelationByEmployer.HTTP_INT_ApproveRejectTCCancelationByEmployer[]) THEN
			
			set Environment.Properties.ApproveRejectTCCancelationByEmployer.HTTP_ApproveRejectTCCancelationByEmployer = 
				Environment.Properties.ApproveRejectTCCancelationByEmployer.HTTP_INT_ApproveRejectTCCancelationByEmployer;
				
			DELETE FIELD Environment.Properties.ApproveRejectTCCancelationByEmployer.HTTP_INT_ApproveRejectTCCancelationByEmployer;
		END IF;
			
			
			
	--DECLEARING REFRENCE TO THE ApproveRejectTCCancelationByEmployerFlow XML FLOW
	   DECLARE propertiesRef  REFERENCE TO Environment.Properties.ApproveRejectTCCancelationByEmployer.HTTP_ApproveRejectTCCancelationByEmployer.Variables; 
	
	
	
	--DECLARE ALL THE REQUEST PARAMETERS 
	
		DECLARE CancelationRequestId INT ; 
		DECLARE IsApproved INT;
		DECLARE RejectionReason  CHAR;
		
		
		DECLARE LaborerIdNo CHAR rInHeaderRef.UserInfo.IDNumber;
		 
		DECLARE Result INT 0 ;
		DECLARE TOTAL INT 0 ;
		DECLARE TotalRecordsCount  INT ;
		
		SET CancelationRequestId= rInBodyRef.CancelationRequestId;
		SET IsApproved =rInBodyRef.IsApproved;
		SET RejectionReason= rInBodyRef.RejectionReason; 
		
		   
	   --CREATE THE ApproveRejectTCCancelationByEmployerRs HEADER AND BODY  
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRs  NAME 'Header'; 
		CREATE LASTCHILD OF OutputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRs  NAME 'Body';  
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRs.Header; 
		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.ApproveRejectTCCancelationByEmployerRs.Body;
	    
	    
	    SET rOutHeaderRef =rInHeaderRef;
	    
		
	--CHECK IF THE IDNumber IN HEADER IS EXIST OR NOT 
	--IF NOT ERROR AND EXIST THE FLOW
			
		IF LaborerIdNo is NULL THEN
			
			CALL Create_esbXML_Response_Header (propertiesRef.MissingIdNumber,rInHeaderRef,rOutHeaderRef);
				 	     
		 	  	 propagate to terminal 'out1' ;
		 	  	 RETURN TRUE; 
		 	  	
		END IF;
 	  	
 	  	
 	  	
	-- IF IsApproved is NULL THE RejectionReason IS MANDATORY
 	  	
		IF IsApproved = 0 AND RejectionReason is NULL  THEN 
			
 	  	  CALL Create_esbXML_Response_Header( propertiesRef.RejectionReasonMissing ,rInHeaderRef,rOutHeaderRef);
 	       propagate to terminal 'out1' ;
		 	  	 RETURN TRUE; 
		 	  	
 	  	END IF;
 	  	

		    
	--DECLARE THE Search_TerminateContractRequests INPUT PARAMETERS
		DECLARE StatusIds CHAR '4';
		DECLARE PageSize INT 1;
		DECLARE PageIndex INT 1;
		
	--DECLARE THE Search_TerminateContractRequests OUTPUT PARAMETERS
		DECLARE LaborOfficeId INT ;
		DECLARE SequenceNumber INT;
		 
		CALL Search_TerminateContractRequests (NULL ,      
											   NULL ,
											   NULL ,
											   NULL ,
											   NULL ,
											   NULL ,
											   NULL ,
											   StatusIds,											   
											   NULL ,
										       CancelationRequestId ,
											   NULL ,
											   NULL ,
											   NULL ,
											   NULL ,
											   PageSize,
											   PageIndex ,
											   TotalRecordsCount,  
											   Environment.Variables.DB.ResultSet[])INTO TOTAL ;  
		
				         

	-- COUNTING THE RESULTS FROM THE Search_TerminateContractRequests
			SET Result = CARDINALITY(Environment.Variables.DB.ResultSet[]);
	
	--IF THERE IS NO RECORD RETURN ERROR INDICATES invalid CancelationRequestId or unacceptable status
	

		IF Result = 0 THEN
				
				 CALL Create_esbXML_Response_Header(propertiesRef.InvalidCancelationRequestId,rInHeaderRef,rOutHeaderRef);  
				     
			 	     propagate to terminal 'out1' ;
		 	  	   --  RETURN TRUE; 
 	  	
			ELSE
				
				
	--FILL THE DATA FROM THE Search_TerminateContractRequests PROCEDURE	
		SET LaborOfficeId = Environment.Variables.DB.ResultSet.LaborOfficeId ;
		SET SequenceNumber = Environment.Variables.DB.ResultSet.SequenceNumber ;	
				
		
		SET Environment.Variables.LaborOfficeId = LaborOfficeId ;
		SET Environment.Variables.SequenceNumber= SequenceNumber ;
		
	
		END IF;  
			
				

 RETURN TRUE;
	END;

		 
		
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];   
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;  
	END;
		--  Search_TerminateContractRequests PROCEDURE 
	CREATE PROCEDURE Search_TerminateContractRequests (IN LaborOfficeId INT,
													   IN SequenceNumber INT,
													   IN TCRequestId INT,
													   IN RequesterIdNo CHAR,
													   IN LaborerIdNo CHAR,
													   IN LaborerName CHAR,
													   IN RequesterTypeId INT,
													   IN StatusIds CHAR,
													   IN RDUpdateRequestId CHAR,
													   IN CancelationRequestId INT,
													   IN TCReasonId INT,
													   IN CreationDate CHAR,
													   IN ReleaseDate CHAR,
													   IN RemainingDays INT,
													   IN PageSize INT,
													   IN PageIndex INT,
													   INOUT TotalRecordsCount INT) 
				 										RETURNS INTEGER  
			                                             
    LANGUAGE DATABASE DYNAMIC RESULT SETS 1  
    EXTERNAL NAME "dbo.Search_TerminateContractRequests";
    
	
END MODULE;

