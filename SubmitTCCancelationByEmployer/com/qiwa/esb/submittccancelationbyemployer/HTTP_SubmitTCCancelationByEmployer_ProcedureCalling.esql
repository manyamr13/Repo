BROKER SCHEMA com.qiwa.esb.submittccancelationbyemployer
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE HTTP_SubmitTCCancelationByEmployer_ProcedureCalling
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		
		--***************************
			
		IF EXISTS(Environment.Properties.SubmitUpdateReleaseDateReqByLaborer.HTTP_SubmitUpdateReleaseDateReqByLaborer[]) THEN
            set Environment.Properties.SubmitTCCancelationByEmployer.HTTP_INT_SubmitTCCancelationByEmployer =
                Environment.Properties.SubmitUpdateReleaseDateReqByLaborer.HTTP_SubmitUpdateReleaseDateReqByLaborer;
            DELETE FIELD Environment.Properties.SubmitUpdateReleaseDateReqByLaborer.HTTP_SubmitUpdateReleaseDateReqByLaborer;
        END IF;

		DECLARE XMLVAR REFERENCE TO Environment.Properties.SubmitTCCancelationByEmployer.HTTP_INT_SubmitUpdateReleaseDateReqByLaborer.Variables;
		
		DECLARE rInputHeader REFERENCE TO InputRoot.XMLNSC.SubmitTCCancelationByEmployerRq.Header;     
		DECLARE rInputBody REFERENCE TO InputRoot.XMLNSC.SubmitTCCancelationByEmployerRq.Body;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SubmitTCCancelationByEmployerRs NAME 'Header';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.SubmitTCCancelationByEmployerRs NAME 'Body';
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCCancelationByEmployerRs.Header; 
		DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCCancelationByEmployerRs.Body; 
		
		IF Environment.Variables.Response1 <> '00000000' THEN 
			CALL Create_esbXML_Response_Header( XMLVAR.Privilege,rInputHeader, rOutHeaderRef);
		ELSE
			CALL Create_esbXML_Response_Header( GetESBSuccessCode(),rInputHeader, rOutHeaderRef);
		END IF;	
			
			
		SET Environment.Variables.Header = rInputHeader;
		SET Environment.Variables.Body = rInputBody;
		
		DECLARE LaborOfficeId INT;
        DECLARE SequenceNumber INT;
        DECLARE LaborerIdNo INT;
        DECLARE Check_Result INT;
        DECLARE Create_Result INT;
        DECLARE StatusId INT 13;
        DECLARE MWTransationId INT 12;
        DECLARE TCRequestId INT;
        DECLARE Result INT;
             
        SET LaborOfficeId = Environment.Variables.LaborOfficeId;
        SET SequenceNumber = Environment.Variables.SequenceNumber;
        SET LaborerIdNo = Environment.Variables.LaborerIdNo;
        SET TCRequestId =Environment.Variables.TCRequestId;
        
		
		
		CALL Check_PendingChangeSponsorRequests (LaborOfficeId, 
												SequenceNumber,
												LaborerIdNo,
												'2,3,7',
												Environment.Variables.DB.result[]) INTO Check_Result;
											    SET Result = CARDINALITY(Environment.Variables.DB.result[]);
													 						 
												IF Check_Result = 1 THEN
													CALL Create_esbXML_Response_Header( XMLVAR.AlreadyExist,rInputHeader, rOutHeaderRef);
											    ELSE
													 CALL Create_TCCancelationRequest(TCRequestId,
													 						 		  StatusId,
													 						 		  MWTransationId,
													 						 		  Environment.Variables.DB.result[]) INTO Create_Result;
													 						 									 
													 						 		 SET rOutBodyRef.CancelationRequestId = Environment.Variables.DB.result.CancelationRequestId;
													 						 		 CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInputHeader, rOutHeaderRef); 	
											   END IF;	
		--***************************
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	 CREATE PROCEDURE Check_PendingChangeSponsorRequests (IN LaborOfficeId INT, 
													 IN SequenceNumber INT,
													 IN LaborerIdNumber CHAR,
													 IN ListOfStatuses CHAR
													 )
									RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1
									 EXTERNAL NAME "dbo.Check_PendingChangeSponsorRequests"; 
									 
   CREATE PROCEDURE Create_TCCancelationRequest (IN RequestId INT,
   												 IN StatusId INT,				
											     IN MWTransationId INT
											  )
									RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1
									 EXTERNAL NAME "dbo.Create_TCCancelationRequest"; 
END MODULE;
