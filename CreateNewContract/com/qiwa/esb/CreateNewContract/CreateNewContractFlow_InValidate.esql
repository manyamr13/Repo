BROKER SCHEMA com.qiwa.esb.CreateNewContract


CREATE COMPUTE MODULE CreateNewContractFlow_InValidate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- save the headers
		SET Environment.Variables.Properties = InputRoot.Properties ;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.Variables.XMLNSC = InputRoot.XMLNSC;
		-- load properties
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.CreateNewContract.CreateNewContractFlow.Variables;
		-- refererence to Body
		DECLARE InBodyRef REFERENCE TO InputRoot.XMLNSC.CreateNewContractRq.Body;
		DECLARE InHeaderRef REFERENCE TO InputRoot.XMLNSC.CreateNewContractRq.Header;
		/*Validate the input data*/
		IF InHeaderRef.UserInfo.IDNumber IS NULL THEN --input header validation
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.IdNumMissing;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			/*laborer details validation*/
			--1-LaborerTypeId
		ELSEIF CAST(InBodyRef.LaborerDetails.LaborerTypeId AS INT) = 2 AND STARTSWITH(CAST(InBodyRef.LaborerDetails.LaborerIdNo AS CHAR),'1') OR
			CAST(InBodyRef.LaborerDetails.LaborerTypeId AS INT) = 1 AND STARTSWITH(CAST(InBodyRef.LaborerDetails.LaborerIdNo AS CHAR),'2') THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.WrongLabType;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			--2-laborer DOB Type
		ELSEIF (CAST(InBodyRef.LaborerDetails.DOBType AS INT) = 1 AND NOT EXISTS(InBodyRef.LaborerDetails.LaborerDOB.HijriDate[])) OR
			(CAST(InBodyRef.LaborerDetails.DOBType AS INT) = 2 AND NOT EXISTS(InBodyRef.LaborerDetails.LaborerDOB.GregDate[])) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.MissingData;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			/*Contract Details*/
			-- check if LaborOfficeId 2 (non-saudi) and ContractDurationId 2 (unlimited contract is not allowed for non-saudi laborer
		ELSEIF CAST(InBodyRef.LaborerDetails.LaborerTypeId AS INT) = 2 AND CAST(InBodyRef.ContractDetails.ContractDurationId AS INT) = 2 THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.NotAllowed;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			--ContractPeriod is Mandatory if the ContractDuration is 1
		ELSEIF CAST(InBodyRef.ContractDetails.ContractDurationId AS INT) = 1 AND( InBodyRef.ContractDetails.ContractPeriod IS NULL OR NOT EXISTS(InBodyRef.ContractDetails.ContractPeriod[]))THEN

			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.WrongDuration;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			--Expirydate is Mandatory if the ContractDuration is 1
		ELSEIF CAST(InBodyRef.ContractDetails.ContractDurationId AS INT) = 1 AND
			((InBodyRef.DateTypeId = 1 AND (InBodyRef.ContractDetails.ExpiryDate.HijriDate IS NULL OR NOT EXISTS(InBodyRef.ContractDetails.ExpiryDate.HijriDate[])) ) OR
			(InBodyRef.DateTypeId = 2 AND (InBodyRef.ContractDetails.ExpiryDate.GregDate IS NULL OR NOT EXISTS (InBodyRef.ContractDetails.ExpiryDate.GregDate[]))))

			THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ExpiryDateErr;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			--working type 2 needs Days/week + h/day
			ELSEIF( CAST(InBodyRef.ContractDetails.WorkingHoursTypeId AS INT) = 2 AND (InBodyRef.ContractDetails.DaysPerWeek IS NULL OR InBodyRef.ContractDetails.HoursPerDay IS NULL
			OR NOT EXISTS(InBodyRef.ContractDetails.DaysPerWeek[]) OR NOT EXISTS (InBodyRef.ContractDetails.HoursPerDay[]))) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.WHType1Err;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			--hours type 1 needs h/week
		ELSEIF ( CAST(InBodyRef.ContractDetails.WorkingHoursTypeId AS INT) = 1 AND (InBodyRef.ContractDetails.HoursPerWeek IS NULL OR NOT EXISTS(InBodyRef.ContractDetails.HoursPerWeek[]))) then
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.WHType2Err;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			--salary type id 2 % needs perc reason Ar+En
		ELSEIF ( CAST(InBodyRef.ContractDetails.SalaryTypeId AS INT) =2 AND ( InBodyRef.ContractDetails.PercentageReasonEN IS NULL
			OR InBodyRef.ContractDetails.PercentageReasonAR IS NULL OR NOT EXISTS (InBodyRef.ContractDetails.PercentageReasonEN[]) OR NOT EXISTS (InBodyRef.ContractDetails.PercentageReasonAR[]) )) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.MissingPercentage;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			-- ProbationPeriod it couldn’t be more than 90 days
		ELSEIF CAST(InBodyRef.ContractDetails.ProbationPeriod AS INTEGER) > CAST(loadedPropertiesRef.ProbationPeriod AS INTEGER) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ProbationPeriodError;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		--if ProbationPeriod is present and greater than 0, ProbationTerminationRight not exist then error E0001557
		ELSEIF CAST(InBodyRef.ContractDetails.ProbationPeriod AS INTEGER) > CAST(loadedPropertiesRef.ProbPeriodEffecValueZero AS INTEGER) AND NOT EXISTS(InBodyRef.ContractDetails.ProbationTerminationRight[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.ProbPeriodEffecValueError;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			
			-- VacationPeriod it couldn’t be less than 21 days
		ELSEIF CAST(InBodyRef.ContractDetails.VacationPeriod as INTEGER)< CAST(loadedPropertiesRef.VacationPeriod as INTEGER) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.VacationPeriodError;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			-- NoticPeriod it couldn’t more than than 120 days
		ELSEIF CAST(InBodyRef.ContractDetails.NoticePeriod as INTEGER)> CAST(loadedPropertiesRef.NoticePeriod as INTEGER) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.NoticPeriodError;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			-- if the ContractDurationId = 1 limited then Expiry date is M
			-- check date
		ELSEIF (InBodyRef.DateTypeId = 1 AND (InBodyRef.ContractDetails.StartDate.HijriDate IS NULL OR NOT EXISTS(InBodyRef.ContractDetails.StartDate.HijriDate[])) ) OR
			(InBodyRef.DateTypeId = 2 AND (InBodyRef.ContractDetails.StartDate.GregDate IS NULL OR NOT EXISTS (InBodyRef.ContractDetails.StartDate.GregDate[]))) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.MissingData;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			--And CategoryId, UploadedFiles any one missed from req
			--IF InBodyRef.IsUploadFilesSkiped =0 AND (InBodyRef.CategoryId NOT IN (1,2,3,4,5) OR NOT EXISTS (InBodyRef.ContractDetails.UploadedFiles.UploadedFilesItem[])) THEN

		ELSEIF CAST (InBodyRef.ContractDetails.IsUploadFilesSkiped AS INT) =1 AND EXISTS(InBodyRef.ContractDetails.UploadedFiles.UploadedFilesItem[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.FilesNotNeeded;

			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;

		ELSEIF (CAST (InBodyRef.ContractDetails.IsUploadFilesSkiped AS INT) =0 ) AND NOT EXISTS(InBodyRef.ContractDetails.UploadedFiles.UploadedFilesItem[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.FilesNeeded;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSEIF (NOT EXISTS(InBodyRef.ContractDetails.CategoryId[]) OR InBodyRef.ContractDetails.CategoryId IS NULL) AND EXISTS(InBodyRef.ContractDetails.UploadedFiles.UploadedFilesItem[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.MissingCategory;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSEIF InBodyRef.ContractDetails.IsUploadFilesSkiped =0 AND (InBodyRef.ContractDetails.CategoryId IN (1,2,3,4,5,6) AND EXISTS (InBodyRef.ContractDetails.UploadedFiles.UploadedFilesItem[])) THEN
			--Preparing files xml and validate that all files are uploaded
			DECLARE FileIds CHAR;
			DECLARE FileCount INT 0;
			CREATE FIELD Environment.Variables.SPXMLDATA;
			CREATE FIRSTCHILD OF Environment.Variables.SPXMLDATA DOMAIN 'XMLNSC';
			DECLARE SOURCE REFERENCE to InBodyRef.ContractDetails.UploadedFiles.UploadedFilesItem[1];
			WHILE LASTMOVE( SOURCE ) DO
				SET FileCount = FileCount + 1;
				SET Environment.Variables.SPXMLDATA.XMLNSC.ContractFilesList.ContractFileItem[FileCount].FileId = SOURCE.FileId;
				SET Environment.Variables.SPXMLDATA.XMLNSC.ContractFilesList.ContractFileItem[FileCount].FileTypeId = SOURCE.FileTypeId;
				MOVE SOURCE NEXTSIBLING REPEAT NAME ;
			END WHILE;

			IF (CAST(InBodyRef.ContractDetails.CategoryId AS INT) IN (1,2) AND FileCount <> 4) OR(CAST(InBodyRef.ContractDetails.CategoryId AS INT)= 3 AND FileCount <> 5)
				OR (CAST(InBodyRef.ContractDetails.CategoryId AS INT)= 4 AND FileCount <> 7)OR (CAST(InBodyRef.ContractDetails.CategoryId AS INT) IN (5,6) AND FileCount <> 3) THEN
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.MissingDocs;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			ELSE
				SET Environment.Variables.FileIds = CAST(ASBITSTREAM(Environment.Variables.SPXMLDATA.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);

			END IF;
		END IF;
		-- Check channel ID
		IF CONTAINS(UPPER(loadedPropertiesRef.ExcludedChannelId), UPPER(InHeaderRef.ChannelId)) THEN
			PROPAGATE TO TERMINAL 'out2';
			RETURN FALSE;

		ELSE --call check user eligiblity
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQMD = InputRoot.MQMD;
			SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
			-- prepare call to check user eli
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
			SET OutputRoot.XMLNSC.CheckUserEligibilityRq.Header = InHeaderRef;
			DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Header;
			CREATE LASTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Body';
			DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Body;
			SET rOutHeaderRef.ServiceCode = loadedPropertiesRef.CheckUserServiceCode;
			SET rOutHeaderRef.ChannelId = loadedPropertiesRef.ChannelId;
			-- prepare body
			SET rOutBodyRef.UserId = InHeaderRef.UserInfo.UserId;
			SET rOutBodyRef.IdNo = InHeaderRef.UserInfo.IDNumber;

			SET rOutBodyRef.LaborOfficeId = InBodyRef.EstablishmentDetails.LaborOfficeId;
			SET rOutBodyRef.EstablishmentSequence = InBodyRef.EstablishmentDetails.SequenceNumber;
			SET rOutBodyRef.ServiceId = loadedPropertiesRef.ServiceId;

			SET Environment.InternalServiceCaller.callCorrIDOffset = SUBSTRING(InHeaderRef.TransactionId FROM 1 FOR 1) || '1';
			RETURN TRUE;
		END IF;

	END;


END MODULE;