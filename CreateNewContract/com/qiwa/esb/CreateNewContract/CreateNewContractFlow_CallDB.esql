BROKER SCHEMA com.qiwa.esb.CreateNewContract
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE CreateNewContractFlow_CallDB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- set headers to out put root
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;
		-- refe to propreties and request header
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.CreateNewContract.CreateNewContractFlow.Variables;
		DECLARE InHeaderRef REFERENCE TO Environment.Variables.XMLNSC.CreateNewContractRq.Header;
		DECLARE InBodyRef REFERENCE TO Environment.Variables.XMLNSC.CreateNewContractRq.Body;
		
		-- create response Header
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.CreateNewContractRs NAME 'Header';
		DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CreateNewContractRs.Header;
		
		IF InputRoot.XMLNSC.ValidateEmploymentContractRs.Header.ResponseStatus.Code <> GetESBSuccessCode() THEN
			CALL Create_esbXML_Response_Header(InputRoot.XMLNSC.ValidateEmploymentContractRs.Header.ResponseStatus.Code,InHeaderRef,OutHeaderRef);
			RETURN TRUE; 
		END IF;
		
		IF EXISTS (InputRoot.XMLNSC.ValidateEmploymentContractRs.Body.RelatedToId[]) THEN
			SET InBodyRef.RelatedToId = CAST (InputRoot.XMLNSC.ValidateEmploymentContractRs.Body.RelatedToId AS INTEGER);
		END IF; 
		--get Estab Details
		DECLARE cr_Number, UseUnifiedNationalNumberFlag, SevenHundredNumber , NICAccountNumber CHARACTER;
		DECLARE PK_UnifiedNum , UnifiedNationalNumber , OwnerId INTEGER;
		IF Environment.Variables.GetEst.column[8].value.isNull= true THEN --GetCrNumber
			SET cr_Number= NULL;
		ELSE
			SET cr_Number= CAST(Environment.Variables.GetEst.column[8].value AS CHARACTER);
		END IF;
		IF Environment.Variables.GetEst.column[15].value.isNull= true THEN --PK_UnifiedNum
			SET PK_UnifiedNum= NULL;
		ELSE
			SET PK_UnifiedNum= CAST(Environment.Variables.GetEst.column[15].value AS INTEGER);
		END IF;
		IF Environment.Variables.GetEst.column[53].value.isNull= true THEN --UnifiedNationalNumber
			SET UnifiedNationalNumber= NULL;
		ELSE
			SET UnifiedNationalNumber= CAST(Environment.Variables.GetEst.column[53].value AS INTEGER);
		END IF;
		IF Environment.Variables.GetEst.column[54].value.isNull= true THEN --UnifiedNationalNumberFlag
			SET UseUnifiedNationalNumberFlag= NULL;
		ELSE
			SET UseUnifiedNationalNumberFlag= CAST(Environment.Variables.GetEst[1].column[54].value AS CHARACTER);
		END IF;
		IF Environment.Variables.GetEst.column[16].value.isNull= true THEN --OwnerId
			SET OwnerId = NULL;
		ELSE
			SET OwnerId = CAST(Environment.Variables.GetEst.column[16].value AS INTEGER);
		END IF;
		IF Environment.Variables.GetEst.column[14].value.isNull= true THEN --SevenHundredNumber
			SET SevenHundredNumber = NULL;
		ELSE
			SET SevenHundredNumber = CAST(Environment.Variables.GetEst.column[14].value AS CHARACTER);
		END IF;
		--NIC Account Number
		IF UseUnifiedNationalNumberFlag = '1' THEN
			SET NICAccountNumber =CAST( UnifiedNationalNumber AS CHARACTER);
		ELSEIF Environment.Variables.GetEst.column[50].value = 1 THEN --EstablishmentTypeCode
			SET NICAccountNumber =CAST( OwnerId AS CHARACTER);

		ELSEIF Environment.Variables.GetEst.column[50].value = 2 THEN --EstablishmentTypeCode
			SET NICAccountNumber = CAST(SevenHundredNumber AS CHARACTER);
		END IF;		
		
		
		--Preparing Contract data 		
		DECLARE StatusID INT;
		
		IF CAST(InBodyRef.RelatedToId AS INT) IN (3,4,6) THEN
			SET StatusID=12;
		ELSE
			SET StatusID=5;

		END IF;
		
		--prepare Allowance +  Cluses
		DECLARE Allowances, AddedClauses, AdditionalAllowancesList CHARACTER;	
		DECLARE index INT 1;
		IF EXISTS(InBodyRef.ContractDetails.Allowances.AllowancesItems[]) THEN
			SET Environment.XmlObject VALUE = NULL;
			DECLARE xmlObj reference to Environment.XmlObject;
			--Create XML object XMLNSC Domain
			Create FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
			-- DECLARE AllowancesList INTEGER CARDINALITY(InBodyRef.ContractDetails.Allowances.AllowancesItems[]);
			DECLARE rAllowancesList REFERENCE TO InBodyRef.ContractDetails.Allowances.AllowancesItems[1];
			WHILE LASTMOVE (rAllowancesList) DO
				SET xmlObj.ClausesList.AllowancesList.AllowanceItem[index].Key = rAllowancesList.Key;
				SET xmlObj.ClausesList.AllowancesList.AllowanceItem[index].Value =rAllowancesList.Value;
				SET index = index + 1;
				MOVE rAllowancesList NEXTSIBLING REPEAT NAME;
			END WHILE;

			SET Environment.xml.ClausesList = xmlObj.ClausesList;
			SET Environment.xml.ClausesList = CAST(ASBITSTREAM(Environment.xml CCSID 1208 ) AS CHARACTER CCSID 1208);
			SET Allowances = CAST(Environment.xml.ClausesList as CHARACTER);

		ELSE
			SET Allowances = NULL;
		END IF;
		SET index = 1;

		IF EXISTS(InBodyRef.ContractDetails.AddedClauses.AddedClausesItems[]) THEN
			SET Environment.XmlObject = NULL;
			DECLARE xmlObj2 reference to Environment.XmlObject2;
			SET Environment.xml = null;
			--Create XML object XMLNSC Domain
			Create FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
			--DECLARE AddedClausesList INTEGER CARDINALITY(InBodyRef.ContractDetails.AddedClauses.AddedClausesItems[]);
			DECLARE rAddedClausesList REFERENCE TO InBodyRef.ContractDetails.AddedClauses.AddedClausesItems[1];
			WHILE LASTMOVE (rAddedClausesList) DO
				SET xmlObj2.ClausesList.AddedClausesList.ClauseItem[index].Key = rAddedClausesList.Key;
				SET xmlObj2.ClausesList.AddedClausesList.ClauseItem[index].Value =rAddedClausesList.Value;
				SET index = index + 1;
				MOVE rAddedClausesList NEXTSIBLING REPEAT NAME;
			END WHILE;
			SET Environment.xml.ClausesList = xmlObj2.ClausesList;
			SET Environment.xml.ClausesList = CAST(ASBITSTREAM(Environment.xml CCSID 1208 ) AS CHARACTER CCSID 1208);
			SET AddedClauses = CAST(Environment.xml.ClausesList as CHARACTER);
		ELSE
			SET AddedClauses = NULL;
		END IF;
		SET index = 1;
		IF EXISTS(InBodyRef.ContractDetails.AdditionalAllowancesList.Item[]) THEN
			SET Environment.XmlObject = NULL;
			DECLARE xmlObj3 reference to Environment.XmlObject3;
			SET Environment.xml = null;
			--Create XML object XMLNSC Domain
			Create FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
			--DECLARE AdditionalAllowances INTEGER CARDINALITY(InBodyRef.ContractDetails.AdditionalAllowancesList.Item[]);
			DECLARE rAdditionalAllowancesList REFERENCE TO InBodyRef.ContractDetails.AdditionalAllowancesList.Item[1];
			WHILE LASTMOVE (rAdditionalAllowancesList) DO
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].BenefitNameAr = rAdditionalAllowancesList.BenefitNameAr;
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].BenefitNameEn = rAdditionalAllowancesList.BenefitNameEn;
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].Amount = rAdditionalAllowancesList.Amount;
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].AmountType = rAdditionalAllowancesList.AmountType;
				SET xmlObj3.AddtionalItemsList.AddtionalItem[index].Frequency = rAdditionalAllowancesList.Frequency;
				SET index = index + 1;
				MOVE rAdditionalAllowancesList NEXTSIBLING REPEAT NAME ;
			END WHILE;
			SET Environment.xml.AddtionalItemsList = xmlObj3.AddtionalItemsList;
			SET Environment.xml.AddtionalItemsList = CAST(ASBITSTREAM(Environment.xml CCSID 1208 ) AS CHARACTER CCSID 1208);
			SET AdditionalAllowancesList = CAST(Environment.xml.AddtionalItemsList as CHARACTER);
		ELSE
			SET AdditionalAllowancesList = NULL;
		END IF;		
		
		DECLARE JoinDate TIMESTAMP CAST(CAST(InBodyRef.ContractDetails.JoiningDate AS CHARACTER FORMAT 'yyyy-MM-dd') || ' ' || CAST(CURRENT_TIME AS CHARACTER FORMAT 'HH:mm:ss.SSS') AS TIMESTAMP);
		DECLARE Res INT; 
		
		CALL Create_Contract (
		CAST(InBodyRef.EstablishmentDetails.LaborOfficeId as integer),
		CAST(InBodyRef.EstablishmentDetails.SequenceNumber as integer),
		CAST(InBodyRef.EstablishmentDetails.EstablishmentId as integer),
		InBodyRef.EstablishmentDetails.EstablishmentNameEn,
		InBodyRef.EstablishmentDetails.EstablishmentNameAr,
		CAST (InBodyRef.EstablishmentDetails.UnifiedNumberId AS INTEGER),
		CAST (cr_Number AS CHARACTER),
		InBodyRef.EstablishmentDetails.EntityId,
		CAST (PK_UnifiedNum AS INTEGER),
		CAST (UnifiedNationalNumber AS INTEGER),
		CAST (UseUnifiedNationalNumberFlag AS CHAR),
		CAST (OwnerId AS INTEGER),
		CAST (NICAccountNumber AS CHAR), --its a row only
		CAST (SevenHundredNumber AS CHAR),
		InBodyRef.EstablishmentDetails.EstablishmentEmail,
		InBodyRef.RequesterDetails.RequesterIdNo,
		CAST(InBodyRef.RequesterDetails.RequesterUserId AS INTEGER),
		InBodyRef.RequesterDetails.RequesterName,
		CAST(InBodyRef.RequesterDetails.RequesterRole AS CHARACTER),
		InBodyRef.LaborerDetails.LaborerIdNo,
		CAST(InBodyRef.LaborerDetails.LaborerTypeId AS INTEGER),
		CAST(InBodyRef.LaborerDetails.LaborerIdExpiryDate AS TIMESTAMP),
		CAST(InBodyRef.LaborerDetails.BorderNumber as integer),
		InBodyRef.LaborerDetails.LaborerName,
		CAST (InBodyRef.LaborerDetails.DOBType AS INTEGER),
		CAST (InBodyRef.LaborerDetails.LaborerDOB.GregDate AS TIMESTAMP),
		CAST (InBodyRef.LaborerDetails.LaborerDOB.HijriDate AS INTEGER),
		InBodyRef.LaborerDetails.LaborerEmail,
		InBodyRef.LaborerDetails.LaborerMobileNumber,
		CAST(InBodyRef.ContractDetails.LaborerJobNumber as CHARACTER),
		CAST(InBodyRef.LaborerDetails.Nationality AS INT),
		CAST(InBodyRef.LaborerDetails.Gender AS INT),
		CAST(InBodyRef.LaborerDetails.Religion AS INT),
		CAST(InBodyRef.LaborerDetails.MaritalStatus AS INT),
		CAST(InBodyRef.LaborerDetails.EducationId AS INT),
		CAST(InBodyRef.LaborerDetails.SpecialtyId AS INT),
		CAST(InBodyRef.LaborerDetails.IBAN AS CHAR),
		CAST(InBodyRef.ContractDetails.CategoryId AS INT),
		CAST(InBodyRef.ContractDetails.OccupationId AS INTEGER),
		InBodyRef.ContractDetails.JobTitle.JobTitleAr,
		InBodyRef.ContractDetails.JobTitle.JobTitleEng,
		CAST(InBodyRef.LaborerDetails.WorkLocationId AS INT),
		CAST(InBodyRef.ContractDetails.ContractTypeId as integer),
		CAST(InBodyRef.ContractDetails.ContractDurationId as integer),
		CAST(InBodyRef.ContractDetails.ContractPeriod as integer),
		CAST(InBodyRef.ContractDetails.WorkingHoursTypeId as integer),
		CAST(InBodyRef.ContractDetails.HoursPerWeek AS INTEGER),
		CAST(InBodyRef.ContractDetails.DaysPerWeek AS INTEGER),
		CAST(InBodyRef.ContractDetails.HoursPerDay AS INTEGER),
		CAST(InBodyRef.ContractDetails.VacationPeriod as integer),
		CAST(InBodyRef.ContractDetails.ProbationPeriod as integer),
		CAST(InBodyRef.ContractDetails.NoticePeriod as integer),
		CAST(InBodyRef.DateTypeId as integer),
		CAST(InBodyRef.ContractDetails.StartDate.HijriDate as integer),
		CAST(InBodyRef.ContractDetails.ExpiryDate.HijriDate as integer),
		CAST (InBodyRef.ContractDetails.StartDate.GregDate as TIMESTAMP),
		CAST (InBodyRef.ContractDetails.ExpiryDate.GregDate as TIMESTAMP),
		JoinDate,
		CAST(InBodyRef.ContractDetails.SalaryTypeId AS INT),
		CAST(InBodyRef.ContractDetails.SalaryFrequency AS INTEGER),
		CAST(InBodyRef.ContractDetails.Salary AS CHARACTER),
		CAST(InBodyRef.ContractDetails.PercentageReasonAR AS CHAR),
		CAST(InBodyRef.ContractDetails.PercentageReasonEN AS CHAR),
		CAST(InBodyRef.ContractDetails.OptionalArticles.Period AS INTEGER),
		InBodyRef.ContractDetails.OptionalArticles.Location,
		InBodyRef.ContractDetails.OptionalArticles.WorkField,
		CAST(InBodyRef.ContractDetails.IsUploadFilesSkiped as integer),
		CAST(InBodyRef.ContractDetails.RenewalStatusId as integer),
		CAST(InBodyRef.LanguageId as integer),
		CAST(InBodyRef.RelatedToId as integer),
		StatusID,
		CAST (InHeaderRef.ChannelId AS CHARACTER),
		CAST (InHeaderRef.TransactionId AS CHARACTER),
  		CAST(InBodyRef.ContractDetails.ProbationTerminationRight as integer),
		Environment.Variables.ContractID[]) INTO Res;
		IF Res =-1 THEN
			--ERROR
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.RunTimeError,InHeaderRef,OutHeaderRef);
			RETURN TRUE;
		ELSEIF Res =-2 THEN
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.ApprovedError,InHeaderRef,OutHeaderRef);
			RETURN TRUE;
		
		ELSEIF Res =-3 THEN
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.GerneralError,InHeaderRef,OutHeaderRef);
			RETURN TRUE;
			
		END IF;
		


		DECLARE ResDetails INTEGER;
		IF EXISTS(Environment.Variables.FileIds[]) OR Allowances IS NOT NULL OR AddedClauses IS NOT NULL OR AdditionalAllowancesList IS NOT NULL THEN
			CALL CreateContractDetails ((Environment.Variables.ContractID[1].ContractId),
			Allowances,
			AdditionalAllowancesList,
			AddedClauses,
			COALESCE(Environment.Variables.FileIds, NULL),
			CAST(InBodyRef.RequesterDetails.RequesterIdNo AS INTEGER)) INTO ResDetails;
			IF ResDetails = 0 THEN
				COMMIT;
				-- create response Header
				CREATE LASTCHILD OF OutputRoot.XMLNSC.CreateNewContractRs NAME 'Body';
				DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.CreateNewContractRs.Body;
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),InHeaderRef,OutHeaderRef);
				SET OutBodyRef.ContractId = Environment.Variables.ContractID[1].ContractId;
				SET OutBodyRef.Status.Code = Environment.Variables.ContractID[1].StatusId;
				SET OutBodyRef.Status.NameAr = Environment.Variables.ContractID[1].StatusAr;
				SET OutBodyRef.Status.NameEn = Environment.Variables.ContractID[1].StatusEn;
				PROPAGATE TO TERMINAL 'out' DELETE NONE;
			ELSE
				ROLLBACK;
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.FailCraetDet,InHeaderRef,OutHeaderRef);
				RETURN TRUE;
				
			END IF;
		ELSE 
			COMMIT;
				-- create response Header
				CREATE LASTCHILD OF OutputRoot.XMLNSC.CreateNewContractRs NAME 'Body';
				DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.CreateNewContractRs.Body;
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),InHeaderRef,OutHeaderRef);
				SET OutBodyRef.ContractId = Environment.Variables.ContractID[1].ContractId;
				SET OutBodyRef.Status.Code = Environment.Variables.ContractID[1].StatusId;
				SET OutBodyRef.Status.NameAr = Environment.Variables.ContractID[1].StatusAr;
				SET OutBodyRef.Status.NameEn = Environment.Variables.ContractID[1].StatusEn;
				PROPAGATE TO TERMINAL 'out' DELETE NONE;
		END IF;

		DECLARE GOSIRes INTEGER CreateGOSIReplica (Environment.Variables.ContractID[1].ContractId,
		Environment.Variables.ContractID[1].StatusId,0) ;
		COMMIT;
		IF GOSIRes <> 0 THEN
			SET OutputRoot.XMLNSC.data.CNC.GOSIRep = Environment.Variables.ContractID[1].ContractId;
		END IF;
		IF Environment.Variables.ContractID[1].StatusId =5 THEN
			DECLARE RepRes INTEGER CreateReplica(Environment.Variables.ContractID[1].ContractId,
			CAST(InBodyRef.RequesterDetails.RequesterUserId AS INTEGER),
			InBodyRef.LaborerDetails.LaborerIdNo,
			InBodyRef.LaborerDetails.LaborerName,
			InBodyRef.LaborerDetails.LaborerEmail,
			InBodyRef.LaborerDetails.LaborerMobileNumber,
			CAST(InBodyRef.LaborerDetails.Nationality AS INT));
			COMMIT;
			IF RepRes<>0 THEN
				SET OutputRoot.XMLNSC.data.CNC.NotifiRep = Environment.Variables.ContractID[1].ContractId;
			END IF ;			


		END IF;

		IF EXISTS(OutputRoot.XMLNSC.data.CNC[])THEN
			DELETE FIELD OutputRoot.XMLNSC.CreateNewContractRs;
			PROPAGATE TO TERMINAL 'out1' DELETE NONE ;
		END IF;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

	CREATE PROCEDURE Create_Contract
	(IN LaborOfficeId INTEGER,
	IN SequenceNumber INTEGER,
	IN EstabID INTEGER,
	IN EstabNameEn CHARACTER,
	IN EstabNameAr CHARACTER,
	IN UnifiedNumberID INTEGER,
	IN CRNum CHARACTER,
	IN EntityID CHARACTER,
	IN GOSIUnifiedNumberId INTEGER,
	IN UnifidNationalNumber INTEGER,
	IN UseUnifiedNatioalFlag CHARACTER,
	IN OwnerID INTEGER,
	IN NICAccountNumber CHARACTER,
	IN SevenHundredNumber CHARACTER,
	IN EstablishmentEmail CHARACTER,
	IN RequesterIdNumber CHARACTER,
	IN RequesterUserId INTEGER,
	IN RequesterName CHARACTER ,
	IN RequesterRole CHARACTER,
	IN LaborerId CHARACTER,
	IN LaborerIdType INTEGER,
	IN LabIDExpDate TIMESTAMP,
	IN BorderNumber INTEGER,
	IN LaborerName CHARACTER,
	IN DOBTypeID INTEGER,
	IN DOBGreg TIMESTAMP,
	IN DOBHijri INTEGER,
	IN LaborerEmail CHARACTER,
	IN LabMobileNum CHARACTER,
	IN LaborerJobNum CHARACTER,
	IN NationalityID INTEGER,
	IN GenderID INTEGER,
	IN ReligonID INTEGER,
	IN MartialStatusId INTEGER,
	IN EducationID INTEGER,
	IN SpecialityID INTEGER,
	IN IBAN CHARACTER,
	IN CategoryID INTEGER,
	IN OccupationID INTEGER,
	IN JobTitleAr CHARACTER,
	IN JobTitleEn CHARACTER,
	IN WorkLocationID INTEGER,
	IN ContractTypeID INTEGER,
	IN ContractDurationID INTEGER,
	IN ContractPeriodID INTEGER,
	IN workingHoursType INTEGER,
	IN HoursPerWeek INTEGER,
	IN DaysPerWeek INTEGER,
	IN HoursPerDay INTEGER,
	IN VacationPeriod INTEGER,
	IN ProbationPeriod INTEGER,
	IN NoticePeriod INTEGER,
	IN DateTypeID INTEGER,
	IN HijriStartDate INTEGER,
	IN HijriExpiryDate INTEGER,
	IN GregStartDate TIMESTAMP,
	IN GregorianExpiryDate TIMESTAMP,
	IN JoiningDate TIMESTAMP,
	IN SalaryTypeID INTEGER,
	IN SalaryFreq INTEGER,
	IN Salary CHARACTER,
	IN PercentageResAr CHARACTER,
	IN PercentageResEn CHARACTER,
	IN Period INTEGER,
	IN Location CHARACTER,
	IN WorkField CHARACTER,
	IN IsUploadedFilesSkip INTEGER,
	IN RenewalStatusID INTEGER,
	IN LangugaeID INTEGER,
	IN RelatedToID INTEGER,
	IN StatusID INTEGER,
	IN ChannelID CHARACTER,
	IN TransactionID CHARACTER,
  	IN ProbationTerminationRightCode INTEGER) 
	RETURNS INTEGER
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Create_NewContract"; --Create_NewContract_TobeDeployed



	CREATE PROCEDURE Check_LaborerContractStatus (IN LaborOfficeId INTEGER,
	IN SequenceNumber INTEGER,
	IN LaborerIdNo CHARACTER)
	RETURNS INTEGER LANGUAGE DATABASE
	EXTERNAL NAME "dbo.Check_LaborerContractStatus";



	CREATE PROCEDURE CreateContractDetails (IN ContractId INTEGER,
	IN Allowances CHARACTER,
	IN AdditionalItems CHARACTER,
	IN AddedClauses CHARACTER,
	IN Files CHARACTER,
	IN RequesterUserID INTEGER)
	RETURNS INTEGER LANGUAGE DATABASE
	EXTERNAL NAME "dbo.ContractDetails_Create";




	CREATE PROCEDURE CreateGOSIReplica (IN ContractId INTEGER,
	IN StatusId INTEGER,
	IN IsUpdate INTEGER)
	RETURNS INTEGER LANGUAGE DATABASE
	EXTERNAL NAME "dbo.ContractGOSIReplica_Create";

	CREATE PROCEDURE CreateReplica (IN ContractId INTEGER,
	IN RequesterUserId INTEGER,
	IN LaborerID CHARACTER,
	IN LaborerName CHARACTER,
	IN LaborerEmail CHARACTER,
	IN LaborerMobileNum CHARACTER,
	IN NationalityID INTEGER)
	RETURNS INTEGER LANGUAGE DATABASE
	EXTERNAL NAME "dbo.ContractReplica_Create";
END MODULE;