BROKER SCHEMA com.qiwa.esb.submittccancelationbylaborer
PATH Qiwa.Framework.Lib;


CREATE COMPUTE MODULE HTTP_SubmitTCCancelationByLaborerFlow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

		DECLARE XMLVAR REFERENCE TO Environment.Properties.SubmitTCCancelationByLaborer.HTTP_SubmitTCCancelationByLaborerFlow.Variables;
		
		DECLARE rInputHeader REFERENCE TO InputRoot.XMLNSC.SubmitTCCancelationByLaborerRq.Header;     
		DECLARE rInputBody REFERENCE TO InputRoot.XMLNSC.SubmitTCCancelationByLaborerRq.Body;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SubmitTCCancelationByLaborerRs NAME 'Header';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.SubmitTCCancelationByLaborerRs NAME 'Body';
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCCancelationByLaborerRs.Header; 
		DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.SubmitTCCancelationByLaborerRs.Body; 
		
		
		SET Environment.Variables.Header = rInputHeader;
		SET Environment.Variables.Body = rInputBody;
		
		
		IF rInputHeader.UserInfo.IDNumber IS NULL THEN 
			CALL Create_esbXML_Response_Header( XMLVAR.IdNoMissing,rInputHeader, rOutHeaderRef);
		ELSE 
			 DECLARE Search_Result INT;
             DECLARE Check_Result INT;
             DECLARE Create_Result INT;
             DECLARE TotalRecordsCount INT;
             DECLARE StatusId INT 17;
             DECLARE MWTransationId INT 18;
             DECLARE TCRequestId INT;
             SET TCRequestId = rInputBody.TCRequestId;
             DECLARE Result INT;
		CALL Search_TerminateContractRequests(NULL,
											  NULL,
											  TCRequestId,
											  NULL,
											  rInputHeader.UserInfo.IDNumber,
											  NULL,
											  NULL,
											  NULL,--
											  NULL,
											  NULL,
											  NULL,
											  NULL,
											  NULL,
											  NULL,
											  1,--
											  1,--
											  TotalRecordsCount,
                                 Environment.Variables.DB.result[])INTO Search_Result; 
                                 
                                 SET Result = CARDINALITY(Environment.Variables.DB.result[]);
                                 DECLARE LaborOfficeId INT;
                                 DECLARE SequenceNumber INT;
                                 DECLARE CancelationRequestId INT;
                                                                  
                                 SET LaborOfficeId = Environment.Variables.DB.ResultSet.LaborOfficeId;                            
                                 SET SequenceNumber = Environment.Variables.DB.ResultSet.SequenceNumber;
                                 SET CancelationRequestId = Environment.Variables.DB.ResultSet.CancelationRequestId;
                                 
                                 IF Result = 0 THEN
                                 	CALL Create_esbXML_Response_Header( XMLVAR.invalidTCRequestId,rInputHeader, rOutHeaderRef);
                                 	
                                 ELSEIF Environment.Variables.DB.result.CancelationRequestStatusId = 4 THEN 
                                 	CALL Create_esbXML_Response_Header( XMLVAR.AlreadyExist,rInputHeader, rOutHeaderRef);
                                 	
                                 ELSE 
                                 	CALL Check_PendingChangeSponsorRequests (LaborOfficeId, 
																			 SequenceNumber,
													 						 rInputHeader.UserInfo.IDNumber,
													 						 '2,3,7',
													 						 Environment.Variables.DB.result[]) INTO Check_Result; 
													 						 
													 						 IF Check_Result =1 THEN
													 						 	CALL Create_esbXML_Response_Header( XMLVAR.AlreadyExist,rInputHeader, rOutHeaderRef);
													 						 ELSE
													 						 	CALL Create_TCCancelationRequest(TCRequestId,
													 						 									 StatusId,
													 						 									 MWTransationId,
													 						 									 Environment.Variables.DB.result[]) INTO Create_Result;
													 						 									 
													 						 									 SET rOutBodyRef.CancelationRequestId = Environment.Variables.DB.result.CancelationRequestId;
													 						 									 CALL Create_esbXML_Response_Header( GetESBSuccessCode(),rInputHeader, rOutHeaderRef); 	
													 						 END IF;
													 						 
                                 END IF;   
                                
                                 
			
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE Search_TerminateContractRequests (IN LaborOfficeId INT,
													   IN SequenceNumber INT,
													   IN TCRequestId INT,
													   IN RequesterIdNo CHAR,
													   IN LaborerIdNo CHAR,
													   IN LaborerName CHAR,
													   IN RequesterTypeId INT,
													   IN StatusIds CHAR,
													   IN RDUpdateRequestId CHAR,
													   IN CancelationRequestId INT,
													   IN TCReasonId INT,
													   IN CreationDate CHAR,
													   IN ReleaseDate CHAR,
													   IN RemainingDays INT,
													   IN PageSize INT,
													   IN PageIndex INT,
													   INOUT TotalRecordsCount INT
													   )
									RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1
									 EXTERNAL NAME "dbo.Search_TerminateContractRequests";

    CREATE PROCEDURE Check_PendingChangeSponsorRequests (IN LaborOfficeId INT, 
													 IN SequenceNumber INT,
													 IN LaborerIdNumber CHAR,
													 IN ListOfStatuses CHAR
													 )
									RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1
									 EXTERNAL NAME "dbo.Check_PendingChangeSponsorRequests"; 
									 
   CREATE PROCEDURE Create_TCCancelationRequest (IN RequestId INT,
   												 IN StatusId INT,				
											     IN MWTransationId INT
											  )
									RETURNS INTEGER LANGUAGE DATABASE DYNAMIC RESULT SETS 1
									 EXTERNAL NAME "dbo.Create_TCCancelationRequest"; 
END MODULE;
