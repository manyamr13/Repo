




BROKER SCHEMA com.qiwa.esb.GetGosiContractsList


CREATE COMPUTE MODULE Qiwa_Or_Qiwa_Individual
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();
		-- store request
		SET Environment.OriginalRequest = InputRoot;
		-- ensure environment properties reference points to the right group
		IF EXISTS(Environment.Properties.GetGosiContractsList.HTTP_INT_GetGosiContractsList[]) THEN
			SET Environment.Properties.GetGosiContractsList.HTTP_GetGosiContractsList =
			Environment.Properties.GetGosiContractsList.HTTP_INT_GetGosiContractsList;
			DELETE FIELD Environment.Properties.GetGosiContractsList.HTTP_INT_GetGosiContractsList;
		END IF;
		-- set properties reference
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.GetGosiContractsList.HTTP_GetGosiContractsList;
		-- check ID number in header exists
		IF NOT EXISTS(InputRoot.XMLNSC.GetGosiContractsListRq.Header.UserInfo.IDNumber[]) THEN
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.IDNumberInHeaderMissing;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		-- if channel ID 'ESB' or 'unifiedPortal'
		IF InputRoot.XMLNSC.GetGosiContractsListRq.Header.ChannelId = 'ESB'
			OR InputRoot.XMLNSC.GetGosiContractsListRq.Header.ChannelId = loadedPropertiesRef.Variables.unifiedPortal THEN
			PROPAGATE TO TERMINAL 'out2';
			RETURN FALSE;
			-- if channel ID 'Qiwa Individual'
		ELSEIF InputRoot.XMLNSC.GetGosiContractsListRq.Header.ChannelId = 'Qiwa Individual' THEN
			IF NOT EXISTS(InputRoot.XMLNSC.GetGosiContractsListRq.Body.LaborerDetails.LaborerIdNo[]) THEN
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.Error_6;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			ELSEIF InputRoot.XMLNSC.GetGosiContractsListRq.Header.UserInfo.IDNumber = InputRoot.XMLNSC.GetGosiContractsListRq.Body.LaborerDetails.LaborerIdNo THEN
				PROPAGATE TO TERMINAL 'out2';
				RETURN FALSE;
			ELSE
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.IDNumberNotEqualsLaborerIdNo;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF;
		ELSE
			-- check if channel ID is 'Qiwa'
			IF InputRoot.XMLNSC.GetGosiContractsListRq.Header.ChannelId = 'Qiwa' THEN
				IF NOT EXISTS(InputRoot.XMLNSC.GetGosiContractsListRq.Body.EstablishmentDetails.LaborOfficeId[])
					OR NOT EXISTS(InputRoot.XMLNSC.GetGosiContractsListRq.Body.EstablishmentDetails.SequenceNumber[]) THEN
					SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.Error_5;
					PROPAGATE TO TERMINAL 'out1';
					RETURN FALSE;
				END IF;
			END IF;
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
			CREATE FIRSTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Header';
			DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Header;
			CREATE LASTCHILD OF OutputRoot.XMLNSC.CheckUserEligibilityRq NAME 'Body';
			DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEligibilityRq.Body;

			SET rOutHeaderRef = InputRoot.XMLNSC.GetGosiContractsListRq.Header;
			--prepare body CheckUserEligibility
			SET rOutHeaderRef.ServiceCode = loadedPropertiesRef.Variables.ServiceCodeCUE;
			--SET rOutHeaderRef.ChannelId = loadedPropertiesRef.Variables.ChannelId;
			SET rOutBodyRef.UserId = CAST(InputRoot.XMLNSC.GetGosiContractsListRq.Header.UserInfo.UserId AS CHARACTER);
			SET rOutBodyRef.IdNo = CAST(InputRoot.XMLNSC.GetGosiContractsListRq.Header.UserInfo.IDNumber AS CHARACTER);
			SET rOutBodyRef.LaborOfficeId VALUE = CAST(InputRoot.XMLNSC.GetGosiContractsListRq.Body.EstablishmentDetails.LaborOfficeId AS INTEGER);
			SET rOutBodyRef.EstablishmentSequence VALUE = CAST(InputRoot.XMLNSC.GetGosiContractsListRq.Body.EstablishmentDetails.SequenceNumber AS INTEGER);
			SET rOutBodyRef.ServiceId VALUE = CAST(loadedPropertiesRef.Variables.ServiceId AS INTEGER);
			RETURN TRUE;
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;